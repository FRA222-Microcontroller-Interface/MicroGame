
MicroGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006390  08006390  00007390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006408  08006408  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006408  08006408  00007408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006410  08006410  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006410  08006410  00007410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006414  08006414  00007414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006418  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000000c  08006424  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08006424  000082a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dcc  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000224d  00000000  00000000  00018e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0001b058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a41  00000000  00000000  0001bd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002498a  00000000  00000000  0001c7c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001111f  00000000  00000000  0004114b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8b46  00000000  00000000  0005226a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013adb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  0013adf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0013e438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006378 	.word	0x08006378

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006378 	.word	0x08006378

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b092      	sub	sp, #72	@ 0x48
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fd1e 	bl	8000f4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f933 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fa49 	bl	80009ac <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fa05 	bl	8000928 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 f9b9 	bl	8000894 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000522:	f000 f977 	bl	8000814 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (State == 0)
 8000526:	4b83      	ldr	r3, [pc, #524]	@ (8000734 <main+0x22c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d114      	bne.n	8000558 <main+0x50>
	  {
		  uint8_t text[] = "Enter Difficulty from 1 - 3";
 800052e:	4b82      	ldr	r3, [pc, #520]	@ (8000738 <main+0x230>)
 8000530:	f107 041c 	add.w	r4, r7, #28
 8000534:	461d      	mov	r5, r3
 8000536:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800053a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  HAL_UART_Transmit(&hlpuart1, text, 28, 10);
 8000542:	f107 011c 	add.w	r1, r7, #28
 8000546:	230a      	movs	r3, #10
 8000548:	221c      	movs	r2, #28
 800054a:	487c      	ldr	r0, [pc, #496]	@ (800073c <main+0x234>)
 800054c:	f004 fa6a 	bl	8004a24 <HAL_UART_Transmit>
		  State = 1;
 8000550:	4b78      	ldr	r3, [pc, #480]	@ (8000734 <main+0x22c>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	e083      	b.n	8000660 <main+0x158>
	  }
	  else if (State == 1)
 8000558:	4b76      	ldr	r3, [pc, #472]	@ (8000734 <main+0x22c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d13c      	bne.n	80005da <main+0xd2>
	  {
		  Read[4] = '\0';
 8000560:	4b77      	ldr	r3, [pc, #476]	@ (8000740 <main+0x238>)
 8000562:	2200      	movs	r2, #0
 8000564:	711a      	strb	r2, [r3, #4]
		  HAL_UART_Receive(&hlpuart1, Read, 4,10);
 8000566:	230a      	movs	r3, #10
 8000568:	2204      	movs	r2, #4
 800056a:	4975      	ldr	r1, [pc, #468]	@ (8000740 <main+0x238>)
 800056c:	4873      	ldr	r0, [pc, #460]	@ (800073c <main+0x234>)
 800056e:	f004 fae7 	bl	8004b40 <HAL_UART_Receive>

		  uint8_t data = Read[0];
 8000572:	4b73      	ldr	r3, [pc, #460]	@ (8000740 <main+0x238>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

		  if (data == 49)
 800057a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800057e:	2b31      	cmp	r3, #49	@ 0x31
 8000580:	d10b      	bne.n	800059a <main+0x92>
		  {
			  Diff = 100;
 8000582:	4b70      	ldr	r3, [pc, #448]	@ (8000744 <main+0x23c>)
 8000584:	2264      	movs	r2, #100	@ 0x64
 8000586:	701a      	strb	r2, [r3, #0]
			  State = 2;
 8000588:	4b6a      	ldr	r3, [pc, #424]	@ (8000734 <main+0x22c>)
 800058a:	2202      	movs	r2, #2
 800058c:	701a      	strb	r2, [r3, #0]
			  memset(Read, 0, sizeof(Read));
 800058e:	2204      	movs	r2, #4
 8000590:	2100      	movs	r1, #0
 8000592:	486b      	ldr	r0, [pc, #428]	@ (8000740 <main+0x238>)
 8000594:	f005 fec4 	bl	8006320 <memset>
 8000598:	e062      	b.n	8000660 <main+0x158>
		  }
		  else if (data == 50)
 800059a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800059e:	2b32      	cmp	r3, #50	@ 0x32
 80005a0:	d10b      	bne.n	80005ba <main+0xb2>
		  {
			  Diff = 10;
 80005a2:	4b68      	ldr	r3, [pc, #416]	@ (8000744 <main+0x23c>)
 80005a4:	220a      	movs	r2, #10
 80005a6:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005a8:	4b62      	ldr	r3, [pc, #392]	@ (8000734 <main+0x22c>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	701a      	strb	r2, [r3, #0]
			  memset(Read, 0, sizeof(Read));
 80005ae:	2204      	movs	r2, #4
 80005b0:	2100      	movs	r1, #0
 80005b2:	4863      	ldr	r0, [pc, #396]	@ (8000740 <main+0x238>)
 80005b4:	f005 feb4 	bl	8006320 <memset>
 80005b8:	e052      	b.n	8000660 <main+0x158>
		  }
		  else if (data == 51)
 80005ba:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80005be:	2b33      	cmp	r3, #51	@ 0x33
 80005c0:	d14e      	bne.n	8000660 <main+0x158>
		  {
			  Diff = 1;
 80005c2:	4b60      	ldr	r3, [pc, #384]	@ (8000744 <main+0x23c>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005c8:	4b5a      	ldr	r3, [pc, #360]	@ (8000734 <main+0x22c>)
 80005ca:	2202      	movs	r2, #2
 80005cc:	701a      	strb	r2, [r3, #0]
			  memset(Read, 0, sizeof(Read));
 80005ce:	2204      	movs	r2, #4
 80005d0:	2100      	movs	r1, #0
 80005d2:	485b      	ldr	r0, [pc, #364]	@ (8000740 <main+0x238>)
 80005d4:	f005 fea4 	bl	8006320 <memset>
 80005d8:	e042      	b.n	8000660 <main+0x158>
		  }

	  }
	  else if (State == 2)
 80005da:	4b56      	ldr	r3, [pc, #344]	@ (8000734 <main+0x22c>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d13e      	bne.n	8000660 <main+0x158>
	  {
		  for (int i = 1; i < 10; i++)
 80005e2:	2301      	movs	r3, #1
 80005e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80005e6:	e038      	b.n	800065a <main+0x152>
		  {
			  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == RESET && stop == 0)
 80005e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005ec:	4856      	ldr	r0, [pc, #344]	@ (8000748 <main+0x240>)
 80005ee:	f001 fb13 	bl	8001c18 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d107      	bne.n	8000608 <main+0x100>
 80005f8:	4b54      	ldr	r3, [pc, #336]	@ (800074c <main+0x244>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d103      	bne.n	8000608 <main+0x100>
			  {
				  stop = 1;
 8000600:	4b52      	ldr	r3, [pc, #328]	@ (800074c <main+0x244>)
 8000602:	2201      	movs	r2, #1
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	e025      	b.n	8000654 <main+0x14c>
			  }

			  else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == SET && stop == 1)
 8000608:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800060c:	484e      	ldr	r0, [pc, #312]	@ (8000748 <main+0x240>)
 800060e:	f001 fb03 	bl	8001c18 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b01      	cmp	r3, #1
 8000616:	d114      	bne.n	8000642 <main+0x13a>
 8000618:	4b4c      	ldr	r3, [pc, #304]	@ (800074c <main+0x244>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d110      	bne.n	8000642 <main+0x13a>
			  {
				  slot_mem[index] = slot;
 8000620:	4b4b      	ldr	r3, [pc, #300]	@ (8000750 <main+0x248>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b4b      	ldr	r3, [pc, #300]	@ (8000754 <main+0x24c>)
 8000628:	7819      	ldrb	r1, [r3, #0]
 800062a:	4b4b      	ldr	r3, [pc, #300]	@ (8000758 <main+0x250>)
 800062c:	5499      	strb	r1, [r3, r2]
				  stop = 0;
 800062e:	4b47      	ldr	r3, [pc, #284]	@ (800074c <main+0x244>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
				  index++;
 8000634:	4b46      	ldr	r3, [pc, #280]	@ (8000750 <main+0x248>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b44      	ldr	r3, [pc, #272]	@ (8000750 <main+0x248>)
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	e008      	b.n	8000654 <main+0x14c>
			  }
			  else
			  {
				  slot = i;
 8000642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b43      	ldr	r3, [pc, #268]	@ (8000754 <main+0x24c>)
 8000648:	701a      	strb	r2, [r3, #0]
				  HAL_Delay(Diff);
 800064a:	4b3e      	ldr	r3, [pc, #248]	@ (8000744 <main+0x23c>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4618      	mov	r0, r3
 8000650:	f000 fcee 	bl	8001030 <HAL_Delay>
		  for (int i = 1; i < 10; i++)
 8000654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000656:	3301      	adds	r3, #1
 8000658:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800065a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800065c:	2b09      	cmp	r3, #9
 800065e:	ddc3      	ble.n	80005e8 <main+0xe0>
			  }
		  }
	  }

	  if (index == 3)
 8000660:	4b3b      	ldr	r3, [pc, #236]	@ (8000750 <main+0x248>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b03      	cmp	r3, #3
 8000666:	d12b      	bne.n	80006c0 <main+0x1b8>
	  {
		  if (hi2c1.State == HAL_I2C_STATE_READY)
 8000668:	4b3c      	ldr	r3, [pc, #240]	@ (800075c <main+0x254>)
 800066a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b20      	cmp	r3, #32
 8000672:	d109      	bne.n	8000688 <main+0x180>
		  {
			  HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT, slot_mem, 3);
 8000674:	2303      	movs	r3, #3
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	4b37      	ldr	r3, [pc, #220]	@ (8000758 <main+0x250>)
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2302      	movs	r3, #2
 800067e:	222c      	movs	r2, #44	@ 0x2c
 8000680:	21a0      	movs	r1, #160	@ 0xa0
 8000682:	4836      	ldr	r0, [pc, #216]	@ (800075c <main+0x254>)
 8000684:	f001 fbb6 	bl	8001df4 <HAL_I2C_Mem_Write_IT>
		  }

		  HAL_Delay(50);
 8000688:	2032      	movs	r0, #50	@ 0x32
 800068a:	f000 fcd1 	bl	8001030 <HAL_Delay>

		  if (hi2c1.State == HAL_I2C_STATE_READY)
 800068e:	4b33      	ldr	r3, [pc, #204]	@ (800075c <main+0x254>)
 8000690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000694:	b2db      	uxtb	r3, r3
 8000696:	2b20      	cmp	r3, #32
 8000698:	d109      	bne.n	80006ae <main+0x1a6>
		  {
			  HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT, memRead, 3);
 800069a:	2303      	movs	r3, #3
 800069c:	9301      	str	r3, [sp, #4]
 800069e:	4b30      	ldr	r3, [pc, #192]	@ (8000760 <main+0x258>)
 80006a0:	9300      	str	r3, [sp, #0]
 80006a2:	2302      	movs	r3, #2
 80006a4:	222c      	movs	r2, #44	@ 0x2c
 80006a6:	21a0      	movs	r1, #160	@ 0xa0
 80006a8:	482c      	ldr	r0, [pc, #176]	@ (800075c <main+0x254>)
 80006aa:	f001 fc2d 	bl	8001f08 <HAL_I2C_Mem_Read_IT>
	  	  }

	  	  index = 0;
 80006ae:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <main+0x248>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	  	  Check = 1;
 80006b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000764 <main+0x25c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
	  	  State = 3;
 80006ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000734 <main+0x22c>)
 80006bc:	2203      	movs	r2, #3
 80006be:	701a      	strb	r2, [r3, #0]
  	  }

	  if (Check == 1)
 80006c0:	4b28      	ldr	r3, [pc, #160]	@ (8000764 <main+0x25c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	f47f af2e 	bne.w	8000526 <main+0x1e>
	  {
		  Check1 = memRead[0];
 80006ca:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <main+0x258>)
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	4b26      	ldr	r3, [pc, #152]	@ (8000768 <main+0x260>)
 80006d0:	701a      	strb	r2, [r3, #0]
		  Check2 = memRead[1];
 80006d2:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <main+0x258>)
 80006d4:	785a      	ldrb	r2, [r3, #1]
 80006d6:	4b25      	ldr	r3, [pc, #148]	@ (800076c <main+0x264>)
 80006d8:	701a      	strb	r2, [r3, #0]
		  Check3 = memRead[2];
 80006da:	4b21      	ldr	r3, [pc, #132]	@ (8000760 <main+0x258>)
 80006dc:	789a      	ldrb	r2, [r3, #2]
 80006de:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <main+0x268>)
 80006e0:	701a      	strb	r2, [r3, #0]

		  if (Check1 == Check2 && Check1 == Check3)
 80006e2:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <main+0x260>)
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	4b21      	ldr	r3, [pc, #132]	@ (800076c <main+0x264>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d113      	bne.n	8000716 <main+0x20e>
 80006ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <main+0x260>)
 80006f0:	781a      	ldrb	r2, [r3, #0]
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0x268>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d10d      	bne.n	8000716 <main+0x20e>
		  {
			  uint8_t text[] = "You're Winner!!";
 80006fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <main+0x26c>)
 80006fc:	f107 040c 	add.w	r4, r7, #12
 8000700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000702:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  HAL_UART_Transmit_DMA(&hlpuart1, text, sizeof(text));
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2210      	movs	r2, #16
 800070c:	4619      	mov	r1, r3
 800070e:	480b      	ldr	r0, [pc, #44]	@ (800073c <main+0x234>)
 8000710:	f004 fade 	bl	8004cd0 <HAL_UART_Transmit_DMA>
		  {
 8000714:	e00a      	b.n	800072c <main+0x224>
		  }
		  else
		  {
			  uint8_t text[] = "Try Again!!";
 8000716:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <main+0x270>)
 8000718:	463b      	mov	r3, r7
 800071a:	ca07      	ldmia	r2, {r0, r1, r2}
 800071c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			  HAL_UART_Transmit_DMA(&hlpuart1, text, sizeof(text));
 8000720:	463b      	mov	r3, r7
 8000722:	220c      	movs	r2, #12
 8000724:	4619      	mov	r1, r3
 8000726:	4805      	ldr	r0, [pc, #20]	@ (800073c <main+0x234>)
 8000728:	f004 fad2 	bl	8004cd0 <HAL_UART_Transmit_DMA>
		  }
		  Check = 0;
 800072c:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <main+0x25c>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	  if (State == 0)
 8000732:	e6f8      	b.n	8000526 <main+0x1e>
 8000734:	20000294 	.word	0x20000294
 8000738:	08006390 	.word	0x08006390
 800073c:	2000013c 	.word	0x2000013c
 8000740:	20000290 	.word	0x20000290
 8000744:	20000295 	.word	0x20000295
 8000748:	48000800 	.word	0x48000800
 800074c:	20000296 	.word	0x20000296
 8000750:	20000297 	.word	0x20000297
 8000754:	2000029f 	.word	0x2000029f
 8000758:	200002a0 	.word	0x200002a0
 800075c:	20000028 	.word	0x20000028
 8000760:	2000029c 	.word	0x2000029c
 8000764:	20000298 	.word	0x20000298
 8000768:	20000299 	.word	0x20000299
 800076c:	2000029a 	.word	0x2000029a
 8000770:	2000029b 	.word	0x2000029b
 8000774:	080063ac 	.word	0x080063ac
 8000778:	080063bc 	.word	0x080063bc

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0318 	add.w	r3, r7, #24
 8000786:	2238      	movs	r2, #56	@ 0x38
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f005 fdc8 	bl	8006320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800079e:	2000      	movs	r0, #0
 80007a0:	f003 f8c0 	bl	8003924 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a4:	2302      	movs	r3, #2
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	2340      	movs	r3, #64	@ 0x40
 80007b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007be:	2355      	movs	r3, #85	@ 0x55
 80007c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c2:	2302      	movs	r3, #2
 80007c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0318 	add.w	r3, r7, #24
 80007d2:	4618      	mov	r0, r3
 80007d4:	f003 f95a 	bl	8003a8c <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80007de:	f000 f953 	bl	8000a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2303      	movs	r3, #3
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2104      	movs	r1, #4
 80007fa:	4618      	mov	r0, r3
 80007fc:	f003 fc58 	bl	80040b0 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000806:	f000 f93f 	bl	8000a88 <Error_Handler>
  }
}
 800080a:	bf00      	nop
 800080c:	3750      	adds	r7, #80	@ 0x50
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <MX_I2C1_Init+0x74>)
 800081a:	4a1c      	ldr	r2, [pc, #112]	@ (800088c <MX_I2C1_Init+0x78>)
 800081c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000820:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <MX_I2C1_Init+0x7c>)
 8000822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000824:	4b18      	ldr	r3, [pc, #96]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_I2C1_Init+0x74>)
 800082c:	2201      	movs	r2, #1
 800082e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000830:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000836:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000848:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_I2C1_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800084e:	480e      	ldr	r0, [pc, #56]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000850:	f001 fa35 	bl	8001cbe <HAL_I2C_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800085a:	f000 f915 	bl	8000a88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4809      	ldr	r0, [pc, #36]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000862:	f002 ffc7 	bl	80037f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800086c:	f000 f90c 	bl	8000a88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_I2C1_Init+0x74>)
 8000874:	f003 f809 	bl	800388a <HAL_I2CEx_ConfigDigitalFilter>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 f903 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	20000028 	.word	0x20000028
 800088c:	40005400 	.word	0x40005400
 8000890:	30a0a7fb 	.word	0x30a0a7fb

08000894 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000898:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 800089a:	4a22      	ldr	r2, [pc, #136]	@ (8000924 <MX_LPUART1_UART_Init+0x90>)
 800089c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 800089e:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008a0:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80008a4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b18      	ldr	r3, [pc, #96]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008d6:	4812      	ldr	r0, [pc, #72]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008d8:	f004 f854 	bl	8004984 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f8d1 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	480d      	ldr	r0, [pc, #52]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008ea:	f005 fc4e 	bl	800618a <HAL_UARTEx_SetTxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008f4:	f000 f8c8 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	4809      	ldr	r0, [pc, #36]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 80008fc:	f005 fc83 	bl	8006206 <HAL_UARTEx_SetRxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000906:	f000 f8bf 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_LPUART1_UART_Init+0x8c>)
 800090c:	f005 fc04 	bl	8006118 <HAL_UARTEx_DisableFifoMode>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000916:	f000 f8b7 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000013c 	.word	0x2000013c
 8000924:	40008000 	.word	0x40008000

08000928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <MX_DMA_Init+0x80>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000932:	4a1d      	ldr	r2, [pc, #116]	@ (80009a8 <MX_DMA_Init+0x80>)
 8000934:	f043 0304 	orr.w	r3, r3, #4
 8000938:	6493      	str	r3, [r2, #72]	@ 0x48
 800093a:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <MX_DMA_Init+0x80>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093e:	f003 0304 	and.w	r3, r3, #4
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <MX_DMA_Init+0x80>)
 8000948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800094a:	4a17      	ldr	r2, [pc, #92]	@ (80009a8 <MX_DMA_Init+0x80>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6493      	str	r3, [r2, #72]	@ 0x48
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <MX_DMA_Init+0x80>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	200b      	movs	r0, #11
 8000964:	f000 fc61 	bl	800122a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000968:	200b      	movs	r0, #11
 800096a:	f000 fc78 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	200c      	movs	r0, #12
 8000974:	f000 fc59 	bl	800122a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000978:	200c      	movs	r0, #12
 800097a:	f000 fc70 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	200d      	movs	r0, #13
 8000984:	f000 fc51 	bl	800122a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000988:	200d      	movs	r0, #13
 800098a:	f000 fc68 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	200e      	movs	r0, #14
 8000994:	f000 fc49 	bl	800122a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000998:	200e      	movs	r0, #14
 800099a:	f000 fc60 	bl	800125e <HAL_NVIC_EnableIRQ>

}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	@ 0x28
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b2f      	ldr	r3, [pc, #188]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a2e      	ldr	r2, [pc, #184]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009da:	4b29      	ldr	r3, [pc, #164]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a28      	ldr	r2, [pc, #160]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 80009e0:	f043 0320 	orr.w	r3, r3, #32
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b26      	ldr	r3, [pc, #152]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0320 	and.w	r3, r3, #32
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b23      	ldr	r3, [pc, #140]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a22      	ldr	r2, [pc, #136]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_GPIO_Init+0xd4>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2a:	f001 f90d 	bl	8001c48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	480f      	ldr	r0, [pc, #60]	@ (8000a84 <MX_GPIO_Init+0xd8>)
 8000a46:	f000 ff65 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4a:	2320      	movs	r3, #32
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a64:	f000 ff56 	bl	8001914 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2028      	movs	r0, #40	@ 0x28
 8000a6e:	f000 fbdc 	bl	800122a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a72:	2028      	movs	r0, #40	@ 0x28
 8000a74:	f000 fbf3 	bl	800125e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a78:	bf00      	nop
 8000a7a:	3728      	adds	r7, #40	@ 0x28
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000800 	.word	0x48000800

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <Error_Handler+0x8>

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ab6:	4a08      	ldr	r2, [pc, #32]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000aca:	f002 ffcf 	bl	8003a6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b09e      	sub	sp, #120	@ 0x78
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	2254      	movs	r2, #84	@ 0x54
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 fc0f 	bl	8006320 <memset>
  if(hi2c->Instance==I2C1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a50      	ldr	r2, [pc, #320]	@ (8000c48 <HAL_I2C_MspInit+0x16c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	f040 8099 	bne.w	8000c40 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b0e:	2340      	movs	r3, #64	@ 0x40
 8000b10:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b16:	f107 0310 	add.w	r3, r7, #16
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 fce4 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b26:	f7ff ffaf 	bl	8000a88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b48      	ldr	r3, [pc, #288]	@ (8000c4c <HAL_I2C_MspInit+0x170>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a47      	ldr	r2, [pc, #284]	@ (8000c4c <HAL_I2C_MspInit+0x170>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b45      	ldr	r3, [pc, #276]	@ (8000c4c <HAL_I2C_MspInit+0x170>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b46:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b48:	2312      	movs	r3, #18
 8000b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b54:	2304      	movs	r3, #4
 8000b56:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	483c      	ldr	r0, [pc, #240]	@ (8000c50 <HAL_I2C_MspInit+0x174>)
 8000b60:	f000 fed8 	bl	8001914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b64:	4b39      	ldr	r3, [pc, #228]	@ (8000c4c <HAL_I2C_MspInit+0x170>)
 8000b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b68:	4a38      	ldr	r2, [pc, #224]	@ (8000c4c <HAL_I2C_MspInit+0x170>)
 8000b6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b70:	4b36      	ldr	r3, [pc, #216]	@ (8000c4c <HAL_I2C_MspInit+0x170>)
 8000b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000b7c:	4b35      	ldr	r3, [pc, #212]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000b7e:	4a36      	ldr	r2, [pc, #216]	@ (8000c58 <HAL_I2C_MspInit+0x17c>)
 8000b80:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000b82:	4b34      	ldr	r3, [pc, #208]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000b84:	2210      	movs	r2, #16
 8000b86:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b88:	4b32      	ldr	r3, [pc, #200]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8e:	4b31      	ldr	r3, [pc, #196]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b94:	4b2f      	ldr	r3, [pc, #188]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bac:	4b29      	ldr	r3, [pc, #164]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000bb2:	4828      	ldr	r0, [pc, #160]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000bb4:	f000 fb6e 	bl	8001294 <HAL_DMA_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000bbe:	f7ff ff63 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000bc6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bc8:	4a22      	ldr	r2, [pc, #136]	@ (8000c54 <HAL_I2C_MspInit+0x178>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000bce:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000bd0:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <HAL_I2C_MspInit+0x184>)
 8000bd2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000bd6:	2211      	movs	r2, #17
 8000bd8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bda:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000bdc:	2210      	movs	r2, #16
 8000bde:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000be8:	2280      	movs	r2, #128	@ 0x80
 8000bea:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000bf8:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c04:	4815      	ldr	r0, [pc, #84]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000c06:	f000 fb45 	bl	8001294 <HAL_DMA_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000c10:	f7ff ff3a 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a11      	ldr	r2, [pc, #68]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000c18:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c1a:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <HAL_I2C_MspInit+0x180>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	201f      	movs	r0, #31
 8000c26:	f000 fb00 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000c2a:	201f      	movs	r0, #31
 8000c2c:	f000 fb17 	bl	800125e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000c30:	2200      	movs	r2, #0
 8000c32:	2100      	movs	r1, #0
 8000c34:	2020      	movs	r0, #32
 8000c36:	f000 faf8 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000c3a:	2020      	movs	r0, #32
 8000c3c:	f000 fb0f 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c40:	bf00      	nop
 8000c42:	3778      	adds	r7, #120	@ 0x78
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40005400 	.word	0x40005400
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	48000400 	.word	0x48000400
 8000c54:	2000007c 	.word	0x2000007c
 8000c58:	40020008 	.word	0x40020008
 8000c5c:	200000dc 	.word	0x200000dc
 8000c60:	4002001c 	.word	0x4002001c

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09e      	sub	sp, #120	@ 0x78
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	2254      	movs	r2, #84	@ 0x54
 8000c82:	2100      	movs	r1, #0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f005 fb4b 	bl	8006320 <memset>
  if(huart->Instance==LPUART1)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a4d      	ldr	r2, [pc, #308]	@ (8000dc4 <HAL_UART_MspInit+0x160>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	f040 8092 	bne.w	8000dba <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c96:	2320      	movs	r3, #32
 8000c98:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 fc20 	bl	80044e8 <HAL_RCCEx_PeriphCLKConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cae:	f7ff feeb 	bl	8000a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000cb2:	4b45      	ldr	r3, [pc, #276]	@ (8000dc8 <HAL_UART_MspInit+0x164>)
 8000cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cb6:	4a44      	ldr	r2, [pc, #272]	@ (8000dc8 <HAL_UART_MspInit+0x164>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000cbe:	4b42      	ldr	r3, [pc, #264]	@ (8000dc8 <HAL_UART_MspInit+0x164>)
 8000cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b3f      	ldr	r3, [pc, #252]	@ (8000dc8 <HAL_UART_MspInit+0x164>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cce:	4a3e      	ldr	r2, [pc, #248]	@ (8000dc8 <HAL_UART_MspInit+0x164>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8000dc8 <HAL_UART_MspInit+0x164>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d00:	f000 fe08 	bl	8001914 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000d04:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d06:	4a32      	ldr	r2, [pc, #200]	@ (8000dd0 <HAL_UART_MspInit+0x16c>)
 8000d08:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000d0a:	4b30      	ldr	r3, [pc, #192]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d0c:	2222      	movs	r2, #34	@ 0x22
 8000d0e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d10:	4b2e      	ldr	r3, [pc, #184]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d16:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d1e:	2280      	movs	r2, #128	@ 0x80
 8000d20:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d28:	4b28      	ldr	r3, [pc, #160]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000d2e:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d30:	2220      	movs	r2, #32
 8000d32:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d34:	4b25      	ldr	r3, [pc, #148]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d3a:	4824      	ldr	r0, [pc, #144]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d3c:	f000 faaa 	bl	8001294 <HAL_DMA_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000d46:	f7ff fe9f 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000d52:	4a1e      	ldr	r2, [pc, #120]	@ (8000dcc <HAL_UART_MspInit+0x168>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8000d58:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000dd8 <HAL_UART_MspInit+0x174>)
 8000d5c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000d60:	2223      	movs	r2, #35	@ 0x23
 8000d62:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d64:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000d66:	2210      	movs	r2, #16
 8000d68:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000d72:	2280      	movs	r2, #128	@ 0x80
 8000d74:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d76:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000d8e:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000d90:	f000 fa80 	bl	8001294 <HAL_DMA_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000d9a:	f7ff fe75 	bl	8000a88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000da2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000da4:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <HAL_UART_MspInit+0x170>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	205b      	movs	r0, #91	@ 0x5b
 8000db0:	f000 fa3b 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000db4:	205b      	movs	r0, #91	@ 0x5b
 8000db6:	f000 fa52 	bl	800125e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3778      	adds	r7, #120	@ 0x78
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40008000 	.word	0x40008000
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	200001d0 	.word	0x200001d0
 8000dd0:	40020030 	.word	0x40020030
 8000dd4:	20000230 	.word	0x20000230
 8000dd8:	40020044 	.word	0x40020044

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <NMI_Handler+0x4>

08000de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <MemManage_Handler+0x4>

08000df4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e32:	f000 f8df 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000e40:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <DMA1_Channel1_IRQHandler+0x10>)
 8000e42:	f000 fc0a 	bl	800165a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000007c 	.word	0x2000007c

08000e50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <DMA1_Channel2_IRQHandler+0x10>)
 8000e56:	f000 fc00 	bl	800165a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000dc 	.word	0x200000dc

08000e64 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <DMA1_Channel3_IRQHandler+0x10>)
 8000e6a:	f000 fbf6 	bl	800165a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	200001d0 	.word	0x200001d0

08000e78 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <DMA1_Channel4_IRQHandler+0x10>)
 8000e7e:	f000 fbec 	bl	800165a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000230 	.word	0x20000230

08000e8c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <I2C1_EV_IRQHandler+0x10>)
 8000e92:	f001 f8bf 	bl	8002014 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000028 	.word	0x20000028

08000ea0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <I2C1_ER_IRQHandler+0x10>)
 8000ea6:	f001 f8cf 	bl	8002048 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000028 	.word	0x20000028

08000eb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000eb8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ebc:	f000 fedc 	bl	8001c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000ec8:	4802      	ldr	r0, [pc, #8]	@ (8000ed4 <LPUART1_IRQHandler+0x10>)
 8000eca:	f003 ff81 	bl	8004dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000013c 	.word	0x2000013c

08000ed8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000efc:	480d      	ldr	r0, [pc, #52]	@ (8000f34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000efe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f00:	f7ff ffea 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	@ (8000f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f48 <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f005 fa01 	bl	8006330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f2e:	f7ff faeb 	bl	8000508 <main>

08000f32 <LoopForever>:

LoopForever:
    b LoopForever
 8000f32:	e7fe      	b.n	8000f32 <LoopForever>
  ldr   r0, =_estack
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f40:	08006418 	.word	0x08006418
  ldr r2, =_sbss
 8000f44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f48:	200002a8 	.word	0x200002a8

08000f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_2_IRQHandler>

08000f4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f95b 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f000 f80e 	bl	8000f80 <HAL_InitTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	e001      	b.n	8000f74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f70:	f7ff fd90 	bl	8000a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f74:	79fb      	ldrb	r3, [r7, #7]

}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <HAL_InitTick+0x68>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d022      	beq.n	8000fda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f94:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_InitTick+0x6c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <HAL_InitTick+0x68>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fa0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 f966 	bl	800127a <HAL_SYSTICK_Config>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10f      	bne.n	8000fd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2b0f      	cmp	r3, #15
 8000fb8:	d809      	bhi.n	8000fce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc2:	f000 f932 	bl	800122a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_InitTick+0x70>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e007      	b.n	8000fde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e004      	b.n	8000fde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e001      	b.n	8000fde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_IncTick+0x1c>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <HAL_IncTick+0x20>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4413      	add	r3, r2
 8001002:	4a03      	ldr	r2, [pc, #12]	@ (8001010 <HAL_IncTick+0x1c>)
 8001004:	6013      	str	r3, [r2, #0]
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	200002a4 	.word	0x200002a4
 8001014:	20000008 	.word	0x20000008

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200002a4 	.word	0x200002a4

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001048:	d004      	beq.n	8001054 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <HAL_Delay+0x40>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001054:	bf00      	nop
 8001056:	f7ff ffdf 	bl	8001018 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	429a      	cmp	r2, r3
 8001064:	d8f7      	bhi.n	8001056 <HAL_Delay+0x26>
  {
  }
}
 8001066:	bf00      	nop
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000008 	.word	0x20000008

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800109c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	@ (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	2b00      	cmp	r3, #0
 8001126:	db0a      	blt.n	800113e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	490c      	ldr	r1, [pc, #48]	@ (8001160 <__NVIC_SetPriority+0x4c>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	0112      	lsls	r2, r2, #4
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	440b      	add	r3, r1
 8001138:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800113c:	e00a      	b.n	8001154 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4908      	ldr	r1, [pc, #32]	@ (8001164 <__NVIC_SetPriority+0x50>)
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	3b04      	subs	r3, #4
 800114c:	0112      	lsls	r2, r2, #4
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	440b      	add	r3, r1
 8001152:	761a      	strb	r2, [r3, #24]
}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000e100 	.word	0xe000e100
 8001164:	e000ed00 	.word	0xe000ed00

08001168 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001168:	b480      	push	{r7}
 800116a:	b089      	sub	sp, #36	@ 0x24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f1c3 0307 	rsb	r3, r3, #7
 8001182:	2b04      	cmp	r3, #4
 8001184:	bf28      	it	cs
 8001186:	2304      	movcs	r3, #4
 8001188:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3304      	adds	r3, #4
 800118e:	2b06      	cmp	r3, #6
 8001190:	d902      	bls.n	8001198 <NVIC_EncodePriority+0x30>
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3b03      	subs	r3, #3
 8001196:	e000      	b.n	800119a <NVIC_EncodePriority+0x32>
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	f04f 32ff 	mov.w	r2, #4294967295
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43da      	mvns	r2, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	401a      	ands	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b0:	f04f 31ff 	mov.w	r1, #4294967295
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	4313      	orrs	r3, r2
         );
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	@ 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff8e 	bl	8001114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff29 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001238:	f7ff ff40 	bl	80010bc <__NVIC_GetPriorityGrouping>
 800123c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68b9      	ldr	r1, [r7, #8]
 8001242:	6978      	ldr	r0, [r7, #20]
 8001244:	f7ff ff90 	bl	8001168 <NVIC_EncodePriority>
 8001248:	4602      	mov	r2, r0
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	4611      	mov	r1, r2
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff5f 	bl	8001114 <__NVIC_SetPriority>
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	4603      	mov	r3, r0
 8001266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff33 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffa4 	bl	80011d0 <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e08d      	b.n	80013c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b47      	ldr	r3, [pc, #284]	@ (80013cc <HAL_DMA_Init+0x138>)
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d80f      	bhi.n	80012d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	4b45      	ldr	r3, [pc, #276]	@ (80013d0 <HAL_DMA_Init+0x13c>)
 80012ba:	4413      	add	r3, r2
 80012bc:	4a45      	ldr	r2, [pc, #276]	@ (80013d4 <HAL_DMA_Init+0x140>)
 80012be:	fba2 2303 	umull	r2, r3, r2, r3
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	009a      	lsls	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a42      	ldr	r2, [pc, #264]	@ (80013d8 <HAL_DMA_Init+0x144>)
 80012ce:	641a      	str	r2, [r3, #64]	@ 0x40
 80012d0:	e00e      	b.n	80012f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b40      	ldr	r3, [pc, #256]	@ (80013dc <HAL_DMA_Init+0x148>)
 80012da:	4413      	add	r3, r2
 80012dc:	4a3d      	ldr	r2, [pc, #244]	@ (80013d4 <HAL_DMA_Init+0x140>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	091b      	lsrs	r3, r3, #4
 80012e4:	009a      	lsls	r2, r3, #2
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a3c      	ldr	r2, [pc, #240]	@ (80013e0 <HAL_DMA_Init+0x14c>)
 80012ee:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2202      	movs	r2, #2
 80012f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001306:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800130a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001314:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	699b      	ldr	r3, [r3, #24]
 8001326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800132c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 fa84 	bl	8001850 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001350:	d102      	bne.n	8001358 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800136c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d010      	beq.n	8001398 <HAL_DMA_Init+0x104>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b04      	cmp	r3, #4
 800137c:	d80c      	bhi.n	8001398 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 faa4 	bl	80018cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	e008      	b.n	80013aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40020407 	.word	0x40020407
 80013d0:	bffdfff8 	.word	0xbffdfff8
 80013d4:	cccccccd 	.word	0xcccccccd
 80013d8:	40020000 	.word	0x40020000
 80013dc:	bffdfbf8 	.word	0xbffdfbf8
 80013e0:	40020400 	.word	0x40020400

080013e4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_DMA_Start_IT+0x20>
 8001400:	2302      	movs	r3, #2
 8001402:	e066      	b.n	80014d2 <HAL_DMA_Start_IT+0xee>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d155      	bne.n	80014c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 0201 	bic.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	68b9      	ldr	r1, [r7, #8]
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 f9c9 	bl	80017d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	2b00      	cmp	r3, #0
 8001448:	d008      	beq.n	800145c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f042 020e 	orr.w	r2, r2, #14
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	e00f      	b.n	800147c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0204 	bic.w	r2, r2, #4
 800146a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f042 020a 	orr.w	r2, r2, #10
 800147a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001494:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001498:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014b0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 0201 	orr.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e005      	b.n	80014d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80014cc:	2302      	movs	r3, #2
 80014ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d005      	beq.n	80014fe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2204      	movs	r2, #4
 80014f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	73fb      	strb	r3, [r7, #15]
 80014fc:	e037      	b.n	800156e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 020e 	bic.w	r2, r2, #14
 800150c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001518:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800151c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0201 	bic.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	f003 021f 	and.w	r2, r3, #31
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800154a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00c      	beq.n	800156e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001562:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800156c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800157e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d00d      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2204      	movs	r2, #4
 80015a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
 80015be:	e047      	b.n	8001650 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 020e 	bic.w	r2, r2, #14
 80015ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fc:	2101      	movs	r1, #1
 80015fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001602:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800160c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00c      	beq.n	8001630 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001620:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001624:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800162e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4798      	blx	r3
    }
  }
  return status;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	2204      	movs	r2, #4
 800167c:	409a      	lsls	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d026      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x7a>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d021      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0320 	and.w	r3, r3, #32
 800169a:	2b00      	cmp	r3, #0
 800169c:	d107      	bne.n	80016ae <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0204 	bic.w	r2, r2, #4
 80016ac:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b2:	f003 021f 	and.w	r2, r3, #31
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ba:	2104      	movs	r1, #4
 80016bc:	fa01 f202 	lsl.w	r2, r1, r2
 80016c0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d071      	beq.n	80017ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80016d2:	e06c      	b.n	80017ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	2202      	movs	r2, #2
 80016de:	409a      	lsls	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4013      	ands	r3, r2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d02e      	beq.n	8001746 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d029      	beq.n	8001746 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10b      	bne.n	8001718 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 020a 	bic.w	r2, r2, #10
 800170e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	2102      	movs	r1, #2
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001738:	2b00      	cmp	r3, #0
 800173a:	d038      	beq.n	80017ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001744:	e033      	b.n	80017ae <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2208      	movs	r2, #8
 8001750:	409a      	lsls	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4013      	ands	r3, r2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d02a      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d025      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 020e 	bic.w	r2, r2, #14
 8001772:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f202 	lsl.w	r2, r1, r2
 8001786:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d004      	beq.n	80017b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
}
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017c6:	b2db      	uxtb	r3, r3
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80017ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d004      	beq.n	80017fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80017fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f003 021f 	and.w	r2, r3, #31
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	2101      	movs	r1, #1
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b10      	cmp	r3, #16
 8001820:	d108      	bne.n	8001834 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001832:	e007      	b.n	8001844 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	60da      	str	r2, [r3, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001860:	429a      	cmp	r2, r3
 8001862:	d802      	bhi.n	800186a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001864:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	e001      	b.n	800186e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800186c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	3b08      	subs	r3, #8
 800187a:	4a12      	ldr	r2, [pc, #72]	@ (80018c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	009a      	lsls	r2, r3, #2
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	4413      	add	r3, r2
 8001890:	461a      	mov	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a0b      	ldr	r2, [pc, #44]	@ (80018c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800189a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2201      	movs	r2, #1
 80018a4:	409a      	lsls	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80018aa:	bf00      	nop
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40020407 	.word	0x40020407
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40020820 	.word	0x40020820
 80018c4:	cccccccd 	.word	0xcccccccd
 80018c8:	40020880 	.word	0x40020880

080018cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	461a      	mov	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80018ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	2201      	movs	r2, #1
 80018fa:	409a      	lsls	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001900:	bf00      	nop
 8001902:	3714      	adds	r7, #20
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	1000823f 	.word	0x1000823f
 8001910:	40020940 	.word	0x40020940

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001922:	e15a      	b.n	8001bda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 814c 	beq.w	8001bd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d005      	beq.n	8001954 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001950:	2b02      	cmp	r3, #2
 8001952:	d130      	bne.n	80019b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800198a:	2201      	movs	r2, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 0201 	and.w	r2, r3, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d017      	beq.n	80019f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d123      	bne.n	8001a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	08da      	lsrs	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3208      	adds	r2, #8
 8001a40:	6939      	ldr	r1, [r7, #16]
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0203 	and.w	r2, r3, #3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80a6 	beq.w	8001bd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a88:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf8 <HAL_GPIO_Init+0x2e4>)
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8c:	4a5a      	ldr	r2, [pc, #360]	@ (8001bf8 <HAL_GPIO_Init+0x2e4>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a94:	4b58      	ldr	r3, [pc, #352]	@ (8001bf8 <HAL_GPIO_Init+0x2e4>)
 8001a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa0:	4a56      	ldr	r2, [pc, #344]	@ (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001aca:	d01f      	beq.n	8001b0c <HAL_GPIO_Init+0x1f8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a4c      	ldr	r2, [pc, #304]	@ (8001c00 <HAL_GPIO_Init+0x2ec>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d019      	beq.n	8001b08 <HAL_GPIO_Init+0x1f4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a4b      	ldr	r2, [pc, #300]	@ (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d013      	beq.n	8001b04 <HAL_GPIO_Init+0x1f0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a4a      	ldr	r2, [pc, #296]	@ (8001c08 <HAL_GPIO_Init+0x2f4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00d      	beq.n	8001b00 <HAL_GPIO_Init+0x1ec>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a49      	ldr	r2, [pc, #292]	@ (8001c0c <HAL_GPIO_Init+0x2f8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d007      	beq.n	8001afc <HAL_GPIO_Init+0x1e8>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a48      	ldr	r2, [pc, #288]	@ (8001c10 <HAL_GPIO_Init+0x2fc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d101      	bne.n	8001af8 <HAL_GPIO_Init+0x1e4>
 8001af4:	2305      	movs	r3, #5
 8001af6:	e00a      	b.n	8001b0e <HAL_GPIO_Init+0x1fa>
 8001af8:	2306      	movs	r3, #6
 8001afa:	e008      	b.n	8001b0e <HAL_GPIO_Init+0x1fa>
 8001afc:	2304      	movs	r3, #4
 8001afe:	e006      	b.n	8001b0e <HAL_GPIO_Init+0x1fa>
 8001b00:	2303      	movs	r3, #3
 8001b02:	e004      	b.n	8001b0e <HAL_GPIO_Init+0x1fa>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e002      	b.n	8001b0e <HAL_GPIO_Init+0x1fa>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e000      	b.n	8001b0e <HAL_GPIO_Init+0x1fa>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	f002 0203 	and.w	r2, r2, #3
 8001b14:	0092      	lsls	r2, r2, #2
 8001b16:	4093      	lsls	r3, r2
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b1e:	4937      	ldr	r1, [pc, #220]	@ (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	089b      	lsrs	r3, r3, #2
 8001b24:	3302      	adds	r3, #2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b2c:	4b39      	ldr	r3, [pc, #228]	@ (8001c14 <HAL_GPIO_Init+0x300>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b50:	4a30      	ldr	r2, [pc, #192]	@ (8001c14 <HAL_GPIO_Init+0x300>)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b56:	4b2f      	ldr	r3, [pc, #188]	@ (8001c14 <HAL_GPIO_Init+0x300>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b7a:	4a26      	ldr	r2, [pc, #152]	@ (8001c14 <HAL_GPIO_Init+0x300>)
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b80:	4b24      	ldr	r3, [pc, #144]	@ (8001c14 <HAL_GPIO_Init+0x300>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c14 <HAL_GPIO_Init+0x300>)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_GPIO_Init+0x300>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bce:	4a11      	ldr	r2, [pc, #68]	@ (8001c14 <HAL_GPIO_Init+0x300>)
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f47f ae9d 	bne.w	8001924 <HAL_GPIO_Init+0x10>
  }
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	371c      	adds	r7, #28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	48000400 	.word	0x48000400
 8001c04:	48000800 	.word	0x48000800
 8001c08:	48000c00 	.word	0x48000c00
 8001c0c:	48001000 	.word	0x48001000
 8001c10:	48001400 	.word	0x48001400
 8001c14:	40010400 	.word	0x40010400

08001c18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	460b      	mov	r3, r1
 8001c22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c30:	2301      	movs	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	e001      	b.n	8001c3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
 8001c54:	4613      	mov	r3, r2
 8001c56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c58:	787b      	ldrb	r3, [r7, #1]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c64:	e002      	b.n	8001c6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c66:	887a      	ldrh	r2, [r7, #2]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f806 	bl	8001ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40010400 	.word	0x40010400

08001ca8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e08d      	b.n	8001dec <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d106      	bne.n	8001cea <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7fe fef9 	bl	8000adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2224      	movs	r2, #36	@ 0x24
 8001cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0201 	bic.w	r2, r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	e006      	b.n	8001d46 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d44:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d108      	bne.n	8001d60 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	e007      	b.n	8001d70 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d6e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d82:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d92:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	430a      	orrs	r2, r1
 8001dac:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69d9      	ldr	r1, [r3, #28]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1a      	ldr	r2, [r3, #32]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0201 	orr.w	r2, r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	817b      	strh	r3, [r7, #10]
 8001e06:	460b      	mov	r3, r1
 8001e08:	813b      	strh	r3, [r7, #8]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d16a      	bne.n	8001ef0 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_I2C_Mem_Write_IT+0x32>
 8001e20:	8bbb      	ldrh	r3, [r7, #28]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d105      	bne.n	8001e32 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e2c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e05f      	b.n	8001ef2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e40:	d101      	bne.n	8001e46 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001e42:	2302      	movs	r3, #2
 8001e44:	e055      	b.n	8001ef2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_I2C_Mem_Write_IT+0x60>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e04e      	b.n	8001ef2 <HAL_I2C_Mem_Write_IT+0xfe>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2221      	movs	r2, #33	@ 0x21
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2240      	movs	r2, #64	@ 0x40
 8001e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8bba      	ldrh	r2, [r7, #28]
 8001e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4a1d      	ldr	r2, [pc, #116]	@ (8001efc <HAL_I2C_Mem_Write_IT+0x108>)
 8001e88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f00 <HAL_I2C_Mem_Write_IT+0x10c>)
 8001e8e:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001e90:	897a      	ldrh	r2, [r7, #10]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d109      	bne.n	8001eb0 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e9c:	893b      	ldrh	r3, [r7, #8]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	651a      	str	r2, [r3, #80]	@ 0x50
 8001eae:	e00b      	b.n	8001ec8 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eb0:	893b      	ldrh	r3, [r7, #8]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001ebe:	893b      	ldrh	r3, [r7, #8]
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	8979      	ldrh	r1, [r7, #10]
 8001ece:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <HAL_I2C_Mem_Write_IT+0x110>)
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f001 fb78 	bl	80035cc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f001 fba2 	bl	8003630 <I2C_Enable_IRQ>

    return HAL_OK;
 8001eec:	2300      	movs	r3, #0
 8001eee:	e000      	b.n	8001ef2 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001ef0:	2302      	movs	r3, #2
  }
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	ffff0000 	.word	0xffff0000
 8001f00:	080021d1 	.word	0x080021d1
 8001f04:	80002000 	.word	0x80002000

08001f08 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	4608      	mov	r0, r1
 8001f12:	4611      	mov	r1, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	4603      	mov	r3, r0
 8001f18:	817b      	strh	r3, [r7, #10]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	813b      	strh	r3, [r7, #8]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b20      	cmp	r3, #32
 8001f2c:	d166      	bne.n	8001ffc <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d002      	beq.n	8001f3a <HAL_I2C_Mem_Read_IT+0x32>
 8001f34:	8bbb      	ldrh	r3, [r7, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d105      	bne.n	8001f46 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f40:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e05b      	b.n	8001ffe <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f54:	d101      	bne.n	8001f5a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8001f56:	2302      	movs	r3, #2
 8001f58:	e051      	b.n	8001ffe <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_I2C_Mem_Read_IT+0x60>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e04a      	b.n	8001ffe <HAL_I2C_Mem_Read_IT+0xf6>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2222      	movs	r2, #34	@ 0x22
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2240      	movs	r2, #64	@ 0x40
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8bba      	ldrh	r2, [r7, #28]
 8001f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a1c      	ldr	r2, [pc, #112]	@ (8002008 <HAL_I2C_Mem_Read_IT+0x100>)
 8001f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	4a1c      	ldr	r2, [pc, #112]	@ (800200c <HAL_I2C_Mem_Read_IT+0x104>)
 8001f9c:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001f9e:	897a      	ldrh	r2, [r7, #10]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d109      	bne.n	8001fbe <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fba:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fbc:	e00b      	b.n	8001fd6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fbe:	893b      	ldrh	r3, [r7, #8]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001fcc:	893b      	ldrh	r3, [r7, #8]
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	8979      	ldrh	r1, [r7, #10]
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002010 <HAL_I2C_Mem_Read_IT+0x108>)
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f001 faf2 	bl	80035cc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f001 fb1c 	bl	8003630 <I2C_Enable_IRQ>

    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8001ffc:	2302      	movs	r3, #2
  }
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	ffff0000 	.word	0xffff0000
 800200c:	080021d1 	.word	0x080021d1
 8002010:	80002000 	.word	0x80002000

08002014 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	4798      	blx	r3
  }
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00f      	beq.n	800208a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002088:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00f      	beq.n	80020b4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f043 0208 	orr.w	r2, r3, #8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020b2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00f      	beq.n	80020de <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020cc:	f043 0202 	orr.w	r2, r3, #2
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020dc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 030b 	and.w	r3, r3, #11
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80020ee:	68f9      	ldr	r1, [r7, #12]
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f001 f911 	bl	8003318 <I2C_ITError>
  }
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	70fb      	strb	r3, [r7, #3]
 800215a:	4613      	mov	r3, r2
 800215c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr

080021a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b083      	sub	sp, #12
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80021dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002414 <I2C_Mem_ISR_IT+0x244>)
 80021de:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <I2C_Mem_ISR_IT+0x22>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e10c      	b.n	800240c <I2C_Mem_ISR_IT+0x23c>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b00      	cmp	r3, #0
 8002202:	d012      	beq.n	800222a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2210      	movs	r2, #16
 8002214:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f043 0204 	orr.w	r2, r3, #4
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f001 f98f 	bl	8003546 <I2C_Flush_TXDR>
 8002228:	e0dd      	b.n	80023e6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d022      	beq.n	800227a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01d      	beq.n	800227a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f023 0304 	bic.w	r3, r3, #4
 8002244:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002278:	e0b5      	b.n	80023e6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d02c      	beq.n	80022de <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800228a:	2b00      	cmp	r3, #0
 800228c:	d027      	beq.n	80022de <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d118      	bne.n	80022ca <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80022c8:	e08d      	b.n	80023e6 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f04f 32ff 	mov.w	r2, #4294967295
 80022da:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80022dc:	e083      	b.n	80023e6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d03c      	beq.n	8002362 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d037      	beq.n	8002362 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d02c      	beq.n	8002356 <I2C_Mem_ISR_IT+0x186>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	d128      	bne.n	8002356 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2bff      	cmp	r3, #255	@ 0xff
 800230c:	d910      	bls.n	8002330 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	22ff      	movs	r2, #255	@ 0xff
 8002312:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002318:	b299      	uxth	r1, r3
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231e:	b2da      	uxtb	r2, r3
 8002320:	2300      	movs	r3, #0
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f001 f94f 	bl	80035cc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800232e:	e017      	b.n	8002360 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	b299      	uxth	r1, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002344:	b2da      	uxtb	r2, r3
 8002346:	2300      	movs	r3, #0
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f001 f93c 	bl	80035cc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002354:	e004      	b.n	8002360 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002356:	2140      	movs	r1, #64	@ 0x40
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 ffdd 	bl	8003318 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800235e:	e042      	b.n	80023e6 <I2C_Mem_ISR_IT+0x216>
 8002360:	e041      	b.n	80023e6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002368:	2b00      	cmp	r3, #0
 800236a:	d03c      	beq.n	80023e6 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002372:	2b00      	cmp	r3, #0
 8002374:	d037      	beq.n	80023e6 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002376:	2101      	movs	r1, #1
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f001 f9dd 	bl	8003738 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800237e:	2102      	movs	r1, #2
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f001 f955 	bl	8003630 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b22      	cmp	r3, #34	@ 0x22
 8002390:	d101      	bne.n	8002396 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002392:	4b21      	ldr	r3, [pc, #132]	@ (8002418 <I2C_Mem_ISR_IT+0x248>)
 8002394:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239a:	b29b      	uxth	r3, r3
 800239c:	2bff      	cmp	r3, #255	@ 0xff
 800239e:	d910      	bls.n	80023c2 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	22ff      	movs	r2, #255	@ 0xff
 80023a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	b299      	uxth	r1, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f001 f906 	bl	80035cc <I2C_TransferConfig>
 80023c0:	e011      	b.n	80023e6 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d0:	b299      	uxth	r1, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f001 f8f3 	bl	80035cc <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80023fa:	6939      	ldr	r1, [r7, #16]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fd0b 	bl	8002e18 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	80002000 	.word	0x80002000
 8002418:	80002400 	.word	0x80002400

0800241c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <I2C_Slave_ISR_IT+0x24>
 800243c:	2302      	movs	r3, #2
 800243e:	e0e2      	b.n	8002606 <I2C_Slave_ISR_IT+0x1ea>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f003 0320 	and.w	r3, r3, #32
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002458:	2b00      	cmp	r3, #0
 800245a:	d004      	beq.n	8002466 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800245c:	6939      	ldr	r1, [r7, #16]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fda2 	bl	8002fa8 <I2C_ITSlaveCplt>
 8002464:	e0ca      	b.n	80025fc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d04b      	beq.n	8002508 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002476:	2b00      	cmp	r3, #0
 8002478:	d046      	beq.n	8002508 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	d128      	bne.n	80024d6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b28      	cmp	r3, #40	@ 0x28
 800248e:	d108      	bne.n	80024a2 <I2C_Slave_ISR_IT+0x86>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002496:	d104      	bne.n	80024a2 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002498:	6939      	ldr	r1, [r7, #16]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fee8 	bl	8003270 <I2C_ITListenCplt>
 80024a0:	e031      	b.n	8002506 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b29      	cmp	r3, #41	@ 0x29
 80024ac:	d10e      	bne.n	80024cc <I2C_Slave_ISR_IT+0xb0>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024b4:	d00a      	beq.n	80024cc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2210      	movs	r2, #16
 80024bc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f001 f841 	bl	8003546 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fc4b 	bl	8002d60 <I2C_ITSlaveSeqCplt>
 80024ca:	e01c      	b.n	8002506 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2210      	movs	r2, #16
 80024d2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80024d4:	e08f      	b.n	80025f6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2210      	movs	r2, #16
 80024dc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f043 0204 	orr.w	r2, r3, #4
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <I2C_Slave_ISR_IT+0xdc>
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024f6:	d17e      	bne.n	80025f6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fc:	4619      	mov	r1, r3
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 ff0a 	bl	8003318 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002504:	e077      	b.n	80025f6 <I2C_Slave_ISR_IT+0x1da>
 8002506:	e076      	b.n	80025f6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	d02f      	beq.n	8002572 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002518:	2b00      	cmp	r3, #0
 800251a:	d02a      	beq.n	8002572 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d018      	beq.n	8002558 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002542:	3b01      	subs	r3, #1
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d14b      	bne.n	80025fa <I2C_Slave_ISR_IT+0x1de>
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002568:	d047      	beq.n	80025fa <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fbf8 	bl	8002d60 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002570:	e043      	b.n	80025fa <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002586:	6939      	ldr	r1, [r7, #16]
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fb28 	bl	8002bde <I2C_ITAddrCplt>
 800258e:	e035      	b.n	80025fc <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d030      	beq.n	80025fc <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02b      	beq.n	80025fc <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d018      	beq.n	80025e0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	3b01      	subs	r3, #1
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80025de:	e00d      	b.n	80025fc <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025e6:	d002      	beq.n	80025ee <I2C_Slave_ISR_IT+0x1d2>
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d106      	bne.n	80025fc <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fbb6 	bl	8002d60 <I2C_ITSlaveSeqCplt>
 80025f4:	e002      	b.n	80025fc <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80025f6:	bf00      	nop
 80025f8:	e000      	b.n	80025fc <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80025fa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b088      	sub	sp, #32
 8002612:	af02      	add	r7, sp, #8
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <I2C_Master_ISR_DMA+0x1a>
 8002624:	2302      	movs	r3, #2
 8002626:	e0d9      	b.n	80027dc <I2C_Master_ISR_DMA+0x1ce>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d016      	beq.n	8002668 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002640:	2b00      	cmp	r3, #0
 8002642:	d011      	beq.n	8002668 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2210      	movs	r2, #16
 800264a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002658:	2120      	movs	r1, #32
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 ffe8 	bl	8003630 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 ff70 	bl	8003546 <I2C_Flush_TXDR>
 8002666:	e0b4      	b.n	80027d2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266e:	2b00      	cmp	r3, #0
 8002670:	d071      	beq.n	8002756 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002678:	2b00      	cmp	r3, #0
 800267a:	d06c      	beq.n	8002756 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800268a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d04e      	beq.n	8002734 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	b29b      	uxth	r3, r3
 800269e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026a2:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2bff      	cmp	r3, #255	@ 0xff
 80026ac:	d906      	bls.n	80026bc <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	22ff      	movs	r2, #255	@ 0xff
 80026b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80026b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e010      	b.n	80026de <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026ce:	d003      	beq.n	80026d8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e002      	b.n	80026de <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80026d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026dc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	8a79      	ldrh	r1, [r7, #18]
 80026e6:	2300      	movs	r3, #0
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 ff6d 	bl	80035cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b22      	cmp	r3, #34	@ 0x22
 800270e:	d108      	bne.n	8002722 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800271e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002720:	e057      	b.n	80027d2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002730:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002732:	e04e      	b.n	80027d2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002742:	d003      	beq.n	800274c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 face 	bl	8002ce6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800274a:	e042      	b.n	80027d2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800274c:	2140      	movs	r1, #64	@ 0x40
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fde2 	bl	8003318 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002754:	e03d      	b.n	80027d2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d028      	beq.n	80027b2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002766:	2b00      	cmp	r3, #0
 8002768:	d023      	beq.n	80027b2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d119      	bne.n	80027a8 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800277e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002782:	d025      	beq.n	80027d0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002788:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800278c:	d108      	bne.n	80027a0 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800279c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800279e:	e017      	b.n	80027d0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 faa0 	bl	8002ce6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80027a6:	e013      	b.n	80027d0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80027a8:	2140      	movs	r1, #64	@ 0x40
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 fdb4 	bl	8003318 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80027b0:	e00e      	b.n	80027d0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d005      	beq.n	80027d2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fb25 	bl	8002e18 <I2C_ITMasterCplt>
 80027ce:	e000      	b.n	80027d2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80027d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80027f0:	4b8d      	ldr	r3, [pc, #564]	@ (8002a28 <I2C_Mem_ISR_DMA+0x244>)
 80027f2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <I2C_Mem_ISR_DMA+0x1e>
 80027fe:	2302      	movs	r3, #2
 8002800:	e10e      	b.n	8002a20 <I2C_Mem_ISR_DMA+0x23c>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b00      	cmp	r3, #0
 8002812:	d016      	beq.n	8002842 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800281a:	2b00      	cmp	r3, #0
 800281c:	d011      	beq.n	8002842 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2210      	movs	r2, #16
 8002824:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f043 0204 	orr.w	r2, r3, #4
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002832:	2120      	movs	r1, #32
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f000 fefb 	bl	8003630 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 fe83 	bl	8003546 <I2C_Flush_TXDR>
 8002840:	e0e9      	b.n	8002a16 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800285e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f04f 32ff 	mov.w	r2, #4294967295
 8002866:	651a      	str	r2, [r3, #80]	@ 0x50
 8002868:	e0d5      	b.n	8002a16 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002870:	2b00      	cmp	r3, #0
 8002872:	d05f      	beq.n	8002934 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800287a:	2b00      	cmp	r3, #0
 800287c:	d05a      	beq.n	8002934 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800287e:	2101      	movs	r1, #1
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 ff59 	bl	8003738 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002886:	2110      	movs	r1, #16
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 fed1 	bl	8003630 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002892:	b29b      	uxth	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	d048      	beq.n	800292a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2bff      	cmp	r3, #255	@ 0xff
 80028a0:	d910      	bls.n	80028c4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	22ff      	movs	r2, #255	@ 0xff
 80028a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ac:	b299      	uxth	r1, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fe85 	bl	80035cc <I2C_TransferConfig>
 80028c2:	e011      	b.n	80028e8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d2:	b299      	uxth	r1, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	2300      	movs	r3, #0
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fe72 	bl	80035cc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b22      	cmp	r3, #34	@ 0x22
 8002904:	d108      	bne.n	8002918 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002914:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002916:	e07e      	b.n	8002a16 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002926:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002928:	e075      	b.n	8002a16 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800292a:	2140      	movs	r1, #64	@ 0x40
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fcf3 	bl	8003318 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002932:	e070      	b.n	8002a16 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d05d      	beq.n	80029fa <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002944:	2b00      	cmp	r3, #0
 8002946:	d058      	beq.n	80029fa <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002948:	2101      	movs	r1, #1
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fef4 	bl	8003738 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002950:	2110      	movs	r1, #16
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fe6c 	bl	8003630 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b22      	cmp	r3, #34	@ 0x22
 8002962:	d101      	bne.n	8002968 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002964:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <I2C_Mem_ISR_DMA+0x248>)
 8002966:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2bff      	cmp	r3, #255	@ 0xff
 8002970:	d910      	bls.n	8002994 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	22ff      	movs	r2, #255	@ 0xff
 8002976:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297c:	b299      	uxth	r1, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	b2da      	uxtb	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fe1d 	bl	80035cc <I2C_TransferConfig>
 8002992:	e011      	b.n	80029b8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029a2:	b299      	uxth	r1, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fe0a 	bl	80035cc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b22      	cmp	r3, #34	@ 0x22
 80029d4:	d108      	bne.n	80029e8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029e4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029e6:	e016      	b.n	8002a16 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029f6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029f8:	e00d      	b.n	8002a16 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d008      	beq.n	8002a16 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fa01 	bl	8002e18 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	80002000 	.word	0x80002000
 8002a2c:	80002400 	.word	0x80002400

08002a30 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d101      	bne.n	8002a54 <I2C_Slave_ISR_DMA+0x24>
 8002a50:	2302      	movs	r3, #2
 8002a52:	e0c0      	b.n	8002bd6 <I2C_Slave_ISR_DMA+0x1a6>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f000 fa98 	bl	8002fa8 <I2C_ITSlaveCplt>
 8002a78:	e0a8      	b.n	8002bcc <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8095 	beq.w	8002bb0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 808f 	beq.w	8002bb0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d104      	bne.n	8002aa6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d07d      	beq.n	8002ba2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00c      	beq.n	8002ac8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00c      	beq.n	8002aea <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d007      	beq.n	8002aea <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d128      	bne.n	8002b42 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b28      	cmp	r3, #40	@ 0x28
 8002afa:	d108      	bne.n	8002b0e <I2C_Slave_ISR_DMA+0xde>
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b02:	d104      	bne.n	8002b0e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fbb2 	bl	8003270 <I2C_ITListenCplt>
 8002b0c:	e048      	b.n	8002ba0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b29      	cmp	r3, #41	@ 0x29
 8002b18:	d10e      	bne.n	8002b38 <I2C_Slave_ISR_DMA+0x108>
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b20:	d00a      	beq.n	8002b38 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2210      	movs	r2, #16
 8002b28:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fd0b 	bl	8003546 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f915 	bl	8002d60 <I2C_ITSlaveSeqCplt>
 8002b36:	e033      	b.n	8002ba0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002b40:	e034      	b.n	8002bac <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2210      	movs	r2, #16
 8002b48:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	f043 0204 	orr.w	r2, r3, #4
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b5c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <I2C_Slave_ISR_DMA+0x13c>
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b6a:	d11f      	bne.n	8002bac <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002b6c:	7dfb      	ldrb	r3, [r7, #23]
 8002b6e:	2b21      	cmp	r3, #33	@ 0x21
 8002b70:	d002      	beq.n	8002b78 <I2C_Slave_ISR_DMA+0x148>
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	2b29      	cmp	r3, #41	@ 0x29
 8002b76:	d103      	bne.n	8002b80 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2221      	movs	r2, #33	@ 0x21
 8002b7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b7e:	e008      	b.n	8002b92 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002b80:	7dfb      	ldrb	r3, [r7, #23]
 8002b82:	2b22      	cmp	r3, #34	@ 0x22
 8002b84:	d002      	beq.n	8002b8c <I2C_Slave_ISR_DMA+0x15c>
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
 8002b88:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b8a:	d102      	bne.n	8002b92 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2222      	movs	r2, #34	@ 0x22
 8002b90:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	4619      	mov	r1, r3
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fbbd 	bl	8003318 <I2C_ITError>
      if (treatdmanack == 1U)
 8002b9e:	e005      	b.n	8002bac <I2C_Slave_ISR_DMA+0x17c>
 8002ba0:	e004      	b.n	8002bac <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2210      	movs	r2, #16
 8002ba8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002baa:	e00f      	b.n	8002bcc <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002bac:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bae:	e00d      	b.n	8002bcc <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d008      	beq.n	8002bcc <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f809 	bl	8002bde <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002bf4:	2b28      	cmp	r3, #40	@ 0x28
 8002bf6:	d16a      	bne.n	8002cce <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	0c1b      	lsrs	r3, r3, #16
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c16:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c24:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002c32:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d138      	bne.n	8002cae <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	09db      	lsrs	r3, r3, #7
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	89bb      	ldrh	r3, [r7, #12]
 8002c44:	4053      	eors	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	f003 0306 	and.w	r3, r3, #6
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d11c      	bne.n	8002c8a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002c50:	897b      	ldrh	r3, [r7, #10]
 8002c52:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d13b      	bne.n	8002cde <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2208      	movs	r2, #8
 8002c72:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c7c:	89ba      	ldrh	r2, [r7, #12]
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	4619      	mov	r1, r3
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff fa63 	bl	800214e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c88:	e029      	b.n	8002cde <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002c8a:	893b      	ldrh	r3, [r7, #8]
 8002c8c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fd50 	bl	8003738 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ca0:	89ba      	ldrh	r2, [r7, #12]
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff fa51 	bl	800214e <HAL_I2C_AddrCallback>
}
 8002cac:	e017      	b.n	8002cde <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002cae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd40 	bl	8003738 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cc0:	89ba      	ldrh	r2, [r7, #12]
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff fa41 	bl	800214e <HAL_I2C_AddrCallback>
}
 8002ccc:	e007      	b.n	8002cde <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b21      	cmp	r3, #33	@ 0x21
 8002d00:	d115      	bne.n	8002d2e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2211      	movs	r2, #17
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d16:	2101      	movs	r1, #1
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fd0d 	bl	8003738 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7ff f9e9 	bl	80020fe <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d2c:	e014      	b.n	8002d58 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2212      	movs	r2, #18
 8002d3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d42:	2102      	movs	r1, #2
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fcf7 	bl	8003738 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff f9dd 	bl	8002112 <HAL_I2C_MasterRxCpltCallback>
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d008      	beq.n	8002d94 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e00c      	b.n	8002dae <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b29      	cmp	r3, #41	@ 0x29
 8002db8:	d112      	bne.n	8002de0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2228      	movs	r2, #40	@ 0x28
 8002dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2221      	movs	r2, #33	@ 0x21
 8002dc6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002dc8:	2101      	movs	r1, #1
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fcb4 	bl	8003738 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff f9a4 	bl	8002126 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002dde:	e017      	b.n	8002e10 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dea:	d111      	bne.n	8002e10 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2228      	movs	r2, #40	@ 0x28
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2222      	movs	r2, #34	@ 0x22
 8002df8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fc9b 	bl	8003738 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff f995 	bl	800213a <HAL_I2C_SlaveRxCpltCallback>
}
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b21      	cmp	r3, #33	@ 0x21
 8002e38:	d107      	bne.n	8002e4a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 fc7b 	bl	8003738 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2211      	movs	r2, #17
 8002e46:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e48:	e00c      	b.n	8002e64 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b22      	cmp	r3, #34	@ 0x22
 8002e54:	d106      	bne.n	8002e64 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e56:	2102      	movs	r1, #2
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fc6d 	bl	8003738 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2212      	movs	r2, #18
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6859      	ldr	r1, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b4c      	ldr	r3, [pc, #304]	@ (8002fa0 <I2C_ITMasterCplt+0x188>)
 8002e70:	400b      	ands	r3, r1
 8002e72:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a49      	ldr	r2, [pc, #292]	@ (8002fa4 <I2C_ITMasterCplt+0x18c>)
 8002e7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2210      	movs	r2, #16
 8002e90:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e96:	f043 0204 	orr.w	r2, r3, #4
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b60      	cmp	r3, #96	@ 0x60
 8002ea8:	d10a      	bne.n	8002ec0 <I2C_ITMasterCplt+0xa8>
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0304 	and.w	r3, r3, #4
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fb40 	bl	8003546 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b60      	cmp	r3, #96	@ 0x60
 8002ed6:	d002      	beq.n	8002ede <I2C_ITMasterCplt+0xc6>
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fa17 	bl	8003318 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002eea:	e054      	b.n	8002f96 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b21      	cmp	r3, #33	@ 0x21
 8002ef6:	d124      	bne.n	8002f42 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b40      	cmp	r3, #64	@ 0x40
 8002f10:	d10b      	bne.n	8002f2a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff f92b 	bl	800217e <HAL_I2C_MemTxCpltCallback>
}
 8002f28:	e035      	b.n	8002f96 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff f8df 	bl	80020fe <HAL_I2C_MasterTxCpltCallback>
}
 8002f40:	e029      	b.n	8002f96 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b22      	cmp	r3, #34	@ 0x22
 8002f4c:	d123      	bne.n	8002f96 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b40      	cmp	r3, #64	@ 0x40
 8002f66:	d10b      	bne.n	8002f80 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff f90a 	bl	8002192 <HAL_I2C_MemRxCpltCallback>
}
 8002f7e:	e00a      	b.n	8002f96 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff f8be 	bl	8002112 <HAL_I2C_MasterRxCpltCallback>
}
 8002f96:	bf00      	nop
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	fe00e800 	.word	0xfe00e800
 8002fa4:	ffff0000 	.word	0xffff0000

08002fa8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fca:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fd4:	7afb      	ldrb	r3, [r7, #11]
 8002fd6:	2b21      	cmp	r3, #33	@ 0x21
 8002fd8:	d002      	beq.n	8002fe0 <I2C_ITSlaveCplt+0x38>
 8002fda:	7afb      	ldrb	r3, [r7, #11]
 8002fdc:	2b29      	cmp	r3, #41	@ 0x29
 8002fde:	d108      	bne.n	8002ff2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002fe0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fba7 	bl	8003738 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2221      	movs	r2, #33	@ 0x21
 8002fee:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ff0:	e019      	b.n	8003026 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	2b22      	cmp	r3, #34	@ 0x22
 8002ff6:	d002      	beq.n	8002ffe <I2C_ITSlaveCplt+0x56>
 8002ff8:	7afb      	ldrb	r3, [r7, #11]
 8002ffa:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ffc:	d108      	bne.n	8003010 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ffe:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fb98 	bl	8003738 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2222      	movs	r2, #34	@ 0x22
 800300c:	631a      	str	r2, [r3, #48]	@ 0x30
 800300e:	e00a      	b.n	8003026 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003010:	7afb      	ldrb	r3, [r7, #11]
 8003012:	2b28      	cmp	r3, #40	@ 0x28
 8003014:	d107      	bne.n	8003026 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003016:	f248 0103 	movw	r1, #32771	@ 0x8003
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fb8c 	bl	8003738 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003034:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b89      	ldr	r3, [pc, #548]	@ (8003268 <I2C_ITSlaveCplt+0x2c0>)
 8003042:	400b      	ands	r3, r1
 8003044:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fa7d 	bl	8003546 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d013      	beq.n	800307e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003064:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01f      	beq.n	80030ae <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	b29a      	uxth	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800307c:	e017      	b.n	80030ae <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d012      	beq.n	80030ae <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003096:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	f023 0304 	bic.w	r3, r3, #4
 80030be:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00c      	beq.n	80030fa <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	3b01      	subs	r3, #1
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003108:	f043 0204 	orr.w	r2, r3, #4
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d049      	beq.n	80031ae <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003120:	2b00      	cmp	r3, #0
 8003122:	d044      	beq.n	80031ae <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d128      	bne.n	8003180 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b28      	cmp	r3, #40	@ 0x28
 8003138:	d108      	bne.n	800314c <I2C_ITSlaveCplt+0x1a4>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003140:	d104      	bne.n	800314c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003142:	6979      	ldr	r1, [r7, #20]
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f893 	bl	8003270 <I2C_ITListenCplt>
 800314a:	e030      	b.n	80031ae <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b29      	cmp	r3, #41	@ 0x29
 8003156:	d10e      	bne.n	8003176 <I2C_ITSlaveCplt+0x1ce>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800315e:	d00a      	beq.n	8003176 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2210      	movs	r2, #16
 8003166:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f9ec 	bl	8003546 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fdf6 	bl	8002d60 <I2C_ITSlaveSeqCplt>
 8003174:	e01b      	b.n	80031ae <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2210      	movs	r2, #16
 800317c:	61da      	str	r2, [r3, #28]
 800317e:	e016      	b.n	80031ae <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2210      	movs	r2, #16
 8003186:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318c:	f043 0204 	orr.w	r2, r3, #4
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <I2C_ITSlaveCplt+0x1fa>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031a0:	d105      	bne.n	80031ae <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a6:	4619      	mov	r1, r3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f8b5 	bl	8003318 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d010      	beq.n	80031e6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f8a4 	bl	8003318 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b28      	cmp	r3, #40	@ 0x28
 80031da:	d141      	bne.n	8003260 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031dc:	6979      	ldr	r1, [r7, #20]
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f846 	bl	8003270 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031e4:	e03c      	b.n	8003260 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031ee:	d014      	beq.n	800321a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fdb5 	bl	8002d60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a1c      	ldr	r2, [pc, #112]	@ (800326c <I2C_ITSlaveCplt+0x2c4>)
 80031fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fe ffa9 	bl	800216a <HAL_I2C_ListenCpltCallback>
}
 8003218:	e022      	b.n	8003260 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b22      	cmp	r3, #34	@ 0x22
 8003224:	d10e      	bne.n	8003244 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2220      	movs	r2, #32
 800322a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f7fe ff7c 	bl	800213a <HAL_I2C_SlaveRxCpltCallback>
}
 8003242:	e00d      	b.n	8003260 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fe ff63 	bl	8002126 <HAL_I2C_SlaveTxCpltCallback>
}
 8003260:	bf00      	nop
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	fe00e800 	.word	0xfe00e800
 800326c:	ffff0000 	.word	0xffff0000

08003270 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a25      	ldr	r2, [pc, #148]	@ (8003314 <I2C_ITListenCplt+0xa4>)
 800327e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2220      	movs	r2, #32
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d022      	beq.n	80032ec <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b8:	1c5a      	adds	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d012      	beq.n	80032ec <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	f043 0204 	orr.w	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032ec:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fa21 	bl	8003738 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2210      	movs	r2, #16
 80032fc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fe ff2f 	bl	800216a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800330c:	bf00      	nop
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	ffff0000 	.word	0xffff0000

08003318 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003328:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a6d      	ldr	r2, [pc, #436]	@ (80034ec <I2C_ITError+0x1d4>)
 8003336:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	2b28      	cmp	r3, #40	@ 0x28
 800334e:	d005      	beq.n	800335c <I2C_ITError+0x44>
 8003350:	7bfb      	ldrb	r3, [r7, #15]
 8003352:	2b29      	cmp	r3, #41	@ 0x29
 8003354:	d002      	beq.n	800335c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b2a      	cmp	r3, #42	@ 0x2a
 800335a:	d10b      	bne.n	8003374 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800335c:	2103      	movs	r1, #3
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f9ea 	bl	8003738 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2228      	movs	r2, #40	@ 0x28
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a60      	ldr	r2, [pc, #384]	@ (80034f0 <I2C_ITError+0x1d8>)
 8003370:	635a      	str	r2, [r3, #52]	@ 0x34
 8003372:	e030      	b.n	80033d6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003374:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f9dd 	bl	8003738 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f8e1 	bl	8003546 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b60      	cmp	r3, #96	@ 0x60
 800338e:	d01f      	beq.n	80033d0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d114      	bne.n	80033d0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b10      	cmp	r3, #16
 80033b2:	d109      	bne.n	80033c8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2210      	movs	r2, #16
 80033ba:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c0:	f043 0204 	orr.w	r2, r3, #4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2220      	movs	r2, #32
 80033ce:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d039      	beq.n	8003458 <I2C_ITError+0x140>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b11      	cmp	r3, #17
 80033e8:	d002      	beq.n	80033f0 <I2C_ITError+0xd8>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b21      	cmp	r3, #33	@ 0x21
 80033ee:	d133      	bne.n	8003458 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033fe:	d107      	bne.n	8003410 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800340e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	4618      	mov	r0, r3
 8003416:	f7fe f9cf 	bl	80017b8 <HAL_DMA_GetState>
 800341a:	4603      	mov	r3, r0
 800341c:	2b01      	cmp	r3, #1
 800341e:	d017      	beq.n	8003450 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003424:	4a33      	ldr	r2, [pc, #204]	@ (80034f4 <I2C_ITError+0x1dc>)
 8003426:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	4618      	mov	r0, r3
 8003436:	f7fe f8a9 	bl	800158c <HAL_DMA_Abort_IT>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d04d      	beq.n	80034dc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800344a:	4610      	mov	r0, r2
 800344c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800344e:	e045      	b.n	80034dc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f851 	bl	80034f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003456:	e041      	b.n	80034dc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800345c:	2b00      	cmp	r3, #0
 800345e:	d039      	beq.n	80034d4 <I2C_ITError+0x1bc>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b12      	cmp	r3, #18
 8003464:	d002      	beq.n	800346c <I2C_ITError+0x154>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b22      	cmp	r3, #34	@ 0x22
 800346a:	d133      	bne.n	80034d4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800347a:	d107      	bne.n	800348c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800348a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe f991 	bl	80017b8 <HAL_DMA_GetState>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	d017      	beq.n	80034cc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	4a14      	ldr	r2, [pc, #80]	@ (80034f4 <I2C_ITError+0x1dc>)
 80034a2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe f86b 	bl	800158c <HAL_DMA_Abort_IT>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d011      	beq.n	80034e0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034c6:	4610      	mov	r0, r2
 80034c8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034ca:	e009      	b.n	80034e0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f813 	bl	80034f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034d2:	e005      	b.n	80034e0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f80f 	bl	80034f8 <I2C_TreatErrorCallback>
  }
}
 80034da:	e002      	b.n	80034e2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034dc:	bf00      	nop
 80034de:	e000      	b.n	80034e2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034e0:	bf00      	nop
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	ffff0000 	.word	0xffff0000
 80034f0:	0800241d 	.word	0x0800241d
 80034f4:	0800358f 	.word	0x0800358f

080034f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b60      	cmp	r3, #96	@ 0x60
 800350a:	d10e      	bne.n	800352a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe fe49 	bl	80021ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003528:	e009      	b.n	800353e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7fe fe34 	bl	80021a6 <HAL_I2C_ErrorCallback>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d103      	bne.n	8003564 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2200      	movs	r2, #0
 8003562:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d007      	beq.n	8003582 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	619a      	str	r2, [r3, #24]
  }
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b084      	sub	sp, #16
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035a8:	2200      	movs	r2, #0
 80035aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	2200      	movs	r2, #0
 80035ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff ff9b 	bl	80034f8 <I2C_TreatErrorCallback>
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	460b      	mov	r3, r1
 80035d8:	817b      	strh	r3, [r7, #10]
 80035da:	4613      	mov	r3, r2
 80035dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035de:	897b      	ldrh	r3, [r7, #10]
 80035e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035e4:	7a7b      	ldrb	r3, [r7, #9]
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	0d5b      	lsrs	r3, r3, #21
 8003606:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800360a:	4b08      	ldr	r3, [pc, #32]	@ (800362c <I2C_TransferConfig+0x60>)
 800360c:	430b      	orrs	r3, r1
 800360e:	43db      	mvns	r3, r3
 8003610:	ea02 0103 	and.w	r1, r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	03ff63ff 	.word	0x03ff63ff

08003630 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003644:	4a39      	ldr	r2, [pc, #228]	@ (800372c <I2C_Enable_IRQ+0xfc>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d032      	beq.n	80036b0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800364e:	4a38      	ldr	r2, [pc, #224]	@ (8003730 <I2C_Enable_IRQ+0x100>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d02d      	beq.n	80036b0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003658:	4a36      	ldr	r2, [pc, #216]	@ (8003734 <I2C_Enable_IRQ+0x104>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d028      	beq.n	80036b0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800365e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003662:	2b00      	cmp	r3, #0
 8003664:	da03      	bge.n	800366e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800366c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800366e:	887b      	ldrh	r3, [r7, #2]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800367e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003680:	887b      	ldrh	r3, [r7, #2]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8003690:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003692:	887b      	ldrh	r3, [r7, #2]
 8003694:	2b10      	cmp	r3, #16
 8003696:	d103      	bne.n	80036a0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800369e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	2b20      	cmp	r3, #32
 80036a4:	d133      	bne.n	800370e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f043 0320 	orr.w	r3, r3, #32
 80036ac:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036ae:	e02e      	b.n	800370e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	da03      	bge.n	80036c0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80036be:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036c0:	887b      	ldrh	r3, [r7, #2]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80036d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80036e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d103      	bne.n	80036f2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80036f0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036f2:	887b      	ldrh	r3, [r7, #2]
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d103      	bne.n	8003700 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80036fe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	2b40      	cmp	r3, #64	@ 0x40
 8003704:	d103      	bne.n	800370e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800370c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6819      	ldr	r1, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	430a      	orrs	r2, r1
 800371c:	601a      	str	r2, [r3, #0]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	0800260f 	.word	0x0800260f
 8003730:	08002a31 	.word	0x08002a31
 8003734:	080027e5 	.word	0x080027e5

08003738 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003748:	887b      	ldrh	r3, [r7, #2]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00f      	beq.n	8003772 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003758:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003766:	2b28      	cmp	r3, #40	@ 0x28
 8003768:	d003      	beq.n	8003772 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003770:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003772:	887b      	ldrh	r3, [r7, #2]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00f      	beq.n	800379c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003782:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378a:	b2db      	uxtb	r3, r3
 800378c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003790:	2b28      	cmp	r3, #40	@ 0x28
 8003792:	d003      	beq.n	800379c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800379a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800379c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	da03      	bge.n	80037ac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80037aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037ac:	887b      	ldrh	r3, [r7, #2]
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d103      	bne.n	80037ba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80037b8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037ba:	887b      	ldrh	r3, [r7, #2]
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d103      	bne.n	80037c8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f043 0320 	orr.w	r3, r3, #32
 80037c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80037c8:	887b      	ldrh	r3, [r7, #2]
 80037ca:	2b40      	cmp	r3, #64	@ 0x40
 80037cc:	d103      	bne.n	80037d6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037d4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6819      	ldr	r1, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	43da      	mvns	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	400a      	ands	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]
}
 80037e8:	bf00      	nop
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b20      	cmp	r3, #32
 8003808:	d138      	bne.n	800387c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003814:	2302      	movs	r3, #2
 8003816:	e032      	b.n	800387e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	@ 0x24
 8003824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f022 0201 	bic.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6819      	ldr	r1, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	e000      	b.n	800387e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800387c:	2302      	movs	r3, #2
  }
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b20      	cmp	r3, #32
 800389e:	d139      	bne.n	8003914 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e033      	b.n	8003916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2224      	movs	r2, #36	@ 0x24
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	021b      	lsls	r3, r3, #8
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
	...

08003924 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d141      	bne.n	80039b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003932:	4b4b      	ldr	r3, [pc, #300]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393e:	d131      	bne.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003940:	4b47      	ldr	r3, [pc, #284]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003946:	4a46      	ldr	r2, [pc, #280]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800394c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003950:	4b43      	ldr	r3, [pc, #268]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003958:	4a41      	ldr	r2, [pc, #260]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800395a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800395e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003960:	4b40      	ldr	r3, [pc, #256]	@ (8003a64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2232      	movs	r2, #50	@ 0x32
 8003966:	fb02 f303 	mul.w	r3, r2, r3
 800396a:	4a3f      	ldr	r2, [pc, #252]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	0c9b      	lsrs	r3, r3, #18
 8003972:	3301      	adds	r3, #1
 8003974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003976:	e002      	b.n	800397e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	3b01      	subs	r3, #1
 800397c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800397e:	4b38      	ldr	r3, [pc, #224]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003986:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398a:	d102      	bne.n	8003992 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f2      	bne.n	8003978 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003992:	4b33      	ldr	r3, [pc, #204]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800399a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800399e:	d158      	bne.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e057      	b.n	8003a54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039aa:	4a2d      	ldr	r2, [pc, #180]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80039b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80039b4:	e04d      	b.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039bc:	d141      	bne.n	8003a42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80039be:	4b28      	ldr	r3, [pc, #160]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ca:	d131      	bne.n	8003a30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80039cc:	4b24      	ldr	r3, [pc, #144]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039d2:	4a23      	ldr	r2, [pc, #140]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039dc:	4b20      	ldr	r3, [pc, #128]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80039e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003a64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2232      	movs	r2, #50	@ 0x32
 80039f2:	fb02 f303 	mul.w	r3, r2, r3
 80039f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	0c9b      	lsrs	r3, r3, #18
 80039fe:	3301      	adds	r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a02:	e002      	b.n	8003a0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a0a:	4b15      	ldr	r3, [pc, #84]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a16:	d102      	bne.n	8003a1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f2      	bne.n	8003a04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a1e:	4b10      	ldr	r3, [pc, #64]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a2a:	d112      	bne.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e011      	b.n	8003a54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a30:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a36:	4a0a      	ldr	r2, [pc, #40]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003a40:	e007      	b.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a42:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a4a:	4a05      	ldr	r2, [pc, #20]	@ (8003a60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40007000 	.word	0x40007000
 8003a64:	20000000 	.word	0x20000000
 8003a68:	431bde83 	.word	0x431bde83

08003a6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a04      	ldr	r2, [pc, #16]	@ (8003a88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a7a:	6093      	str	r3, [r2, #8]
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40007000 	.word	0x40007000

08003a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e2fe      	b.n	800409c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d075      	beq.n	8003b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aaa:	4b97      	ldr	r3, [pc, #604]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ab4:	4b94      	ldr	r3, [pc, #592]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b0c      	cmp	r3, #12
 8003ac2:	d102      	bne.n	8003aca <HAL_RCC_OscConfig+0x3e>
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d002      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x44>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d10b      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	4b8d      	ldr	r3, [pc, #564]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d05b      	beq.n	8003b94 <HAL_RCC_OscConfig+0x108>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d157      	bne.n	8003b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e2d9      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af0:	d106      	bne.n	8003b00 <HAL_RCC_OscConfig+0x74>
 8003af2:	4b85      	ldr	r3, [pc, #532]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a84      	ldr	r2, [pc, #528]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e01d      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b08:	d10c      	bne.n	8003b24 <HAL_RCC_OscConfig+0x98>
 8003b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b7c      	ldr	r3, [pc, #496]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e00b      	b.n	8003b3c <HAL_RCC_OscConfig+0xb0>
 8003b24:	4b78      	ldr	r3, [pc, #480]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a77      	ldr	r2, [pc, #476]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b75      	ldr	r3, [pc, #468]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a74      	ldr	r2, [pc, #464]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d013      	beq.n	8003b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b44:	f7fd fa68 	bl	8001018 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fd fa64 	bl	8001018 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	@ 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e29e      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d0f0      	beq.n	8003b4c <HAL_RCC_OscConfig+0xc0>
 8003b6a:	e014      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6c:	f7fd fa54 	bl	8001018 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b74:	f7fd fa50 	bl	8001018 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	@ 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e28a      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b86:	4b60      	ldr	r3, [pc, #384]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f0      	bne.n	8003b74 <HAL_RCC_OscConfig+0xe8>
 8003b92:	e000      	b.n	8003b96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d075      	beq.n	8003c8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba2:	4b59      	ldr	r3, [pc, #356]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
 8003baa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bac:	4b56      	ldr	r3, [pc, #344]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	2b0c      	cmp	r3, #12
 8003bba:	d102      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x136>
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d002      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x13c>
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d11f      	bne.n	8003c08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_OscConfig+0x154>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e25d      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003be0:	4b49      	ldr	r3, [pc, #292]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	061b      	lsls	r3, r3, #24
 8003bee:	4946      	ldr	r1, [pc, #280]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003bf4:	4b45      	ldr	r3, [pc, #276]	@ (8003d0c <HAL_RCC_OscConfig+0x280>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd f9c1 	bl	8000f80 <HAL_InitTick>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d043      	beq.n	8003c8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e249      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d023      	beq.n	8003c58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c10:	4b3d      	ldr	r3, [pc, #244]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a3c      	ldr	r2, [pc, #240]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fd f9fc 	bl	8001018 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fd f9f8 	bl	8001018 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e232      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c36:	4b34      	ldr	r3, [pc, #208]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0f0      	beq.n	8003c24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c42:	4b31      	ldr	r3, [pc, #196]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	061b      	lsls	r3, r3, #24
 8003c50:	492d      	ldr	r1, [pc, #180]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	604b      	str	r3, [r1, #4]
 8003c56:	e01a      	b.n	8003c8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c58:	4b2b      	ldr	r3, [pc, #172]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fd f9d8 	bl	8001018 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7fd f9d4 	bl	8001018 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e20e      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c7e:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x1e0>
 8003c8a:	e000      	b.n	8003c8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d041      	beq.n	8003d1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01c      	beq.n	8003cdc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca2:	4b19      	ldr	r3, [pc, #100]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ca8:	4a17      	ldr	r2, [pc, #92]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fd f9b1 	bl	8001018 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fd f9ad 	bl	8001018 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e1e7      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0ef      	beq.n	8003cba <HAL_RCC_OscConfig+0x22e>
 8003cda:	e020      	b.n	8003d1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ce2:	4a09      	ldr	r2, [pc, #36]	@ (8003d08 <HAL_RCC_OscConfig+0x27c>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cec:	f7fd f994 	bl	8001018 <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cf2:	e00d      	b.n	8003d10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cf4:	f7fd f990 	bl	8001018 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d906      	bls.n	8003d10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e1ca      	b.n	800409c <HAL_RCC_OscConfig+0x610>
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d10:	4b8c      	ldr	r3, [pc, #560]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1ea      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0304 	and.w	r3, r3, #4
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80a6 	beq.w	8003e78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d30:	4b84      	ldr	r3, [pc, #528]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003d32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d101      	bne.n	8003d40 <HAL_RCC_OscConfig+0x2b4>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x2b6>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b7f      	ldr	r3, [pc, #508]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d52:	4b7c      	ldr	r3, [pc, #496]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d62:	4b79      	ldr	r3, [pc, #484]	@ (8003f48 <HAL_RCC_OscConfig+0x4bc>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d118      	bne.n	8003da0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d6e:	4b76      	ldr	r3, [pc, #472]	@ (8003f48 <HAL_RCC_OscConfig+0x4bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a75      	ldr	r2, [pc, #468]	@ (8003f48 <HAL_RCC_OscConfig+0x4bc>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7fd f94d 	bl	8001018 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d82:	f7fd f949 	bl	8001018 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e183      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d94:	4b6c      	ldr	r3, [pc, #432]	@ (8003f48 <HAL_RCC_OscConfig+0x4bc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d0f0      	beq.n	8003d82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d108      	bne.n	8003dba <HAL_RCC_OscConfig+0x32e>
 8003da8:	4b66      	ldr	r3, [pc, #408]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dae:	4a65      	ldr	r2, [pc, #404]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003db8:	e024      	b.n	8003e04 <HAL_RCC_OscConfig+0x378>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d110      	bne.n	8003de4 <HAL_RCC_OscConfig+0x358>
 8003dc2:	4b60      	ldr	r3, [pc, #384]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc8:	4a5e      	ldr	r2, [pc, #376]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dca:	f043 0304 	orr.w	r3, r3, #4
 8003dce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003de2:	e00f      	b.n	8003e04 <HAL_RCC_OscConfig+0x378>
 8003de4:	4b57      	ldr	r3, [pc, #348]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dea:	4a56      	ldr	r2, [pc, #344]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003df4:	4b53      	ldr	r3, [pc, #332]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfa:	4a52      	ldr	r2, [pc, #328]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d016      	beq.n	8003e3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd f904 	bl	8001018 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fd f900 	bl	8001018 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e138      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e2a:	4b46      	ldr	r3, [pc, #280]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0ed      	beq.n	8003e14 <HAL_RCC_OscConfig+0x388>
 8003e38:	e015      	b.n	8003e66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3a:	f7fd f8ed 	bl	8001018 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fd f8e9 	bl	8001018 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e121      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e58:	4b3a      	ldr	r3, [pc, #232]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1ed      	bne.n	8003e42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e66:	7ffb      	ldrb	r3, [r7, #31]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b35      	ldr	r3, [pc, #212]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e70:	4a34      	ldr	r2, [pc, #208]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d03c      	beq.n	8003efe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e92:	4a2c      	ldr	r2, [pc, #176]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fd f8bc 	bl	8001018 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ea4:	f7fd f8b8 	bl	8001018 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0f2      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003eb6:	4b23      	ldr	r3, [pc, #140]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003eb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ef      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x418>
 8003ec4:	e01b      	b.n	8003efe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed6:	f7fd f89f 	bl	8001018 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ede:	f7fd f89b 	bl	8001018 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0d5      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ef0:	4b14      	ldr	r3, [pc, #80]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ef      	bne.n	8003ede <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80c9 	beq.w	800409a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f08:	4b0e      	ldr	r3, [pc, #56]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b0c      	cmp	r3, #12
 8003f12:	f000 8083 	beq.w	800401c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d15e      	bne.n	8003fdc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1e:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a08      	ldr	r2, [pc, #32]	@ (8003f44 <HAL_RCC_OscConfig+0x4b8>)
 8003f24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fd f875 	bl	8001018 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f30:	e00c      	b.n	8003f4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fd f871 	bl	8001018 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d905      	bls.n	8003f4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0ab      	b.n	800409c <HAL_RCC_OscConfig+0x610>
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f4c:	4b55      	ldr	r3, [pc, #340]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1ec      	bne.n	8003f32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f58:	4b52      	ldr	r3, [pc, #328]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	4b52      	ldr	r3, [pc, #328]	@ (80040a8 <HAL_RCC_OscConfig+0x61c>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6a11      	ldr	r1, [r2, #32]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f68:	3a01      	subs	r2, #1
 8003f6a:	0112      	lsls	r2, r2, #4
 8003f6c:	4311      	orrs	r1, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003f72:	0212      	lsls	r2, r2, #8
 8003f74:	4311      	orrs	r1, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f7a:	0852      	lsrs	r2, r2, #1
 8003f7c:	3a01      	subs	r2, #1
 8003f7e:	0552      	lsls	r2, r2, #21
 8003f80:	4311      	orrs	r1, r2
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f86:	0852      	lsrs	r2, r2, #1
 8003f88:	3a01      	subs	r2, #1
 8003f8a:	0652      	lsls	r2, r2, #25
 8003f8c:	4311      	orrs	r1, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f92:	06d2      	lsls	r2, r2, #27
 8003f94:	430a      	orrs	r2, r1
 8003f96:	4943      	ldr	r1, [pc, #268]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9c:	4b41      	ldr	r3, [pc, #260]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a40      	ldr	r2, [pc, #256]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003fa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fa6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a3d      	ldr	r2, [pc, #244]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003fb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb4:	f7fd f830 	bl	8001018 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fbc:	f7fd f82c 	bl	8001018 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e066      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fce:	4b35      	ldr	r3, [pc, #212]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x530>
 8003fda:	e05e      	b.n	800409a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fdc:	4b31      	ldr	r3, [pc, #196]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a30      	ldr	r2, [pc, #192]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8003fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd f816 	bl	8001018 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd f812 	bl	8001018 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e04c      	b.n	800409c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004002:	4b28      	ldr	r3, [pc, #160]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800400e:	4b25      	ldr	r3, [pc, #148]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	4924      	ldr	r1, [pc, #144]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 8004014:	4b25      	ldr	r3, [pc, #148]	@ (80040ac <HAL_RCC_OscConfig+0x620>)
 8004016:	4013      	ands	r3, r2
 8004018:	60cb      	str	r3, [r1, #12]
 800401a:	e03e      	b.n	800409a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e039      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004028:	4b1e      	ldr	r3, [pc, #120]	@ (80040a4 <HAL_RCC_OscConfig+0x618>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f003 0203 	and.w	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	429a      	cmp	r2, r3
 800403a:	d12c      	bne.n	8004096 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004046:	3b01      	subs	r3, #1
 8004048:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d123      	bne.n	8004096 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d11b      	bne.n	8004096 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004068:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d113      	bne.n	8004096 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d109      	bne.n	8004096 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	3b01      	subs	r3, #1
 8004090:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3720      	adds	r7, #32
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	019f800c 	.word	0x019f800c
 80040ac:	feeefffc 	.word	0xfeeefffc

080040b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e11e      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040c8:	4b91      	ldr	r3, [pc, #580]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d910      	bls.n	80040f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040d6:	4b8e      	ldr	r3, [pc, #568]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f023 020f 	bic.w	r2, r3, #15
 80040de:	498c      	ldr	r1, [pc, #560]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e6:	4b8a      	ldr	r3, [pc, #552]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d001      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e106      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d073      	beq.n	80041ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d129      	bne.n	8004160 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410c:	4b81      	ldr	r3, [pc, #516]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d101      	bne.n	800411c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e0f4      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800411c:	f000 f99e 	bl	800445c <RCC_GetSysClockFreqFromPLLSource>
 8004120:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4a7c      	ldr	r2, [pc, #496]	@ (8004318 <HAL_RCC_ClockConfig+0x268>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d93f      	bls.n	80041aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800412a:	4b7a      	ldr	r3, [pc, #488]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d009      	beq.n	800414a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800413e:	2b00      	cmp	r3, #0
 8004140:	d033      	beq.n	80041aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004146:	2b00      	cmp	r3, #0
 8004148:	d12f      	bne.n	80041aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800414a:	4b72      	ldr	r3, [pc, #456]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004152:	4a70      	ldr	r2, [pc, #448]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 8004154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004158:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800415a:	2380      	movs	r3, #128	@ 0x80
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	e024      	b.n	80041aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d107      	bne.n	8004178 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004168:	4b6a      	ldr	r3, [pc, #424]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0c6      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004178:	4b66      	ldr	r3, [pc, #408]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0be      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004188:	f000 f8ce 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 800418c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4a61      	ldr	r2, [pc, #388]	@ (8004318 <HAL_RCC_ClockConfig+0x268>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d909      	bls.n	80041aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004196:	4b5f      	ldr	r3, [pc, #380]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800419e:	4a5d      	ldr	r2, [pc, #372]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80041a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80041a6:	2380      	movs	r3, #128	@ 0x80
 80041a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041aa:	4b5a      	ldr	r3, [pc, #360]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4957      	ldr	r1, [pc, #348]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041bc:	f7fc ff2c 	bl	8001018 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c2:	e00a      	b.n	80041da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c4:	f7fc ff28 	bl	8001018 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e095      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041da:	4b4e      	ldr	r3, [pc, #312]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 020c 	and.w	r2, r3, #12
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d1eb      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d023      	beq.n	8004240 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004204:	4b43      	ldr	r3, [pc, #268]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a42      	ldr	r2, [pc, #264]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800420a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800420e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d007      	beq.n	800422c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800421c:	4b3d      	ldr	r3, [pc, #244]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004224:	4a3b      	ldr	r2, [pc, #236]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 8004226:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800422a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b39      	ldr	r3, [pc, #228]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4936      	ldr	r1, [pc, #216]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
 800423e:	e008      	b.n	8004252 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b80      	cmp	r3, #128	@ 0x80
 8004244:	d105      	bne.n	8004252 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004246:	4b33      	ldr	r3, [pc, #204]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	4a32      	ldr	r2, [pc, #200]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 800424c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004250:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004252:	4b2f      	ldr	r3, [pc, #188]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d21d      	bcs.n	800429c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004260:	4b2b      	ldr	r3, [pc, #172]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 020f 	bic.w	r2, r3, #15
 8004268:	4929      	ldr	r1, [pc, #164]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	4313      	orrs	r3, r2
 800426e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004270:	f7fc fed2 	bl	8001018 <HAL_GetTick>
 8004274:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	e00a      	b.n	800428e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004278:	f7fc fece 	bl	8001018 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e03b      	b.n	8004306 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800428e:	4b20      	ldr	r3, [pc, #128]	@ (8004310 <HAL_RCC_ClockConfig+0x260>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	429a      	cmp	r2, r3
 800429a:	d1ed      	bne.n	8004278 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4917      	ldr	r1, [pc, #92]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d009      	beq.n	80042da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c6:	4b13      	ldr	r3, [pc, #76]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	490f      	ldr	r1, [pc, #60]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042da:	f000 f825 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 80042de:	4602      	mov	r2, r0
 80042e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004314 <HAL_RCC_ClockConfig+0x264>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	091b      	lsrs	r3, r3, #4
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	490c      	ldr	r1, [pc, #48]	@ (800431c <HAL_RCC_ClockConfig+0x26c>)
 80042ec:	5ccb      	ldrb	r3, [r1, r3]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	fa22 f303 	lsr.w	r3, r2, r3
 80042f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004320 <HAL_RCC_ClockConfig+0x270>)
 80042f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004324 <HAL_RCC_ClockConfig+0x274>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7fc fe3e 	bl	8000f80 <HAL_InitTick>
 8004304:	4603      	mov	r3, r0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40022000 	.word	0x40022000
 8004314:	40021000 	.word	0x40021000
 8004318:	04c4b400 	.word	0x04c4b400
 800431c:	080063c8 	.word	0x080063c8
 8004320:	20000000 	.word	0x20000000
 8004324:	20000004 	.word	0x20000004

08004328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800432e:	4b2c      	ldr	r3, [pc, #176]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b04      	cmp	r3, #4
 8004338:	d102      	bne.n	8004340 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800433a:	4b2a      	ldr	r3, [pc, #168]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	e047      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004340:	4b27      	ldr	r3, [pc, #156]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f003 030c 	and.w	r3, r3, #12
 8004348:	2b08      	cmp	r3, #8
 800434a:	d102      	bne.n	8004352 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800434c:	4b26      	ldr	r3, [pc, #152]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	e03e      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004352:	4b23      	ldr	r3, [pc, #140]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b0c      	cmp	r3, #12
 800435c:	d136      	bne.n	80043cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800435e:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004368:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	091b      	lsrs	r3, r3, #4
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	3301      	adds	r3, #1
 8004374:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d10c      	bne.n	8004396 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800437c:	4a1a      	ldr	r2, [pc, #104]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	4a16      	ldr	r2, [pc, #88]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004386:	68d2      	ldr	r2, [r2, #12]
 8004388:	0a12      	lsrs	r2, r2, #8
 800438a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	617b      	str	r3, [r7, #20]
      break;
 8004394:	e00c      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004396:	4a13      	ldr	r2, [pc, #76]	@ (80043e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	fbb2 f3f3 	udiv	r3, r2, r3
 800439e:	4a10      	ldr	r2, [pc, #64]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043a0:	68d2      	ldr	r2, [r2, #12]
 80043a2:	0a12      	lsrs	r2, r2, #8
 80043a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043a8:	fb02 f303 	mul.w	r3, r2, r3
 80043ac:	617b      	str	r3, [r7, #20]
      break;
 80043ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	0e5b      	lsrs	r3, r3, #25
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	3301      	adds	r3, #1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	e001      	b.n	80043d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043d0:	693b      	ldr	r3, [r7, #16]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	016e3600 	.word	0x016e3600

080043ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b03      	ldr	r3, [pc, #12]	@ (8004400 <HAL_RCC_GetHCLKFreq+0x14>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000000 	.word	0x20000000

08004404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004408:	f7ff fff0 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4904      	ldr	r1, [pc, #16]	@ (800442c <HAL_RCC_GetPCLK1Freq+0x28>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	40021000 	.word	0x40021000
 800442c:	080063d8 	.word	0x080063d8

08004430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004434:	f7ff ffda 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004438:	4602      	mov	r2, r0
 800443a:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	0adb      	lsrs	r3, r3, #11
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	4904      	ldr	r1, [pc, #16]	@ (8004458 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004446:	5ccb      	ldrb	r3, [r1, r3]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40021000 	.word	0x40021000
 8004458:	080063d8 	.word	0x080063d8

0800445c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800446c:	4b1b      	ldr	r3, [pc, #108]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	3301      	adds	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d10c      	bne.n	800449a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004480:	4a17      	ldr	r2, [pc, #92]	@ (80044e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	4a14      	ldr	r2, [pc, #80]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800448a:	68d2      	ldr	r2, [r2, #12]
 800448c:	0a12      	lsrs	r2, r2, #8
 800448e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	617b      	str	r3, [r7, #20]
    break;
 8004498:	e00c      	b.n	80044b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800449a:	4a12      	ldr	r2, [pc, #72]	@ (80044e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a2:	4a0e      	ldr	r2, [pc, #56]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044a4:	68d2      	ldr	r2, [r2, #12]
 80044a6:	0a12      	lsrs	r2, r2, #8
 80044a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044ac:	fb02 f303 	mul.w	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]
    break;
 80044b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044b4:	4b09      	ldr	r3, [pc, #36]	@ (80044dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	0e5b      	lsrs	r3, r3, #25
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	3301      	adds	r3, #1
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80044ce:	687b      	ldr	r3, [r7, #4]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40021000 	.word	0x40021000
 80044e0:	016e3600 	.word	0x016e3600
 80044e4:	00f42400 	.word	0x00f42400

080044e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80044f0:	2300      	movs	r3, #0
 80044f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80044f4:	2300      	movs	r3, #0
 80044f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 8098 	beq.w	8004636 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004506:	2300      	movs	r3, #0
 8004508:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450a:	4b43      	ldr	r3, [pc, #268]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10d      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004516:	4b40      	ldr	r3, [pc, #256]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	4a3f      	ldr	r2, [pc, #252]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800451c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004520:	6593      	str	r3, [r2, #88]	@ 0x58
 8004522:	4b3d      	ldr	r3, [pc, #244]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800452a:	60bb      	str	r3, [r7, #8]
 800452c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452e:	2301      	movs	r3, #1
 8004530:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004532:	4b3a      	ldr	r3, [pc, #232]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a39      	ldr	r2, [pc, #228]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800453c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800453e:	f7fc fd6b 	bl	8001018 <HAL_GetTick>
 8004542:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004544:	e009      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004546:	f7fc fd67 	bl	8001018 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d902      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	74fb      	strb	r3, [r7, #19]
        break;
 8004558:	e005      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800455a:	4b30      	ldr	r3, [pc, #192]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0ef      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004566:	7cfb      	ldrb	r3, [r7, #19]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d159      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800456c:	4b2a      	ldr	r3, [pc, #168]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004572:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004576:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01e      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	429a      	cmp	r2, r3
 8004586:	d019      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004588:	4b23      	ldr	r3, [pc, #140]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800458a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800458e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004592:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004594:	4b20      	ldr	r3, [pc, #128]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800459a:	4a1f      	ldr	r2, [pc, #124]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80045a4:	4b1c      	ldr	r3, [pc, #112]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80045b4:	4a18      	ldr	r2, [pc, #96]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d016      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c6:	f7fc fd27 	bl	8001018 <HAL_GetTick>
 80045ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045cc:	e00b      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ce:	f7fc fd23 	bl	8001018 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045dc:	4293      	cmp	r3, r2
 80045de:	d902      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	74fb      	strb	r3, [r7, #19]
            break;
 80045e4:	e006      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e6:	4b0c      	ldr	r3, [pc, #48]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ec      	beq.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10b      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fa:	4b07      	ldr	r3, [pc, #28]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004600:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004608:	4903      	ldr	r1, [pc, #12]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004610:	e008      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004612:	7cfb      	ldrb	r3, [r7, #19]
 8004614:	74bb      	strb	r3, [r7, #18]
 8004616:	e005      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004618:	40021000 	.word	0x40021000
 800461c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	7cfb      	ldrb	r3, [r7, #19]
 8004622:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004624:	7c7b      	ldrb	r3, [r7, #17]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800462a:	4ba7      	ldr	r3, [pc, #668]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462e:	4aa6      	ldr	r2, [pc, #664]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004630:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004634:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004642:	4ba1      	ldr	r3, [pc, #644]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004648:	f023 0203 	bic.w	r2, r3, #3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	499d      	ldr	r1, [pc, #628]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004664:	4b98      	ldr	r3, [pc, #608]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800466a:	f023 020c 	bic.w	r2, r3, #12
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	4995      	ldr	r1, [pc, #596]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004674:	4313      	orrs	r3, r2
 8004676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004686:	4b90      	ldr	r3, [pc, #576]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	498c      	ldr	r1, [pc, #560]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046a8:	4b87      	ldr	r3, [pc, #540]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	4984      	ldr	r1, [pc, #528]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0310 	and.w	r3, r3, #16
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046ca:	4b7f      	ldr	r3, [pc, #508]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	497b      	ldr	r1, [pc, #492]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0320 	and.w	r3, r3, #32
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ec:	4b76      	ldr	r3, [pc, #472]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	4973      	ldr	r1, [pc, #460]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00a      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800470e:	4b6e      	ldr	r3, [pc, #440]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004714:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	496a      	ldr	r1, [pc, #424]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800471e:	4313      	orrs	r3, r2
 8004720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004730:	4b65      	ldr	r3, [pc, #404]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004736:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	4962      	ldr	r1, [pc, #392]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004752:	4b5d      	ldr	r3, [pc, #372]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004758:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	4959      	ldr	r1, [pc, #356]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004774:	4b54      	ldr	r3, [pc, #336]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004776:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800477a:	f023 0203 	bic.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	4951      	ldr	r1, [pc, #324]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004784:	4313      	orrs	r3, r2
 8004786:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004796:	4b4c      	ldr	r3, [pc, #304]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800479c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a4:	4948      	ldr	r1, [pc, #288]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d015      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047b8:	4b43      	ldr	r3, [pc, #268]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	4940      	ldr	r1, [pc, #256]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d6:	d105      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047d8:	4b3b      	ldr	r3, [pc, #236]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	4a3a      	ldr	r2, [pc, #232]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d015      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80047f0:	4b35      	ldr	r3, [pc, #212]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047fe:	4932      	ldr	r1, [pc, #200]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800480e:	d105      	bne.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004810:	4b2d      	ldr	r3, [pc, #180]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4a2c      	ldr	r2, [pc, #176]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004816:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800481a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d015      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004828:	4b27      	ldr	r3, [pc, #156]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	4924      	ldr	r1, [pc, #144]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004842:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004846:	d105      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004848:	4b1f      	ldr	r3, [pc, #124]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a1e      	ldr	r2, [pc, #120]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004852:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d015      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004860:	4b19      	ldr	r3, [pc, #100]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004866:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800486e:	4916      	ldr	r1, [pc, #88]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800487a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800487e:	d105      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004880:	4b11      	ldr	r3, [pc, #68]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	4a10      	ldr	r2, [pc, #64]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800488a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d019      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004898:	4b0b      	ldr	r3, [pc, #44]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	4908      	ldr	r1, [pc, #32]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048b6:	d109      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048b8:	4b03      	ldr	r3, [pc, #12]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a02      	ldr	r2, [pc, #8]	@ (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048c2:	60d3      	str	r3, [r2, #12]
 80048c4:	e002      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80048c6:	bf00      	nop
 80048c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d015      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048d8:	4b29      	ldr	r3, [pc, #164]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e6:	4926      	ldr	r1, [pc, #152]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048f6:	d105      	bne.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048f8:	4b21      	ldr	r3, [pc, #132]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	4a20      	ldr	r2, [pc, #128]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80048fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004902:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d015      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004910:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004916:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800491e:	4918      	ldr	r1, [pc, #96]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492e:	d105      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004930:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800493a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d015      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004948:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800494a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800494e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004956:	490a      	ldr	r1, [pc, #40]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004962:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004966:	d105      	bne.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004968:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a04      	ldr	r2, [pc, #16]	@ (8004980 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800496e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004972:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004974:	7cbb      	ldrb	r3, [r7, #18]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000

08004984 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e042      	b.n	8004a1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800499c:	2b00      	cmp	r3, #0
 800499e:	d106      	bne.n	80049ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7fc f95b 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2224      	movs	r2, #36	@ 0x24
 80049b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f001 f848 	bl	8005a64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fd49 	bl	800546c <UART_SetConfig>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e01b      	b.n	8004a1c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689a      	ldr	r2, [r3, #8]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f042 0201 	orr.w	r2, r2, #1
 8004a12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 f8c7 	bl	8005ba8 <UART_CheckIdleState>
 8004a1a:	4603      	mov	r3, r0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08a      	sub	sp, #40	@ 0x28
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d17b      	bne.n	8004b36 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_UART_Transmit+0x26>
 8004a44:	88fb      	ldrh	r3, [r7, #6]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e074      	b.n	8004b38 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2221      	movs	r2, #33	@ 0x21
 8004a5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a5e:	f7fc fadb 	bl	8001018 <HAL_GetTick>
 8004a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	88fa      	ldrh	r2, [r7, #6]
 8004a68:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	88fa      	ldrh	r2, [r7, #6]
 8004a70:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a7c:	d108      	bne.n	8004a90 <HAL_UART_Transmit+0x6c>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d104      	bne.n	8004a90 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	61bb      	str	r3, [r7, #24]
 8004a8e:	e003      	b.n	8004a98 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a98:	e030      	b.n	8004afc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2180      	movs	r1, #128	@ 0x80
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f001 f929 	bl	8005cfc <UART_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e03d      	b.n	8004b38 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10b      	bne.n	8004ada <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	e007      	b.n	8004aea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	781a      	ldrb	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1c8      	bne.n	8004a9a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2140      	movs	r1, #64	@ 0x40
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f001 f8f2 	bl	8005cfc <UART_WaitOnFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d005      	beq.n	8004b2a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e006      	b.n	8004b38 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e000      	b.n	8004b38 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004b36:	2302      	movs	r3, #2
  }
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3720      	adds	r7, #32
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	@ 0x28
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	f040 80b5 	bne.w	8004cc6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_UART_Receive+0x28>
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e0ad      	b.n	8004cc8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2222      	movs	r2, #34	@ 0x22
 8004b78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b82:	f7fc fa49 	bl	8001018 <HAL_GetTick>
 8004b86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	88fa      	ldrh	r2, [r7, #6]
 8004b94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_UART_Receive+0x80>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d105      	bne.n	8004bb6 <HAL_UART_Receive+0x76>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004bb0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004bb4:	e02d      	b.n	8004c12 <HAL_UART_Receive+0xd2>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	22ff      	movs	r2, #255	@ 0xff
 8004bba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004bbe:	e028      	b.n	8004c12 <HAL_UART_Receive+0xd2>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10d      	bne.n	8004be4 <HAL_UART_Receive+0xa4>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d104      	bne.n	8004bda <HAL_UART_Receive+0x9a>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	22ff      	movs	r2, #255	@ 0xff
 8004bd4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004bd8:	e01b      	b.n	8004c12 <HAL_UART_Receive+0xd2>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	227f      	movs	r2, #127	@ 0x7f
 8004bde:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004be2:	e016      	b.n	8004c12 <HAL_UART_Receive+0xd2>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bec:	d10d      	bne.n	8004c0a <HAL_UART_Receive+0xca>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d104      	bne.n	8004c00 <HAL_UART_Receive+0xc0>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	227f      	movs	r2, #127	@ 0x7f
 8004bfa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004bfe:	e008      	b.n	8004c12 <HAL_UART_Receive+0xd2>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	223f      	movs	r2, #63	@ 0x3f
 8004c04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004c08:	e003      	b.n	8004c12 <HAL_UART_Receive+0xd2>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004c18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c22:	d108      	bne.n	8004c36 <HAL_UART_Receive+0xf6>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d104      	bne.n	8004c36 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	e003      	b.n	8004c3e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004c3e:	e036      	b.n	8004cae <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	9300      	str	r3, [sp, #0]
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2200      	movs	r2, #0
 8004c48:	2120      	movs	r1, #32
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f001 f856 	bl	8005cfc <UART_WaitOnFlagUntilTimeout>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d005      	beq.n	8004c62 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e032      	b.n	8004cc8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d10c      	bne.n	8004c82 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	8a7b      	ldrh	r3, [r7, #18]
 8004c72:	4013      	ands	r3, r2
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	61bb      	str	r3, [r7, #24]
 8004c80:	e00c      	b.n	8004c9c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	8a7b      	ldrh	r3, [r7, #18]
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	4013      	ands	r3, r2
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1c2      	bne.n	8004c40 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
  }
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b08a      	sub	sp, #40	@ 0x28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	d167      	bne.n	8004db8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_UART_Transmit_DMA+0x24>
 8004cee:	88fb      	ldrh	r3, [r7, #6]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e060      	b.n	8004dba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	88fa      	ldrh	r2, [r7, #6]
 8004d02:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	88fa      	ldrh	r2, [r7, #6]
 8004d0a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2221      	movs	r2, #33	@ 0x21
 8004d1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d028      	beq.n	8004d78 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d2a:	4a26      	ldr	r2, [pc, #152]	@ (8004dc4 <HAL_UART_Transmit_DMA+0xf4>)
 8004d2c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d32:	4a25      	ldr	r2, [pc, #148]	@ (8004dc8 <HAL_UART_Transmit_DMA+0xf8>)
 8004d34:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d3a:	4a24      	ldr	r2, [pc, #144]	@ (8004dcc <HAL_UART_Transmit_DMA+0xfc>)
 8004d3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d42:	2200      	movs	r2, #0
 8004d44:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4e:	4619      	mov	r1, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3328      	adds	r3, #40	@ 0x28
 8004d56:	461a      	mov	r2, r3
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	f7fc fb43 	bl	80013e4 <HAL_DMA_Start_IT>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d009      	beq.n	8004d78 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2210      	movs	r2, #16
 8004d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e020      	b.n	8004dba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2240      	movs	r2, #64	@ 0x40
 8004d7e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3308      	adds	r3, #8
 8004d86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3308      	adds	r3, #8
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da0:	623a      	str	r2, [r7, #32]
 8004da2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	69f9      	ldr	r1, [r7, #28]
 8004da6:	6a3a      	ldr	r2, [r7, #32]
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3728      	adds	r7, #40	@ 0x28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	08005f25 	.word	0x08005f25
 8004dc8:	08005fbf 	.word	0x08005fbf
 8004dcc:	08005fdb 	.word	0x08005fdb

08004dd0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b0ba      	sub	sp, #232	@ 0xe8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004df6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004dfa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004dfe:	4013      	ands	r3, r2
 8004e00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d11b      	bne.n	8004e44 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d015      	beq.n	8004e44 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d105      	bne.n	8004e30 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004e24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d009      	beq.n	8004e44 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 82e3 	beq.w	8005400 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
      }
      return;
 8004e42:	e2dd      	b.n	8005400 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f000 8123 	beq.w	8005094 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e52:	4b8d      	ldr	r3, [pc, #564]	@ (8005088 <HAL_UART_IRQHandler+0x2b8>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004e5a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004e5e:	4b8b      	ldr	r3, [pc, #556]	@ (800508c <HAL_UART_IRQHandler+0x2bc>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8116 	beq.w	8005094 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d011      	beq.n	8004e98 <HAL_UART_IRQHandler+0xc8>
 8004e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00b      	beq.n	8004e98 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2201      	movs	r2, #1
 8004e86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e8e:	f043 0201 	orr.w	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d011      	beq.n	8004ec8 <HAL_UART_IRQHandler+0xf8>
 8004ea4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00b      	beq.n	8004ec8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	f043 0204 	orr.w	r2, r3, #4
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d011      	beq.n	8004ef8 <HAL_UART_IRQHandler+0x128>
 8004ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ed8:	f003 0301 	and.w	r3, r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00b      	beq.n	8004ef8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eee:	f043 0202 	orr.w	r2, r3, #2
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d017      	beq.n	8004f34 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f08:	f003 0320 	and.w	r3, r3, #32
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d105      	bne.n	8004f1c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004f10:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004f14:	4b5c      	ldr	r3, [pc, #368]	@ (8005088 <HAL_UART_IRQHandler+0x2b8>)
 8004f16:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00b      	beq.n	8004f34 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2208      	movs	r2, #8
 8004f22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2a:	f043 0208 	orr.w	r2, r3, #8
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d012      	beq.n	8004f66 <HAL_UART_IRQHandler+0x196>
 8004f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00c      	beq.n	8004f66 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5c:	f043 0220 	orr.w	r2, r3, #32
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8249 	beq.w	8005404 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d013      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f82:	f003 0320 	and.w	r3, r3, #32
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fba:	2b40      	cmp	r3, #64	@ 0x40
 8004fbc:	d005      	beq.n	8004fca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fc2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d054      	beq.n	8005074 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 ff44 	bl	8005e58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fda:	2b40      	cmp	r3, #64	@ 0x40
 8004fdc:	d146      	bne.n	800506c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	3308      	adds	r3, #8
 8004fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	3308      	adds	r3, #8
 8005006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800500a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800500e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1d9      	bne.n	8004fde <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005030:	2b00      	cmp	r3, #0
 8005032:	d017      	beq.n	8005064 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503a:	4a15      	ldr	r2, [pc, #84]	@ (8005090 <HAL_UART_IRQHandler+0x2c0>)
 800503c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005044:	4618      	mov	r0, r3
 8005046:	f7fc faa1 	bl	800158c <HAL_DMA_Abort_IT>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d019      	beq.n	8005084 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800505e:	4610      	mov	r0, r2
 8005060:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005062:	e00f      	b.n	8005084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f9eb 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800506a:	e00b      	b.n	8005084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9e7 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005072:	e007      	b.n	8005084 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f9e3 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005082:	e1bf      	b.n	8005404 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	bf00      	nop
    return;
 8005086:	e1bd      	b.n	8005404 <HAL_UART_IRQHandler+0x634>
 8005088:	10000001 	.word	0x10000001
 800508c:	04000120 	.word	0x04000120
 8005090:	0800605b 	.word	0x0800605b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 8153 	bne.w	8005344 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800509e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f000 814c 	beq.w	8005344 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80050ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8145 	beq.w	8005344 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2210      	movs	r2, #16
 80050c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050cc:	2b40      	cmp	r3, #64	@ 0x40
 80050ce:	f040 80bb 	bne.w	8005248 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 818f 	beq.w	8005408 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80050f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050f4:	429a      	cmp	r2, r3
 80050f6:	f080 8187 	bcs.w	8005408 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005100:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0320 	and.w	r3, r3, #32
 8005112:	2b00      	cmp	r3, #0
 8005114:	f040 8087 	bne.w	8005226 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005124:	e853 3f00 	ldrex	r3, [r3]
 8005128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800512c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005134:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005142:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005146:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800514e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800515a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1da      	bne.n	8005118 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3308      	adds	r3, #8
 8005168:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005172:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3308      	adds	r3, #8
 8005182:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005186:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800518a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800518e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005192:	e841 2300 	strex	r3, r2, [r1]
 8005196:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005198:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1e1      	bne.n	8005162 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3308      	adds	r3, #8
 80051a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80051ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3308      	adds	r3, #8
 80051be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051ca:	e841 2300 	strex	r3, r2, [r1]
 80051ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1e3      	bne.n	800519e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ec:	e853 3f00 	ldrex	r3, [r3]
 80051f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051f4:	f023 0310 	bic.w	r3, r3, #16
 80051f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005206:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005208:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800520c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e4      	bne.n	80051e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005220:	4618      	mov	r0, r3
 8005222:	f7fc f95a 	bl	80014da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005238:	b29b      	uxth	r3, r3
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	b29b      	uxth	r3, r3
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f907 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005246:	e0df      	b.n	8005408 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005254:	b29b      	uxth	r3, r3
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	f000 80d1 	beq.w	800540c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800526a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 80cc 	beq.w	800540c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005288:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005296:	647b      	str	r3, [r7, #68]	@ 0x44
 8005298:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800529c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e4      	bne.n	8005274 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3308      	adds	r3, #8
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	e853 3f00 	ldrex	r3, [r3]
 80052b8:	623b      	str	r3, [r7, #32]
   return(result);
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052c0:	f023 0301 	bic.w	r3, r3, #1
 80052c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3308      	adds	r3, #8
 80052ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052d2:	633a      	str	r2, [r7, #48]	@ 0x30
 80052d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052da:	e841 2300 	strex	r3, r2, [r1]
 80052de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1e1      	bne.n	80052aa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2220      	movs	r2, #32
 80052ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	60fb      	str	r3, [r7, #12]
   return(result);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0310 	bic.w	r3, r3, #16
 800530e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	69b9      	ldr	r1, [r7, #24]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	617b      	str	r3, [r7, #20]
   return(result);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e4      	bne.n	80052fa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005336:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f889 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005342:	e063      	b.n	800540c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005348:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00e      	beq.n	800536e <HAL_UART_IRQHandler+0x59e>
 8005350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005354:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005364:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 feb8 	bl	80060dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800536c:	e051      	b.n	8005412 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005376:	2b00      	cmp	r3, #0
 8005378:	d014      	beq.n	80053a4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800537a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800537e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800538a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d008      	beq.n	80053a4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005396:	2b00      	cmp	r3, #0
 8005398:	d03a      	beq.n	8005410 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	4798      	blx	r3
    }
    return;
 80053a2:	e035      	b.n	8005410 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <HAL_UART_IRQHandler+0x5f4>
 80053b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fe62 	bl	8006086 <UART_EndTransmit_IT>
    return;
 80053c2:	e026      	b.n	8005412 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80053c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d009      	beq.n	80053e4 <HAL_UART_IRQHandler+0x614>
 80053d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fe91 	bl	8006104 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053e2:	e016      	b.n	8005412 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80053e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d010      	beq.n	8005412 <HAL_UART_IRQHandler+0x642>
 80053f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	da0c      	bge.n	8005412 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fe79 	bl	80060f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80053fe:	e008      	b.n	8005412 <HAL_UART_IRQHandler+0x642>
      return;
 8005400:	bf00      	nop
 8005402:	e006      	b.n	8005412 <HAL_UART_IRQHandler+0x642>
    return;
 8005404:	bf00      	nop
 8005406:	e004      	b.n	8005412 <HAL_UART_IRQHandler+0x642>
      return;
 8005408:	bf00      	nop
 800540a:	e002      	b.n	8005412 <HAL_UART_IRQHandler+0x642>
      return;
 800540c:	bf00      	nop
 800540e:	e000      	b.n	8005412 <HAL_UART_IRQHandler+0x642>
    return;
 8005410:	bf00      	nop
  }
}
 8005412:	37e8      	adds	r7, #232	@ 0xe8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800546c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005470:	b08c      	sub	sp, #48	@ 0x30
 8005472:	af00      	add	r7, sp, #0
 8005474:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	431a      	orrs	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	431a      	orrs	r2, r3
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	4313      	orrs	r3, r2
 8005492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4baa      	ldr	r3, [pc, #680]	@ (8005744 <UART_SetConfig+0x2d8>)
 800549c:	4013      	ands	r3, r2
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054a4:	430b      	orrs	r3, r1
 80054a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a9f      	ldr	r2, [pc, #636]	@ (8005748 <UART_SetConfig+0x2dc>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054d4:	4313      	orrs	r3, r2
 80054d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80054e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80054ec:	430b      	orrs	r3, r1
 80054ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	f023 010f 	bic.w	r1, r3, #15
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a90      	ldr	r2, [pc, #576]	@ (800574c <UART_SetConfig+0x2e0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d125      	bne.n	800555c <UART_SetConfig+0xf0>
 8005510:	4b8f      	ldr	r3, [pc, #572]	@ (8005750 <UART_SetConfig+0x2e4>)
 8005512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005516:	f003 0303 	and.w	r3, r3, #3
 800551a:	2b03      	cmp	r3, #3
 800551c:	d81a      	bhi.n	8005554 <UART_SetConfig+0xe8>
 800551e:	a201      	add	r2, pc, #4	@ (adr r2, 8005524 <UART_SetConfig+0xb8>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005535 	.word	0x08005535
 8005528:	08005545 	.word	0x08005545
 800552c:	0800553d 	.word	0x0800553d
 8005530:	0800554d 	.word	0x0800554d
 8005534:	2301      	movs	r3, #1
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553a:	e116      	b.n	800576a <UART_SetConfig+0x2fe>
 800553c:	2302      	movs	r3, #2
 800553e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005542:	e112      	b.n	800576a <UART_SetConfig+0x2fe>
 8005544:	2304      	movs	r3, #4
 8005546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554a:	e10e      	b.n	800576a <UART_SetConfig+0x2fe>
 800554c:	2308      	movs	r3, #8
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005552:	e10a      	b.n	800576a <UART_SetConfig+0x2fe>
 8005554:	2310      	movs	r3, #16
 8005556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800555a:	e106      	b.n	800576a <UART_SetConfig+0x2fe>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a7c      	ldr	r2, [pc, #496]	@ (8005754 <UART_SetConfig+0x2e8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d138      	bne.n	80055d8 <UART_SetConfig+0x16c>
 8005566:	4b7a      	ldr	r3, [pc, #488]	@ (8005750 <UART_SetConfig+0x2e4>)
 8005568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800556c:	f003 030c 	and.w	r3, r3, #12
 8005570:	2b0c      	cmp	r3, #12
 8005572:	d82d      	bhi.n	80055d0 <UART_SetConfig+0x164>
 8005574:	a201      	add	r2, pc, #4	@ (adr r2, 800557c <UART_SetConfig+0x110>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055b1 	.word	0x080055b1
 8005580:	080055d1 	.word	0x080055d1
 8005584:	080055d1 	.word	0x080055d1
 8005588:	080055d1 	.word	0x080055d1
 800558c:	080055c1 	.word	0x080055c1
 8005590:	080055d1 	.word	0x080055d1
 8005594:	080055d1 	.word	0x080055d1
 8005598:	080055d1 	.word	0x080055d1
 800559c:	080055b9 	.word	0x080055b9
 80055a0:	080055d1 	.word	0x080055d1
 80055a4:	080055d1 	.word	0x080055d1
 80055a8:	080055d1 	.word	0x080055d1
 80055ac:	080055c9 	.word	0x080055c9
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055b6:	e0d8      	b.n	800576a <UART_SetConfig+0x2fe>
 80055b8:	2302      	movs	r3, #2
 80055ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055be:	e0d4      	b.n	800576a <UART_SetConfig+0x2fe>
 80055c0:	2304      	movs	r3, #4
 80055c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055c6:	e0d0      	b.n	800576a <UART_SetConfig+0x2fe>
 80055c8:	2308      	movs	r3, #8
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ce:	e0cc      	b.n	800576a <UART_SetConfig+0x2fe>
 80055d0:	2310      	movs	r3, #16
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d6:	e0c8      	b.n	800576a <UART_SetConfig+0x2fe>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005758 <UART_SetConfig+0x2ec>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d125      	bne.n	800562e <UART_SetConfig+0x1c2>
 80055e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005750 <UART_SetConfig+0x2e4>)
 80055e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80055ec:	2b30      	cmp	r3, #48	@ 0x30
 80055ee:	d016      	beq.n	800561e <UART_SetConfig+0x1b2>
 80055f0:	2b30      	cmp	r3, #48	@ 0x30
 80055f2:	d818      	bhi.n	8005626 <UART_SetConfig+0x1ba>
 80055f4:	2b20      	cmp	r3, #32
 80055f6:	d00a      	beq.n	800560e <UART_SetConfig+0x1a2>
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d814      	bhi.n	8005626 <UART_SetConfig+0x1ba>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <UART_SetConfig+0x19a>
 8005600:	2b10      	cmp	r3, #16
 8005602:	d008      	beq.n	8005616 <UART_SetConfig+0x1aa>
 8005604:	e00f      	b.n	8005626 <UART_SetConfig+0x1ba>
 8005606:	2300      	movs	r3, #0
 8005608:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800560c:	e0ad      	b.n	800576a <UART_SetConfig+0x2fe>
 800560e:	2302      	movs	r3, #2
 8005610:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005614:	e0a9      	b.n	800576a <UART_SetConfig+0x2fe>
 8005616:	2304      	movs	r3, #4
 8005618:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800561c:	e0a5      	b.n	800576a <UART_SetConfig+0x2fe>
 800561e:	2308      	movs	r3, #8
 8005620:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005624:	e0a1      	b.n	800576a <UART_SetConfig+0x2fe>
 8005626:	2310      	movs	r3, #16
 8005628:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562c:	e09d      	b.n	800576a <UART_SetConfig+0x2fe>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a4a      	ldr	r2, [pc, #296]	@ (800575c <UART_SetConfig+0x2f0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d125      	bne.n	8005684 <UART_SetConfig+0x218>
 8005638:	4b45      	ldr	r3, [pc, #276]	@ (8005750 <UART_SetConfig+0x2e4>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005642:	2bc0      	cmp	r3, #192	@ 0xc0
 8005644:	d016      	beq.n	8005674 <UART_SetConfig+0x208>
 8005646:	2bc0      	cmp	r3, #192	@ 0xc0
 8005648:	d818      	bhi.n	800567c <UART_SetConfig+0x210>
 800564a:	2b80      	cmp	r3, #128	@ 0x80
 800564c:	d00a      	beq.n	8005664 <UART_SetConfig+0x1f8>
 800564e:	2b80      	cmp	r3, #128	@ 0x80
 8005650:	d814      	bhi.n	800567c <UART_SetConfig+0x210>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d002      	beq.n	800565c <UART_SetConfig+0x1f0>
 8005656:	2b40      	cmp	r3, #64	@ 0x40
 8005658:	d008      	beq.n	800566c <UART_SetConfig+0x200>
 800565a:	e00f      	b.n	800567c <UART_SetConfig+0x210>
 800565c:	2300      	movs	r3, #0
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005662:	e082      	b.n	800576a <UART_SetConfig+0x2fe>
 8005664:	2302      	movs	r3, #2
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800566a:	e07e      	b.n	800576a <UART_SetConfig+0x2fe>
 800566c:	2304      	movs	r3, #4
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005672:	e07a      	b.n	800576a <UART_SetConfig+0x2fe>
 8005674:	2308      	movs	r3, #8
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800567a:	e076      	b.n	800576a <UART_SetConfig+0x2fe>
 800567c:	2310      	movs	r3, #16
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005682:	e072      	b.n	800576a <UART_SetConfig+0x2fe>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a35      	ldr	r2, [pc, #212]	@ (8005760 <UART_SetConfig+0x2f4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d12a      	bne.n	80056e4 <UART_SetConfig+0x278>
 800568e:	4b30      	ldr	r3, [pc, #192]	@ (8005750 <UART_SetConfig+0x2e4>)
 8005690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005694:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800569c:	d01a      	beq.n	80056d4 <UART_SetConfig+0x268>
 800569e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056a2:	d81b      	bhi.n	80056dc <UART_SetConfig+0x270>
 80056a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056a8:	d00c      	beq.n	80056c4 <UART_SetConfig+0x258>
 80056aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ae:	d815      	bhi.n	80056dc <UART_SetConfig+0x270>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <UART_SetConfig+0x250>
 80056b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056b8:	d008      	beq.n	80056cc <UART_SetConfig+0x260>
 80056ba:	e00f      	b.n	80056dc <UART_SetConfig+0x270>
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056c2:	e052      	b.n	800576a <UART_SetConfig+0x2fe>
 80056c4:	2302      	movs	r3, #2
 80056c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ca:	e04e      	b.n	800576a <UART_SetConfig+0x2fe>
 80056cc:	2304      	movs	r3, #4
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056d2:	e04a      	b.n	800576a <UART_SetConfig+0x2fe>
 80056d4:	2308      	movs	r3, #8
 80056d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056da:	e046      	b.n	800576a <UART_SetConfig+0x2fe>
 80056dc:	2310      	movs	r3, #16
 80056de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e2:	e042      	b.n	800576a <UART_SetConfig+0x2fe>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a17      	ldr	r2, [pc, #92]	@ (8005748 <UART_SetConfig+0x2dc>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d13a      	bne.n	8005764 <UART_SetConfig+0x2f8>
 80056ee:	4b18      	ldr	r3, [pc, #96]	@ (8005750 <UART_SetConfig+0x2e4>)
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80056f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80056fc:	d01a      	beq.n	8005734 <UART_SetConfig+0x2c8>
 80056fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005702:	d81b      	bhi.n	800573c <UART_SetConfig+0x2d0>
 8005704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005708:	d00c      	beq.n	8005724 <UART_SetConfig+0x2b8>
 800570a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800570e:	d815      	bhi.n	800573c <UART_SetConfig+0x2d0>
 8005710:	2b00      	cmp	r3, #0
 8005712:	d003      	beq.n	800571c <UART_SetConfig+0x2b0>
 8005714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005718:	d008      	beq.n	800572c <UART_SetConfig+0x2c0>
 800571a:	e00f      	b.n	800573c <UART_SetConfig+0x2d0>
 800571c:	2300      	movs	r3, #0
 800571e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005722:	e022      	b.n	800576a <UART_SetConfig+0x2fe>
 8005724:	2302      	movs	r3, #2
 8005726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800572a:	e01e      	b.n	800576a <UART_SetConfig+0x2fe>
 800572c:	2304      	movs	r3, #4
 800572e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005732:	e01a      	b.n	800576a <UART_SetConfig+0x2fe>
 8005734:	2308      	movs	r3, #8
 8005736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800573a:	e016      	b.n	800576a <UART_SetConfig+0x2fe>
 800573c:	2310      	movs	r3, #16
 800573e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005742:	e012      	b.n	800576a <UART_SetConfig+0x2fe>
 8005744:	cfff69f3 	.word	0xcfff69f3
 8005748:	40008000 	.word	0x40008000
 800574c:	40013800 	.word	0x40013800
 8005750:	40021000 	.word	0x40021000
 8005754:	40004400 	.word	0x40004400
 8005758:	40004800 	.word	0x40004800
 800575c:	40004c00 	.word	0x40004c00
 8005760:	40005000 	.word	0x40005000
 8005764:	2310      	movs	r3, #16
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4aae      	ldr	r2, [pc, #696]	@ (8005a28 <UART_SetConfig+0x5bc>)
 8005770:	4293      	cmp	r3, r2
 8005772:	f040 8097 	bne.w	80058a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005776:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800577a:	2b08      	cmp	r3, #8
 800577c:	d823      	bhi.n	80057c6 <UART_SetConfig+0x35a>
 800577e:	a201      	add	r2, pc, #4	@ (adr r2, 8005784 <UART_SetConfig+0x318>)
 8005780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005784:	080057a9 	.word	0x080057a9
 8005788:	080057c7 	.word	0x080057c7
 800578c:	080057b1 	.word	0x080057b1
 8005790:	080057c7 	.word	0x080057c7
 8005794:	080057b7 	.word	0x080057b7
 8005798:	080057c7 	.word	0x080057c7
 800579c:	080057c7 	.word	0x080057c7
 80057a0:	080057c7 	.word	0x080057c7
 80057a4:	080057bf 	.word	0x080057bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057a8:	f7fe fe2c 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 80057ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057ae:	e010      	b.n	80057d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057b0:	4b9e      	ldr	r3, [pc, #632]	@ (8005a2c <UART_SetConfig+0x5c0>)
 80057b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057b4:	e00d      	b.n	80057d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057b6:	f7fe fdb7 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 80057ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80057bc:	e009      	b.n	80057d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80057c4:	e005      	b.n	80057d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80057d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 8130 	beq.w	8005a3a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057de:	4a94      	ldr	r2, [pc, #592]	@ (8005a30 <UART_SetConfig+0x5c4>)
 80057e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	4613      	mov	r3, r2
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	4413      	add	r3, r2
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d305      	bcc.n	800580a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	429a      	cmp	r2, r3
 8005808:	d903      	bls.n	8005812 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005810:	e113      	b.n	8005a3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	2200      	movs	r2, #0
 8005816:	60bb      	str	r3, [r7, #8]
 8005818:	60fa      	str	r2, [r7, #12]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	4a84      	ldr	r2, [pc, #528]	@ (8005a30 <UART_SetConfig+0x5c4>)
 8005820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005824:	b29b      	uxth	r3, r3
 8005826:	2200      	movs	r2, #0
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005830:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005834:	f7fa fcf0 	bl	8000218 <__aeabi_uldivmod>
 8005838:	4602      	mov	r2, r0
 800583a:	460b      	mov	r3, r1
 800583c:	4610      	mov	r0, r2
 800583e:	4619      	mov	r1, r3
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	020b      	lsls	r3, r1, #8
 800584a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800584e:	0202      	lsls	r2, r0, #8
 8005850:	6979      	ldr	r1, [r7, #20]
 8005852:	6849      	ldr	r1, [r1, #4]
 8005854:	0849      	lsrs	r1, r1, #1
 8005856:	2000      	movs	r0, #0
 8005858:	460c      	mov	r4, r1
 800585a:	4605      	mov	r5, r0
 800585c:	eb12 0804 	adds.w	r8, r2, r4
 8005860:	eb43 0905 	adc.w	r9, r3, r5
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	469a      	mov	sl, r3
 800586c:	4693      	mov	fp, r2
 800586e:	4652      	mov	r2, sl
 8005870:	465b      	mov	r3, fp
 8005872:	4640      	mov	r0, r8
 8005874:	4649      	mov	r1, r9
 8005876:	f7fa fccf 	bl	8000218 <__aeabi_uldivmod>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4613      	mov	r3, r2
 8005880:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005888:	d308      	bcc.n	800589c <UART_SetConfig+0x430>
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005890:	d204      	bcs.n	800589c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6a3a      	ldr	r2, [r7, #32]
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	e0ce      	b.n	8005a3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058a2:	e0ca      	b.n	8005a3a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058ac:	d166      	bne.n	800597c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80058ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d827      	bhi.n	8005906 <UART_SetConfig+0x49a>
 80058b6:	a201      	add	r2, pc, #4	@ (adr r2, 80058bc <UART_SetConfig+0x450>)
 80058b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058e9 	.word	0x080058e9
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	08005907 	.word	0x08005907
 80058cc:	080058f7 	.word	0x080058f7
 80058d0:	08005907 	.word	0x08005907
 80058d4:	08005907 	.word	0x08005907
 80058d8:	08005907 	.word	0x08005907
 80058dc:	080058ff 	.word	0x080058ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e0:	f7fe fd90 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 80058e4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058e6:	e014      	b.n	8005912 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e8:	f7fe fda2 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 80058ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ee:	e010      	b.n	8005912 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f0:	4b4e      	ldr	r3, [pc, #312]	@ (8005a2c <UART_SetConfig+0x5c0>)
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058f4:	e00d      	b.n	8005912 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058f6:	f7fe fd17 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 80058fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058fc:	e009      	b.n	8005912 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005904:	e005      	b.n	8005912 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005910:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8090 	beq.w	8005a3a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591e:	4a44      	ldr	r2, [pc, #272]	@ (8005a30 <UART_SetConfig+0x5c4>)
 8005920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005924:	461a      	mov	r2, r3
 8005926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005928:	fbb3 f3f2 	udiv	r3, r3, r2
 800592c:	005a      	lsls	r2, r3, #1
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	441a      	add	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	2b0f      	cmp	r3, #15
 8005944:	d916      	bls.n	8005974 <UART_SetConfig+0x508>
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800594c:	d212      	bcs.n	8005974 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f023 030f 	bic.w	r3, r3, #15
 8005956:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	085b      	lsrs	r3, r3, #1
 800595c:	b29b      	uxth	r3, r3
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	b29a      	uxth	r2, r3
 8005964:	8bfb      	ldrh	r3, [r7, #30]
 8005966:	4313      	orrs	r3, r2
 8005968:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	8bfa      	ldrh	r2, [r7, #30]
 8005970:	60da      	str	r2, [r3, #12]
 8005972:	e062      	b.n	8005a3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800597a:	e05e      	b.n	8005a3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800597c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005980:	2b08      	cmp	r3, #8
 8005982:	d828      	bhi.n	80059d6 <UART_SetConfig+0x56a>
 8005984:	a201      	add	r2, pc, #4	@ (adr r2, 800598c <UART_SetConfig+0x520>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059b9 	.word	0x080059b9
 8005994:	080059c1 	.word	0x080059c1
 8005998:	080059d7 	.word	0x080059d7
 800599c:	080059c7 	.word	0x080059c7
 80059a0:	080059d7 	.word	0x080059d7
 80059a4:	080059d7 	.word	0x080059d7
 80059a8:	080059d7 	.word	0x080059d7
 80059ac:	080059cf 	.word	0x080059cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7fe fd28 	bl	8004404 <HAL_RCC_GetPCLK1Freq>
 80059b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059b6:	e014      	b.n	80059e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b8:	f7fe fd3a 	bl	8004430 <HAL_RCC_GetPCLK2Freq>
 80059bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059be:	e010      	b.n	80059e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a2c <UART_SetConfig+0x5c0>)
 80059c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059c4:	e00d      	b.n	80059e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059c6:	f7fe fcaf 	bl	8004328 <HAL_RCC_GetSysClockFreq>
 80059ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059cc:	e009      	b.n	80059e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059d4:	e005      	b.n	80059e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059e0:	bf00      	nop
    }

    if (pclk != 0U)
 80059e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d028      	beq.n	8005a3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	4a10      	ldr	r2, [pc, #64]	@ (8005a30 <UART_SetConfig+0x5c4>)
 80059ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f2:	461a      	mov	r2, r3
 80059f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	085b      	lsrs	r3, r3, #1
 8005a00:	441a      	add	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	2b0f      	cmp	r3, #15
 8005a10:	d910      	bls.n	8005a34 <UART_SetConfig+0x5c8>
 8005a12:	6a3b      	ldr	r3, [r7, #32]
 8005a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a18:	d20c      	bcs.n	8005a34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60da      	str	r2, [r3, #12]
 8005a24:	e009      	b.n	8005a3a <UART_SetConfig+0x5ce>
 8005a26:	bf00      	nop
 8005a28:	40008000 	.word	0x40008000
 8005a2c:	00f42400 	.word	0x00f42400
 8005a30:	080063e0 	.word	0x080063e0
      }
      else
      {
        ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2201      	movs	r2, #1
 8005a46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2200      	movs	r2, #0
 8005a54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a56:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3730      	adds	r7, #48	@ 0x30
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005a64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad6:	f003 0304 	and.w	r3, r3, #4
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b1a:	f003 0320 	and.w	r3, r3, #32
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01a      	beq.n	8005b7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b62:	d10a      	bne.n	8005b7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	605a      	str	r2, [r3, #4]
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b098      	sub	sp, #96	@ 0x60
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bb8:	f7fb fa2e 	bl	8001018 <HAL_GetTick>
 8005bbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0308 	and.w	r3, r3, #8
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d12f      	bne.n	8005c2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f88e 	bl	8005cfc <UART_WaitOnFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d022      	beq.n	8005c2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bee:	e853 3f00 	ldrex	r3, [r3]
 8005bf2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e6      	bne.n	8005be6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e063      	b.n	8005cf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d149      	bne.n	8005cce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c3e:	9300      	str	r3, [sp, #0]
 8005c40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c42:	2200      	movs	r2, #0
 8005c44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f857 	bl	8005cfc <UART_WaitOnFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d03c      	beq.n	8005cce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	623b      	str	r3, [r7, #32]
   return(result);
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c72:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e6      	bne.n	8005c54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ca6:	61fa      	str	r2, [r7, #28]
 8005ca8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	69b9      	ldr	r1, [r7, #24]
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	617b      	str	r3, [r7, #20]
   return(result);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e5      	bne.n	8005c86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e012      	b.n	8005cf4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3758      	adds	r7, #88	@ 0x58
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	4613      	mov	r3, r2
 8005d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0c:	e04f      	b.n	8005dae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d04b      	beq.n	8005dae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d16:	f7fb f97f 	bl	8001018 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	69ba      	ldr	r2, [r7, #24]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d302      	bcc.n	8005d2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e04e      	b.n	8005dce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d037      	beq.n	8005dae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b80      	cmp	r3, #128	@ 0x80
 8005d42:	d034      	beq.n	8005dae <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b40      	cmp	r3, #64	@ 0x40
 8005d48:	d031      	beq.n	8005dae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f003 0308 	and.w	r3, r3, #8
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d110      	bne.n	8005d7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f879 	bl	8005e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2208      	movs	r2, #8
 8005d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	e029      	b.n	8005dce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69db      	ldr	r3, [r3, #28]
 8005d80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d88:	d111      	bne.n	8005dae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d94:	68f8      	ldr	r0, [r7, #12]
 8005d96:	f000 f85f 	bl	8005e58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e00f      	b.n	8005dce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4013      	ands	r3, r2
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	bf0c      	ite	eq
 8005dbe:	2301      	moveq	r3, #1
 8005dc0:	2300      	movne	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	79fb      	ldrb	r3, [r7, #7]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d0a0      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005dd6:	b480      	push	{r7}
 8005dd8:	b08f      	sub	sp, #60	@ 0x3c
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dfe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e6      	bne.n	8005dde <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3308      	adds	r3, #8
 8005e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	e853 3f00 	ldrex	r3, [r3]
 8005e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e30:	61ba      	str	r2, [r7, #24]
 8005e32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e34:	6979      	ldr	r1, [r7, #20]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	e841 2300 	strex	r3, r2, [r1]
 8005e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e5      	bne.n	8005e10 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005e4c:	bf00      	nop
 8005e4e:	373c      	adds	r7, #60	@ 0x3c
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b095      	sub	sp, #84	@ 0x54
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005e84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e6      	bne.n	8005e60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ea8:	f023 0301 	bic.w	r3, r3, #1
 8005eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ebc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ebe:	e841 2300 	strex	r3, r2, [r1]
 8005ec2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1e3      	bne.n	8005e92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d118      	bne.n	8005f04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f023 0310 	bic.w	r3, r3, #16
 8005ee6:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	6979      	ldr	r1, [r7, #20]
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	613b      	str	r3, [r7, #16]
   return(result);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e6      	bne.n	8005ed2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005f18:	bf00      	nop
 8005f1a:	3754      	adds	r7, #84	@ 0x54
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b090      	sub	sp, #64	@ 0x40
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f30:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d137      	bne.n	8005fb0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f42:	2200      	movs	r2, #0
 8005f44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	623b      	str	r3, [r7, #32]
   return(result);
 8005f58:	6a3b      	ldr	r3, [r7, #32]
 8005f5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f68:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e5      	bne.n	8005f48 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f9a:	61fb      	str	r3, [r7, #28]
 8005f9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	69b9      	ldr	r1, [r7, #24]
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	617b      	str	r3, [r7, #20]
   return(result);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e6      	bne.n	8005f7c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fae:	e002      	b.n	8005fb6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005fb0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005fb2:	f7ff fa31 	bl	8005418 <HAL_UART_TxCpltCallback>
}
 8005fb6:	bf00      	nop
 8005fb8:	3740      	adds	r7, #64	@ 0x40
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff fa2d 	bl	800542c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fd2:	bf00      	nop
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b086      	sub	sp, #24
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006002:	2b80      	cmp	r3, #128	@ 0x80
 8006004:	d109      	bne.n	800601a <UART_DMAError+0x40>
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b21      	cmp	r3, #33	@ 0x21
 800600a:	d106      	bne.n	800601a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	2200      	movs	r2, #0
 8006010:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006014:	6978      	ldr	r0, [r7, #20]
 8006016:	f7ff fede 	bl	8005dd6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006024:	2b40      	cmp	r3, #64	@ 0x40
 8006026:	d109      	bne.n	800603c <UART_DMAError+0x62>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2b22      	cmp	r3, #34	@ 0x22
 800602c:	d106      	bne.n	800603c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2200      	movs	r2, #0
 8006032:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006036:	6978      	ldr	r0, [r7, #20]
 8006038:	f7ff ff0e 	bl	8005e58 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006042:	f043 0210 	orr.w	r2, r3, #16
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800604c:	6978      	ldr	r0, [r7, #20]
 800604e:	f7ff f9f7 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006052:	bf00      	nop
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006066:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7ff f9e1 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800607e:	bf00      	nop
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b088      	sub	sp, #32
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	e853 3f00 	ldrex	r3, [r3]
 800609a:	60bb      	str	r3, [r7, #8]
   return(result);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	6979      	ldr	r1, [r7, #20]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	e841 2300 	strex	r3, r2, [r1]
 80060b8:	613b      	str	r3, [r7, #16]
   return(result);
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1e6      	bne.n	800608e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff f9a2 	bl	8005418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d4:	bf00      	nop
 80060d6:	3720      	adds	r7, #32
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_UARTEx_DisableFifoMode+0x16>
 800612a:	2302      	movs	r3, #2
 800612c:	e027      	b.n	800617e <HAL_UARTEx_DisableFifoMode+0x66>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2224      	movs	r2, #36	@ 0x24
 800613a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f022 0201 	bic.w	r2, r2, #1
 8006154:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800615c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2220      	movs	r2, #32
 8006170:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3714      	adds	r7, #20
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800619e:	2302      	movs	r3, #2
 80061a0:	e02d      	b.n	80061fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2224      	movs	r2, #36	@ 0x24
 80061ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0201 	bic.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	683a      	ldr	r2, [r7, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f850 	bl	8006284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800621a:	2302      	movs	r3, #2
 800621c:	e02d      	b.n	800627a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2224      	movs	r2, #36	@ 0x24
 800622a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0201 	bic.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f812 	bl	8006284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2220      	movs	r2, #32
 800626c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006290:	2b00      	cmp	r3, #0
 8006292:	d108      	bne.n	80062a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062a4:	e031      	b.n	800630a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062a6:	2308      	movs	r3, #8
 80062a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062aa:	2308      	movs	r3, #8
 80062ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	0e5b      	lsrs	r3, r3, #25
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	0f5b      	lsrs	r3, r3, #29
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062ce:	7bbb      	ldrb	r3, [r7, #14]
 80062d0:	7b3a      	ldrb	r2, [r7, #12]
 80062d2:	4911      	ldr	r1, [pc, #68]	@ (8006318 <UARTEx_SetNbDataToProcess+0x94>)
 80062d4:	5c8a      	ldrb	r2, [r1, r2]
 80062d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062da:	7b3a      	ldrb	r2, [r7, #12]
 80062dc:	490f      	ldr	r1, [pc, #60]	@ (800631c <UARTEx_SetNbDataToProcess+0x98>)
 80062de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	7b7a      	ldrb	r2, [r7, #13]
 80062f0:	4909      	ldr	r1, [pc, #36]	@ (8006318 <UARTEx_SetNbDataToProcess+0x94>)
 80062f2:	5c8a      	ldrb	r2, [r1, r2]
 80062f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80062f8:	7b7a      	ldrb	r2, [r7, #13]
 80062fa:	4908      	ldr	r1, [pc, #32]	@ (800631c <UARTEx_SetNbDataToProcess+0x98>)
 80062fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80062fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006302:	b29a      	uxth	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	080063f8 	.word	0x080063f8
 800631c:	08006400 	.word	0x08006400

08006320 <memset>:
 8006320:	4402      	add	r2, r0
 8006322:	4603      	mov	r3, r0
 8006324:	4293      	cmp	r3, r2
 8006326:	d100      	bne.n	800632a <memset+0xa>
 8006328:	4770      	bx	lr
 800632a:	f803 1b01 	strb.w	r1, [r3], #1
 800632e:	e7f9      	b.n	8006324 <memset+0x4>

08006330 <__libc_init_array>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4d0d      	ldr	r5, [pc, #52]	@ (8006368 <__libc_init_array+0x38>)
 8006334:	4c0d      	ldr	r4, [pc, #52]	@ (800636c <__libc_init_array+0x3c>)
 8006336:	1b64      	subs	r4, r4, r5
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	2600      	movs	r6, #0
 800633c:	42a6      	cmp	r6, r4
 800633e:	d109      	bne.n	8006354 <__libc_init_array+0x24>
 8006340:	4d0b      	ldr	r5, [pc, #44]	@ (8006370 <__libc_init_array+0x40>)
 8006342:	4c0c      	ldr	r4, [pc, #48]	@ (8006374 <__libc_init_array+0x44>)
 8006344:	f000 f818 	bl	8006378 <_init>
 8006348:	1b64      	subs	r4, r4, r5
 800634a:	10a4      	asrs	r4, r4, #2
 800634c:	2600      	movs	r6, #0
 800634e:	42a6      	cmp	r6, r4
 8006350:	d105      	bne.n	800635e <__libc_init_array+0x2e>
 8006352:	bd70      	pop	{r4, r5, r6, pc}
 8006354:	f855 3b04 	ldr.w	r3, [r5], #4
 8006358:	4798      	blx	r3
 800635a:	3601      	adds	r6, #1
 800635c:	e7ee      	b.n	800633c <__libc_init_array+0xc>
 800635e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006362:	4798      	blx	r3
 8006364:	3601      	adds	r6, #1
 8006366:	e7f2      	b.n	800634e <__libc_init_array+0x1e>
 8006368:	08006410 	.word	0x08006410
 800636c:	08006410 	.word	0x08006410
 8006370:	08006410 	.word	0x08006410
 8006374:	08006414 	.word	0x08006414

08006378 <_init>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	bf00      	nop
 800637c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637e:	bc08      	pop	{r3}
 8006380:	469e      	mov	lr, r3
 8006382:	4770      	bx	lr

08006384 <_fini>:
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	bf00      	nop
 8006388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638a:	bc08      	pop	{r3}
 800638c:	469e      	mov	lr, r3
 800638e:	4770      	bx	lr
