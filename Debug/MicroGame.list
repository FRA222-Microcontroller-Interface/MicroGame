
MicroGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080064a8  080064a8  000074a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006540  08006540  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006540  08006540  00007540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006548  08006548  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800654c  0800654c  0000754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006550  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000000c  0800655c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  0800655c  000082a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dcd  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223b  00000000  00000000  00018e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0001b048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a41  00000000  00000000  0001bd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002498a  00000000  00000000  0001c7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011180  00000000  00000000  0004113b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8b39  00000000  00000000  000522bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013adf4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  0013ae38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0013e47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006490 	.word	0x08006490

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006490 	.word	0x08006490

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b09c      	sub	sp, #112	@ 0x70
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fdaa 	bl	8001066 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f9bf 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fad5 	bl	8000ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fa91 	bl	8000a40 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fa45 	bl	80009ac <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000522:	f000 fa03 	bl	800092c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t newline[] = "\r\n";
 8000526:	4a64      	ldr	r2, [pc, #400]	@ (80006b8 <main+0x1b0>)
 8000528:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	4611      	mov	r1, r2
 8000530:	8019      	strh	r1, [r3, #0]
 8000532:	3302      	adds	r3, #2
 8000534:	0c12      	lsrs	r2, r2, #16
 8000536:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&hlpuart1, newline, sizeof(newline) - 1, 10);
 8000538:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800053c:	230a      	movs	r3, #10
 800053e:	2202      	movs	r2, #2
 8000540:	485e      	ldr	r0, [pc, #376]	@ (80006bc <main+0x1b4>)
 8000542:	f004 fafb 	bl	8004b3c <HAL_UART_Transmit>

  uint8_t text[] = "Enter Difficulty from 1 - 3 \r\n";
 8000546:	4b5e      	ldr	r3, [pc, #376]	@ (80006c0 <main+0x1b8>)
 8000548:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800054c:	461d      	mov	r5, r3
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000552:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000556:	c407      	stmia	r4!, {r0, r1, r2}
 8000558:	8023      	strh	r3, [r4, #0]
 800055a:	3402      	adds	r4, #2
 800055c:	0c1b      	lsrs	r3, r3, #16
 800055e:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, text, 28, 10);
 8000560:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000564:	230a      	movs	r3, #10
 8000566:	221c      	movs	r2, #28
 8000568:	4854      	ldr	r0, [pc, #336]	@ (80006bc <main+0x1b4>)
 800056a:	f004 fae7 	bl	8004b3c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (State == 0)
 800056e:	4b55      	ldr	r3, [pc, #340]	@ (80006c4 <main+0x1bc>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d103      	bne.n	800057e <main+0x76>
	  {
		  State = 1;
 8000576:	4b53      	ldr	r3, [pc, #332]	@ (80006c4 <main+0x1bc>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e111      	b.n	80007a2 <main+0x29a>
	  }

	  else if (State == 1)
 800057e:	4b51      	ldr	r3, [pc, #324]	@ (80006c4 <main+0x1bc>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d13d      	bne.n	8000602 <main+0xfa>
	  {
		  Read[4] = '\0';
 8000586:	4b50      	ldr	r3, [pc, #320]	@ (80006c8 <main+0x1c0>)
 8000588:	2200      	movs	r2, #0
 800058a:	711a      	strb	r2, [r3, #4]
		  HAL_UART_Receive(&hlpuart1, Read, 4,10);
 800058c:	230a      	movs	r3, #10
 800058e:	2204      	movs	r2, #4
 8000590:	494d      	ldr	r1, [pc, #308]	@ (80006c8 <main+0x1c0>)
 8000592:	484a      	ldr	r0, [pc, #296]	@ (80006bc <main+0x1b4>)
 8000594:	f004 fb60 	bl	8004c58 <HAL_UART_Receive>

		  uint8_t data = Read[0];
 8000598:	4b4b      	ldr	r3, [pc, #300]	@ (80006c8 <main+0x1c0>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

		  if (data == 49)
 80005a0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80005a4:	2b31      	cmp	r3, #49	@ 0x31
 80005a6:	d10b      	bne.n	80005c0 <main+0xb8>
		  {
			  Diff = 100;
 80005a8:	4b48      	ldr	r3, [pc, #288]	@ (80006cc <main+0x1c4>)
 80005aa:	2264      	movs	r2, #100	@ 0x64
 80005ac:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005ae:	4b45      	ldr	r3, [pc, #276]	@ (80006c4 <main+0x1bc>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	701a      	strb	r2, [r3, #0]
			  memset(Read, 0, sizeof(Read));
 80005b4:	2204      	movs	r2, #4
 80005b6:	2100      	movs	r1, #0
 80005b8:	4843      	ldr	r0, [pc, #268]	@ (80006c8 <main+0x1c0>)
 80005ba:	f005 ff3d 	bl	8006438 <memset>
 80005be:	e0f0      	b.n	80007a2 <main+0x29a>
		  }

		  else if (data == 50)
 80005c0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80005c4:	2b32      	cmp	r3, #50	@ 0x32
 80005c6:	d10b      	bne.n	80005e0 <main+0xd8>
		  {
			  Diff = 50;
 80005c8:	4b40      	ldr	r3, [pc, #256]	@ (80006cc <main+0x1c4>)
 80005ca:	2232      	movs	r2, #50	@ 0x32
 80005cc:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005ce:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <main+0x1bc>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	701a      	strb	r2, [r3, #0]
			  memset(Read, 0, sizeof(Read));
 80005d4:	2204      	movs	r2, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	483b      	ldr	r0, [pc, #236]	@ (80006c8 <main+0x1c0>)
 80005da:	f005 ff2d 	bl	8006438 <memset>
 80005de:	e0e0      	b.n	80007a2 <main+0x29a>
		  }

		  else if (data == 51)
 80005e0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80005e4:	2b33      	cmp	r3, #51	@ 0x33
 80005e6:	f040 80dc 	bne.w	80007a2 <main+0x29a>
		  {
			  Diff = 10;
 80005ea:	4b38      	ldr	r3, [pc, #224]	@ (80006cc <main+0x1c4>)
 80005ec:	220a      	movs	r2, #10
 80005ee:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005f0:	4b34      	ldr	r3, [pc, #208]	@ (80006c4 <main+0x1bc>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	701a      	strb	r2, [r3, #0]
			  memset(Read, 0, sizeof(Read));
 80005f6:	2204      	movs	r2, #4
 80005f8:	2100      	movs	r1, #0
 80005fa:	4833      	ldr	r0, [pc, #204]	@ (80006c8 <main+0x1c0>)
 80005fc:	f005 ff1c 	bl	8006438 <memset>
 8000600:	e0cf      	b.n	80007a2 <main+0x29a>
		  }
	  }

	  else if (State == 2)
 8000602:	4b30      	ldr	r3, [pc, #192]	@ (80006c4 <main+0x1bc>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b02      	cmp	r3, #2
 8000608:	f040 80cb 	bne.w	80007a2 <main+0x29a>
	  {

		  for (int i = 1; i < 10; i++)
 800060c:	2301      	movs	r3, #1
 800060e:	667b      	str	r3, [r7, #100]	@ 0x64
 8000610:	e0c3      	b.n	800079a <main+0x292>
		  {
			  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == RESET && stop == 0)
 8000612:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000616:	482e      	ldr	r0, [pc, #184]	@ (80006d0 <main+0x1c8>)
 8000618:	f001 fb8a 	bl	8001d30 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d107      	bne.n	8000632 <main+0x12a>
 8000622:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <main+0x1cc>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d103      	bne.n	8000632 <main+0x12a>
			  {
				  stop = 1;
 800062a:	4b2a      	ldr	r3, [pc, #168]	@ (80006d4 <main+0x1cc>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	e0b0      	b.n	8000794 <main+0x28c>
			  }

			  else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == SET && stop == 1)
 8000632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000636:	4826      	ldr	r0, [pc, #152]	@ (80006d0 <main+0x1c8>)
 8000638:	f001 fb7a 	bl	8001d30 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	d114      	bne.n	800066c <main+0x164>
 8000642:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <main+0x1cc>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d110      	bne.n	800066c <main+0x164>
			  {
				  slot_mem[index] = slot;
 800064a:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <main+0x1d0>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <main+0x1d4>)
 8000652:	7819      	ldrb	r1, [r3, #0]
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <main+0x1d8>)
 8000656:	5499      	strb	r1, [r3, r2]
				  stop = 0;
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <main+0x1cc>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
				  index++;
 800065e:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <main+0x1d0>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <main+0x1d0>)
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e093      	b.n	8000794 <main+0x28c>
			  }

			  else if (index == 3)
 800066c:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <main+0x1d0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d103      	bne.n	800067c <main+0x174>
			  {
				  State = 3;
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <main+0x1bc>)
 8000676:	2203      	movs	r2, #3
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e08b      	b.n	8000794 <main+0x28c>
			  }

			  else
			  {
				  if (index == 0)
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <main+0x1d0>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10c      	bne.n	800069e <main+0x196>
				  {
					  slot_mem[0] = i;
 8000684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <main+0x1d8>)
 800068a:	701a      	strb	r2, [r3, #0]
					  slot_mem[1] = i;
 800068c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <main+0x1d8>)
 8000692:	705a      	strb	r2, [r3, #1]
					  slot_mem[2] = i;
 8000694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <main+0x1d8>)
 800069a:	709a      	strb	r2, [r3, #2]
 800069c:	e02a      	b.n	80006f4 <main+0x1ec>
				  }
				  else if (index == 1)
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <main+0x1d0>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d11e      	bne.n	80006e4 <main+0x1dc>
				  {
					  slot_mem[1] = i;
 80006a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <main+0x1d8>)
 80006ac:	705a      	strb	r2, [r3, #1]
					  slot_mem[2] = i;
 80006ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <main+0x1d8>)
 80006b4:	709a      	strb	r2, [r3, #2]
 80006b6:	e01d      	b.n	80006f4 <main+0x1ec>
 80006b8:	080064a8 	.word	0x080064a8
 80006bc:	2000013c 	.word	0x2000013c
 80006c0:	080064ac 	.word	0x080064ac
 80006c4:	20000294 	.word	0x20000294
 80006c8:	20000290 	.word	0x20000290
 80006cc:	20000295 	.word	0x20000295
 80006d0:	48000800 	.word	0x48000800
 80006d4:	20000296 	.word	0x20000296
 80006d8:	20000297 	.word	0x20000297
 80006dc:	2000029f 	.word	0x2000029f
 80006e0:	200002a0 	.word	0x200002a0
				  }
				  else if (index == 2)
 80006e4:	4b5f      	ldr	r3, [pc, #380]	@ (8000864 <main+0x35c>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d103      	bne.n	80006f4 <main+0x1ec>
				  {
					  slot_mem[2] = i;
 80006ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b5d      	ldr	r3, [pc, #372]	@ (8000868 <main+0x360>)
 80006f2:	709a      	strb	r2, [r3, #2]
				  }

				  slot = i;
 80006f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b5c      	ldr	r3, [pc, #368]	@ (800086c <main+0x364>)
 80006fa:	701a      	strb	r2, [r3, #0]
				  uint8_t data;

				  data = slot_mem[0] + '0';
 80006fc:	4b5a      	ldr	r3, [pc, #360]	@ (8000868 <main+0x360>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	3330      	adds	r3, #48	@ 0x30
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				  HAL_UART_Transmit(&hlpuart1, &data, sizeof(data), 10);
 8000708:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 800070c:	230a      	movs	r3, #10
 800070e:	2201      	movs	r2, #1
 8000710:	4857      	ldr	r0, [pc, #348]	@ (8000870 <main+0x368>)
 8000712:	f004 fa13 	bl	8004b3c <HAL_UART_Transmit>
				  uint8_t tab[] = "\t";
 8000716:	2309      	movs	r3, #9
 8000718:	87bb      	strh	r3, [r7, #60]	@ 0x3c
				  HAL_UART_Transmit(&hlpuart1, tab, 1, 10);
 800071a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800071e:	230a      	movs	r3, #10
 8000720:	2201      	movs	r2, #1
 8000722:	4853      	ldr	r0, [pc, #332]	@ (8000870 <main+0x368>)
 8000724:	f004 fa0a 	bl	8004b3c <HAL_UART_Transmit>

				  data = slot_mem[1] + '0';
 8000728:	4b4f      	ldr	r3, [pc, #316]	@ (8000868 <main+0x360>)
 800072a:	785b      	ldrb	r3, [r3, #1]
 800072c:	3330      	adds	r3, #48	@ 0x30
 800072e:	b2db      	uxtb	r3, r3
 8000730:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				  HAL_UART_Transmit(&hlpuart1, &data, sizeof(data), 10);
 8000734:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8000738:	230a      	movs	r3, #10
 800073a:	2201      	movs	r2, #1
 800073c:	484c      	ldr	r0, [pc, #304]	@ (8000870 <main+0x368>)
 800073e:	f004 f9fd 	bl	8004b3c <HAL_UART_Transmit>
				  HAL_UART_Transmit(&hlpuart1, tab, 1, 10);
 8000742:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000746:	230a      	movs	r3, #10
 8000748:	2201      	movs	r2, #1
 800074a:	4849      	ldr	r0, [pc, #292]	@ (8000870 <main+0x368>)
 800074c:	f004 f9f6 	bl	8004b3c <HAL_UART_Transmit>

				  data = slot_mem[2] + '0';
 8000750:	4b45      	ldr	r3, [pc, #276]	@ (8000868 <main+0x360>)
 8000752:	789b      	ldrb	r3, [r3, #2]
 8000754:	3330      	adds	r3, #48	@ 0x30
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				  HAL_UART_Transmit(&hlpuart1, &data, sizeof(data), 10);
 800075c:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8000760:	230a      	movs	r3, #10
 8000762:	2201      	movs	r2, #1
 8000764:	4842      	ldr	r0, [pc, #264]	@ (8000870 <main+0x368>)
 8000766:	f004 f9e9 	bl	8004b3c <HAL_UART_Transmit>

				  uint8_t newline[] = "\r\n";
 800076a:	4a42      	ldr	r2, [pc, #264]	@ (8000874 <main+0x36c>)
 800076c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	4611      	mov	r1, r2
 8000774:	8019      	strh	r1, [r3, #0]
 8000776:	3302      	adds	r3, #2
 8000778:	0c12      	lsrs	r2, r2, #16
 800077a:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&hlpuart1, newline, sizeof(newline) - 1, 10);
 800077c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000780:	230a      	movs	r3, #10
 8000782:	2202      	movs	r2, #2
 8000784:	483a      	ldr	r0, [pc, #232]	@ (8000870 <main+0x368>)
 8000786:	f004 f9d9 	bl	8004b3c <HAL_UART_Transmit>
				  HAL_Delay(Diff);
 800078a:	4b3b      	ldr	r3, [pc, #236]	@ (8000878 <main+0x370>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fcda 	bl	8001148 <HAL_Delay>
		  for (int i = 1; i < 10; i++)
 8000794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000796:	3301      	adds	r3, #1
 8000798:	667b      	str	r3, [r7, #100]	@ 0x64
 800079a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800079c:	2b09      	cmp	r3, #9
 800079e:	f77f af38 	ble.w	8000612 <main+0x10a>
			  }
		  }
	  }

	  if (index == 3 && State == 3)
 80007a2:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <main+0x35c>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d119      	bne.n	80007de <main+0x2d6>
 80007aa:	4b34      	ldr	r3, [pc, #208]	@ (800087c <main+0x374>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d115      	bne.n	80007de <main+0x2d6>
	  {
		  if (hi2c1.State == HAL_I2C_STATE_READY)
 80007b2:	4b33      	ldr	r3, [pc, #204]	@ (8000880 <main+0x378>)
 80007b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b20      	cmp	r3, #32
 80007bc:	d109      	bne.n	80007d2 <main+0x2ca>
		  {
			  HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT, slot_mem, 3);
 80007be:	2303      	movs	r3, #3
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <main+0x360>)
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2302      	movs	r3, #2
 80007c8:	222c      	movs	r2, #44	@ 0x2c
 80007ca:	21a0      	movs	r1, #160	@ 0xa0
 80007cc:	482c      	ldr	r0, [pc, #176]	@ (8000880 <main+0x378>)
 80007ce:	f001 fb9d 	bl	8001f0c <HAL_I2C_Mem_Write_IT>
		  }

	  	  index = 0;
 80007d2:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <main+0x35c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
	  	  Check = 1;
 80007d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <main+0x37c>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
  	  }

	  if (Check == 1)
 80007de:	4b29      	ldr	r3, [pc, #164]	@ (8000884 <main+0x37c>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	f47f aec3 	bne.w	800056e <main+0x66>
	  {
		  if (hi2c1.State == HAL_I2C_STATE_READY)
 80007e8:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <main+0x378>)
 80007ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	2b20      	cmp	r3, #32
 80007f2:	d109      	bne.n	8000808 <main+0x300>
		  {
			  HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT, memRead, 3);
 80007f4:	2303      	movs	r3, #3
 80007f6:	9301      	str	r3, [sp, #4]
 80007f8:	4b23      	ldr	r3, [pc, #140]	@ (8000888 <main+0x380>)
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	2302      	movs	r3, #2
 80007fe:	222c      	movs	r2, #44	@ 0x2c
 8000800:	21a0      	movs	r1, #160	@ 0xa0
 8000802:	481f      	ldr	r0, [pc, #124]	@ (8000880 <main+0x378>)
 8000804:	f001 fc0c 	bl	8002020 <HAL_I2C_Mem_Read_IT>
	  	  }

		  if (memRead[0] == memRead[1] && memRead[0] == memRead[2])
 8000808:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <main+0x380>)
 800080a:	781a      	ldrb	r2, [r3, #0]
 800080c:	4b1e      	ldr	r3, [pc, #120]	@ (8000888 <main+0x380>)
 800080e:	785b      	ldrb	r3, [r3, #1]
 8000810:	429a      	cmp	r2, r3
 8000812:	d113      	bne.n	800083c <main+0x334>
 8000814:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <main+0x380>)
 8000816:	781a      	ldrb	r2, [r3, #0]
 8000818:	4b1b      	ldr	r3, [pc, #108]	@ (8000888 <main+0x380>)
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	429a      	cmp	r2, r3
 800081e:	d10d      	bne.n	800083c <main+0x334>
		  {
			  uint8_t text[] = "You're Winner!!";
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <main+0x384>)
 8000822:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  HAL_UART_Transmit_DMA(&hlpuart1, text, sizeof(text));
 800082c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000830:	2210      	movs	r2, #16
 8000832:	4619      	mov	r1, r3
 8000834:	480e      	ldr	r0, [pc, #56]	@ (8000870 <main+0x368>)
 8000836:	f004 fad7 	bl	8004de8 <HAL_UART_Transmit_DMA>
		  {
 800083a:	e00e      	b.n	800085a <main+0x352>
		  }
		  else
		  {
			  uint8_t text[] = "Try Again!! -- Press Reset Button";
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <main+0x388>)
 800083e:	1d3c      	adds	r4, r7, #4
 8000840:	461d      	mov	r5, r3
 8000842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084a:	682b      	ldr	r3, [r5, #0]
 800084c:	8023      	strh	r3, [r4, #0]
			  HAL_UART_Transmit_DMA(&hlpuart1, text, sizeof(text));
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2222      	movs	r2, #34	@ 0x22
 8000852:	4619      	mov	r1, r3
 8000854:	4806      	ldr	r0, [pc, #24]	@ (8000870 <main+0x368>)
 8000856:	f004 fac7 	bl	8004de8 <HAL_UART_Transmit_DMA>
		  }
		  Check = 0;
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <main+0x37c>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
	  if (State == 0)
 8000860:	e685      	b.n	800056e <main+0x66>
 8000862:	bf00      	nop
 8000864:	20000297 	.word	0x20000297
 8000868:	200002a0 	.word	0x200002a0
 800086c:	2000029f 	.word	0x2000029f
 8000870:	2000013c 	.word	0x2000013c
 8000874:	080064a8 	.word	0x080064a8
 8000878:	20000295 	.word	0x20000295
 800087c:	20000294 	.word	0x20000294
 8000880:	20000028 	.word	0x20000028
 8000884:	20000298 	.word	0x20000298
 8000888:	2000029c 	.word	0x2000029c
 800088c:	080064cc 	.word	0x080064cc
 8000890:	080064dc 	.word	0x080064dc

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	@ 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0318 	add.w	r3, r7, #24
 800089e:	2238      	movs	r2, #56	@ 0x38
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 fdc8 	bl	8006438 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f003 f8c0 	bl	8003a3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c6:	2340      	movs	r3, #64	@ 0x40
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ca:	2302      	movs	r3, #2
 80008cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008d6:	2355      	movs	r3, #85	@ 0x55
 80008d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0318 	add.w	r3, r7, #24
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 f95a 	bl	8003ba4 <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008f6:	f000 f953 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2303      	movs	r3, #3
 8000900:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2104      	movs	r1, #4
 8000912:	4618      	mov	r0, r3
 8000914:	f003 fc58 	bl	80041c8 <HAL_RCC_ClockConfig>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800091e:	f000 f93f 	bl	8000ba0 <Error_Handler>
  }
}
 8000922:	bf00      	nop
 8000924:	3750      	adds	r7, #80	@ 0x50
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
	...

0800092c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000932:	4a1c      	ldr	r2, [pc, #112]	@ (80009a4 <MX_I2C1_Init+0x78>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000938:	4a1b      	ldr	r2, [pc, #108]	@ (80009a8 <MX_I2C1_Init+0x7c>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000944:	2201      	movs	r2, #1
 8000946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <MX_I2C1_Init+0x74>)
 8000968:	f001 fa35 	bl	8001dd6 <HAL_I2C_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000972:	f000 f915 	bl	8000ba0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000976:	2100      	movs	r1, #0
 8000978:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800097a:	f002 ffc7 	bl	800390c <HAL_I2CEx_ConfigAnalogFilter>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000984:	f000 f90c 	bl	8000ba0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000988:	2100      	movs	r1, #0
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_I2C1_Init+0x74>)
 800098c:	f003 f809 	bl	80039a2 <HAL_I2CEx_ConfigDigitalFilter>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000996:	f000 f903 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000028 	.word	0x20000028
 80009a4:	40005400 	.word	0x40005400
 80009a8:	30a0a7fb 	.word	0x30a0a7fb

080009ac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009b0:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009b2:	4a22      	ldr	r2, [pc, #136]	@ (8000a3c <MX_LPUART1_UART_Init+0x90>)
 80009b4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 80009b6:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009b8:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80009bc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009be:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009d0:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009d2:	220c      	movs	r2, #12
 80009d4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009dc:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e8:	4b13      	ldr	r3, [pc, #76]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009ee:	4812      	ldr	r0, [pc, #72]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 80009f0:	f004 f854 	bl	8004a9c <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009fa:	f000 f8d1 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fe:	2100      	movs	r1, #0
 8000a00:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 8000a02:	f005 fc4e 	bl	80062a2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a0c:	f000 f8c8 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	4809      	ldr	r0, [pc, #36]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 8000a14:	f005 fc83 	bl	800631e <HAL_UARTEx_SetRxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a1e:	f000 f8bf 	bl	8000ba0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_LPUART1_UART_Init+0x8c>)
 8000a24:	f005 fc04 	bl	8006230 <HAL_UARTEx_DisableFifoMode>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a2e:	f000 f8b7 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000013c 	.word	0x2000013c
 8000a3c:	40008000 	.word	0x40008000

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <MX_DMA_Init+0x80>)
 8000a48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <MX_DMA_Init+0x80>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_DMA_Init+0x80>)
 8000a54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_DMA_Init+0x80>)
 8000a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a62:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <MX_DMA_Init+0x80>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <MX_DMA_Init+0x80>)
 8000a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	200b      	movs	r0, #11
 8000a7c:	f000 fc61 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a80:	200b      	movs	r0, #11
 8000a82:	f000 fc78 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	200c      	movs	r0, #12
 8000a8c:	f000 fc59 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a90:	200c      	movs	r0, #12
 8000a92:	f000 fc70 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	200d      	movs	r0, #13
 8000a9c:	f000 fc51 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000aa0:	200d      	movs	r0, #13
 8000aa2:	f000 fc68 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	200e      	movs	r0, #14
 8000aac:	f000 fc49 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ab0:	200e      	movs	r0, #14
 8000ab2:	f000 fc60 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ada:	4b2f      	ldr	r3, [pc, #188]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	4a2e      	ldr	r2, [pc, #184]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af2:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a28      	ldr	r2, [pc, #160]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000af8:	f043 0320 	orr.w	r3, r3, #32
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4b26      	ldr	r3, [pc, #152]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0320 	and.w	r3, r3, #32
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	4b23      	ldr	r3, [pc, #140]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4a22      	ldr	r2, [pc, #136]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4b20      	ldr	r3, [pc, #128]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	4a1c      	ldr	r2, [pc, #112]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <MX_GPIO_Init+0xd4>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f001 f90d 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <MX_GPIO_Init+0xd8>)
 8000b5e:	f000 ff65 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b62:	2320      	movs	r3, #32
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7c:	f000 ff56 	bl	8001a2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2100      	movs	r1, #0
 8000b84:	2028      	movs	r0, #40	@ 0x28
 8000b86:	f000 fbdc 	bl	8001342 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b8a:	2028      	movs	r0, #40	@ 0x28
 8000b8c:	f000 fbf3 	bl	8001376 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b90:	bf00      	nop
 8000b92:	3728      	adds	r7, #40	@ 0x28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	48000800 	.word	0x48000800

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <Error_Handler+0x8>

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bce:	4a08      	ldr	r2, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_MspInit+0x44>)
 8000bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000be2:	f002 ffcf 	bl	8003b84 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09e      	sub	sp, #120	@ 0x78
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c0c:	f107 0310 	add.w	r3, r7, #16
 8000c10:	2254      	movs	r2, #84	@ 0x54
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f005 fc0f 	bl	8006438 <memset>
  if(hi2c->Instance==I2C1)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a50      	ldr	r2, [pc, #320]	@ (8000d60 <HAL_I2C_MspInit+0x16c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	f040 8099 	bne.w	8000d58 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c26:	2340      	movs	r3, #64	@ 0x40
 8000c28:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fce4 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c3e:	f7ff ffaf 	bl	8000ba0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b48      	ldr	r3, [pc, #288]	@ (8000d64 <HAL_I2C_MspInit+0x170>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	4a47      	ldr	r2, [pc, #284]	@ (8000d64 <HAL_I2C_MspInit+0x170>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4e:	4b45      	ldr	r3, [pc, #276]	@ (8000d64 <HAL_I2C_MspInit+0x170>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c5e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c60:	2312      	movs	r3, #18
 8000c62:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c74:	4619      	mov	r1, r3
 8000c76:	483c      	ldr	r0, [pc, #240]	@ (8000d68 <HAL_I2C_MspInit+0x174>)
 8000c78:	f000 fed8 	bl	8001a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7c:	4b39      	ldr	r3, [pc, #228]	@ (8000d64 <HAL_I2C_MspInit+0x170>)
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c80:	4a38      	ldr	r2, [pc, #224]	@ (8000d64 <HAL_I2C_MspInit+0x170>)
 8000c82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c88:	4b36      	ldr	r3, [pc, #216]	@ (8000d64 <HAL_I2C_MspInit+0x170>)
 8000c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000c94:	4b35      	ldr	r3, [pc, #212]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000c96:	4a36      	ldr	r2, [pc, #216]	@ (8000d70 <HAL_I2C_MspInit+0x17c>)
 8000c98:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000c9a:	4b34      	ldr	r3, [pc, #208]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000c9c:	2210      	movs	r2, #16
 8000c9e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca0:	4b32      	ldr	r3, [pc, #200]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca6:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cac:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000cae:	2280      	movs	r2, #128	@ 0x80
 8000cb0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc4:	4b29      	ldr	r3, [pc, #164]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000cca:	4828      	ldr	r0, [pc, #160]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000ccc:	f000 fb6e 	bl	80013ac <HAL_DMA_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000cd6:	f7ff ff63 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ce0:	4a22      	ldr	r2, [pc, #136]	@ (8000d6c <HAL_I2C_MspInit+0x178>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000ce6:	4b23      	ldr	r3, [pc, #140]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000ce8:	4a23      	ldr	r2, [pc, #140]	@ (8000d78 <HAL_I2C_MspInit+0x184>)
 8000cea:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000cec:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000cee:	2211      	movs	r2, #17
 8000cf0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cf2:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000d00:	2280      	movs	r2, #128	@ 0x80
 8000d02:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d10:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d16:	4b17      	ldr	r3, [pc, #92]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d1c:	4815      	ldr	r0, [pc, #84]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000d1e:	f000 fb45 	bl	80013ac <HAL_DMA_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000d28:	f7ff ff3a 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a11      	ldr	r2, [pc, #68]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000d30:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d32:	4a10      	ldr	r2, [pc, #64]	@ (8000d74 <HAL_I2C_MspInit+0x180>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	201f      	movs	r0, #31
 8000d3e:	f000 fb00 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d42:	201f      	movs	r0, #31
 8000d44:	f000 fb17 	bl	8001376 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2020      	movs	r0, #32
 8000d4e:	f000 faf8 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d52:	2020      	movs	r0, #32
 8000d54:	f000 fb0f 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3778      	adds	r7, #120	@ 0x78
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40005400 	.word	0x40005400
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	2000007c 	.word	0x2000007c
 8000d70:	40020008 	.word	0x40020008
 8000d74:	200000dc 	.word	0x200000dc
 8000d78:	4002001c 	.word	0x4002001c

08000d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b09e      	sub	sp, #120	@ 0x78
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2254      	movs	r2, #84	@ 0x54
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f005 fb4b 	bl	8006438 <memset>
  if(huart->Instance==LPUART1)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a4d      	ldr	r2, [pc, #308]	@ (8000edc <HAL_UART_MspInit+0x160>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	f040 8092 	bne.w	8000ed2 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dae:	2320      	movs	r3, #32
 8000db0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f003 fc20 	bl	8004600 <HAL_RCCEx_PeriphCLKConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dc6:	f7ff feeb 	bl	8000ba0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dca:	4b45      	ldr	r3, [pc, #276]	@ (8000ee0 <HAL_UART_MspInit+0x164>)
 8000dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dce:	4a44      	ldr	r2, [pc, #272]	@ (8000ee0 <HAL_UART_MspInit+0x164>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000dd6:	4b42      	ldr	r3, [pc, #264]	@ (8000ee0 <HAL_UART_MspInit+0x164>)
 8000dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee0 <HAL_UART_MspInit+0x164>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee0 <HAL_UART_MspInit+0x164>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee0 <HAL_UART_MspInit+0x164>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e12:	4619      	mov	r1, r3
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e18:	f000 fe08 	bl	8001a2c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000e1c:	4b31      	ldr	r3, [pc, #196]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e1e:	4a32      	ldr	r2, [pc, #200]	@ (8000ee8 <HAL_UART_MspInit+0x16c>)
 8000e20:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000e22:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e24:	2222      	movs	r2, #34	@ 0x22
 8000e26:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e36:	2280      	movs	r2, #128	@ 0x80
 8000e38:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e40:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e46:	4b27      	ldr	r3, [pc, #156]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e48:	2220      	movs	r2, #32
 8000e4a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000e52:	4824      	ldr	r0, [pc, #144]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e54:	f000 faaa 	bl	80013ac <HAL_DMA_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000e5e:	f7ff fe9f 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee4 <HAL_UART_MspInit+0x168>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8000e70:	4b1e      	ldr	r3, [pc, #120]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000e72:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef0 <HAL_UART_MspInit+0x174>)
 8000e74:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000e78:	2223      	movs	r2, #35	@ 0x23
 8000e7a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000e7e:	2210      	movs	r2, #16
 8000e80:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e88:	4b18      	ldr	r3, [pc, #96]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000e8a:	2280      	movs	r2, #128	@ 0x80
 8000e8c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e8e:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e94:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000ea6:	4811      	ldr	r0, [pc, #68]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000ea8:	f000 fa80 	bl	80013ac <HAL_DMA_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000eb2:	f7ff fe75 	bl	8000ba0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000eba:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8000eec <HAL_UART_MspInit+0x170>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	205b      	movs	r0, #91	@ 0x5b
 8000ec8:	f000 fa3b 	bl	8001342 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000ecc:	205b      	movs	r0, #91	@ 0x5b
 8000ece:	f000 fa52 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3778      	adds	r7, #120	@ 0x78
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40008000 	.word	0x40008000
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	200001d0 	.word	0x200001d0
 8000ee8:	40020030 	.word	0x40020030
 8000eec:	20000230 	.word	0x20000230
 8000ef0:	40020044 	.word	0x40020044

08000ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <NMI_Handler+0x4>

08000efc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr

08000f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4a:	f000 f8df 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f58:	4802      	ldr	r0, [pc, #8]	@ (8000f64 <DMA1_Channel1_IRQHandler+0x10>)
 8000f5a:	f000 fc0a 	bl	8001772 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000007c 	.word	0x2000007c

08000f68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000f6c:	4802      	ldr	r0, [pc, #8]	@ (8000f78 <DMA1_Channel2_IRQHandler+0x10>)
 8000f6e:	f000 fc00 	bl	8001772 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000dc 	.word	0x200000dc

08000f7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000f80:	4802      	ldr	r0, [pc, #8]	@ (8000f8c <DMA1_Channel3_IRQHandler+0x10>)
 8000f82:	f000 fbf6 	bl	8001772 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001d0 	.word	0x200001d0

08000f90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <DMA1_Channel4_IRQHandler+0x10>)
 8000f96:	f000 fbec 	bl	8001772 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000230 	.word	0x20000230

08000fa4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <I2C1_EV_IRQHandler+0x10>)
 8000faa:	f001 f8bf 	bl	800212c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000028 	.word	0x20000028

08000fb8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <I2C1_ER_IRQHandler+0x10>)
 8000fbe:	f001 f8cf 	bl	8002160 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000028 	.word	0x20000028

08000fcc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fd0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fd4:	f000 fedc 	bl	8001d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	@ (8000fec <LPUART1_IRQHandler+0x10>)
 8000fe2:	f003 ff81 	bl	8004ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000013c 	.word	0x2000013c

08000ff0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	@ (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	@ (800104c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001018:	f7ff ffea 	bl	8000ff0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800101c:	480c      	ldr	r0, [pc, #48]	@ (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001020:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <LoopForever+0xe>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001024:	e002      	b.n	800102c <LoopCopyDataInit>

08001026 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001026:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001028:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102a:	3304      	adds	r3, #4

0800102c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800102c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001030:	d3f9      	bcc.n	8001026 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001034:	4c0a      	ldr	r4, [pc, #40]	@ (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001038:	e001      	b.n	800103e <LoopFillZerobss>

0800103a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800103c:	3204      	adds	r2, #4

0800103e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001040:	d3fb      	bcc.n	800103a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001042:	f005 fa01 	bl	8006448 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001046:	f7ff fa5f 	bl	8000508 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   r0, =_estack
 800104c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001058:	08006550 	.word	0x08006550
  ldr r2, =_sbss
 800105c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001060:	200002a8 	.word	0x200002a8

08001064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_2_IRQHandler>

08001066 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001070:	2003      	movs	r0, #3
 8001072:	f000 f95b 	bl	800132c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001076:	2000      	movs	r0, #0
 8001078:	f000 f80e 	bl	8001098 <HAL_InitTick>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	e001      	b.n	800108c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001088:	f7ff fd90 	bl	8000bac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800108c:	79fb      	ldrb	r3, [r7, #7]

}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <HAL_InitTick+0x68>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d022      	beq.n	80010f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_InitTick+0x6c>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <HAL_InitTick+0x68>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f966 	bl	8001392 <HAL_SYSTICK_Config>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d10f      	bne.n	80010ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	d809      	bhi.n	80010e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d2:	2200      	movs	r2, #0
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	f04f 30ff 	mov.w	r0, #4294967295
 80010da:	f000 f932 	bl	8001342 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <HAL_InitTick+0x70>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e007      	b.n	80010f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e004      	b.n	80010f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e001      	b.n	80010f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000008 	.word	0x20000008
 8001104:	20000000 	.word	0x20000000
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <HAL_IncTick+0x1c>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x20>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4413      	add	r3, r2
 800111a:	4a03      	ldr	r2, [pc, #12]	@ (8001128 <HAL_IncTick+0x1c>)
 800111c:	6013      	str	r3, [r2, #0]
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	200002a4 	.word	0x200002a4
 800112c:	20000008 	.word	0x20000008

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200002a4 	.word	0x200002a4

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d004      	beq.n	800116c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_Delay+0x40>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4413      	add	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116c:	bf00      	nop
 800116e:	f7ff ffdf 	bl	8001130 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	429a      	cmp	r2, r3
 800117c:	d8f7      	bhi.n	800116e <HAL_Delay+0x26>
  {
  }
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20000008 	.word	0x20000008

0800118c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <__NVIC_SetPriorityGrouping+0x44>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <__NVIC_GetPriorityGrouping+0x18>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	0a1b      	lsrs	r3, r3, #8
 80011de:	f003 0307 	and.w	r3, r3, #7
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db0b      	blt.n	800121a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	f003 021f 	and.w	r2, r3, #31
 8001208:	4907      	ldr	r1, [pc, #28]	@ (8001228 <__NVIC_EnableIRQ+0x38>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	095b      	lsrs	r3, r3, #5
 8001210:	2001      	movs	r0, #1
 8001212:	fa00 f202 	lsl.w	r2, r0, r2
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000e100 	.word	0xe000e100

0800122c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123c:	2b00      	cmp	r3, #0
 800123e:	db0a      	blt.n	8001256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	490c      	ldr	r1, [pc, #48]	@ (8001278 <__NVIC_SetPriority+0x4c>)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	0112      	lsls	r2, r2, #4
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	440b      	add	r3, r1
 8001250:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001254:	e00a      	b.n	800126c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4908      	ldr	r1, [pc, #32]	@ (800127c <__NVIC_SetPriority+0x50>)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	f003 030f 	and.w	r3, r3, #15
 8001262:	3b04      	subs	r3, #4
 8001264:	0112      	lsls	r2, r2, #4
 8001266:	b2d2      	uxtb	r2, r2
 8001268:	440b      	add	r3, r1
 800126a:	761a      	strb	r2, [r3, #24]
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b480      	push	{r7}
 8001282:	b089      	sub	sp, #36	@ 0x24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f1c3 0307 	rsb	r3, r3, #7
 800129a:	2b04      	cmp	r3, #4
 800129c:	bf28      	it	cs
 800129e:	2304      	movcs	r3, #4
 80012a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3304      	adds	r3, #4
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d902      	bls.n	80012b0 <NVIC_EncodePriority+0x30>
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3b03      	subs	r3, #3
 80012ae:	e000      	b.n	80012b2 <NVIC_EncodePriority+0x32>
 80012b0:	2300      	movs	r3, #0
 80012b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b4:	f04f 32ff 	mov.w	r2, #4294967295
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c8:	f04f 31ff 	mov.w	r1, #4294967295
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa01 f303 	lsl.w	r3, r1, r3
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d8:	4313      	orrs	r3, r2
         );
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3724      	adds	r7, #36	@ 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f8:	d301      	bcc.n	80012fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00f      	b.n	800131e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <SysTick_Config+0x40>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3b01      	subs	r3, #1
 8001304:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001306:	210f      	movs	r1, #15
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f7ff ff8e 	bl	800122c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001310:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <SysTick_Config+0x40>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <SysTick_Config+0x40>)
 8001318:	2207      	movs	r2, #7
 800131a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	e000e010 	.word	0xe000e010

0800132c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff ff29 	bl	800118c <__NVIC_SetPriorityGrouping>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff40 	bl	80011d4 <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff90 	bl	8001280 <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5f 	bl	800122c <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff33 	bl	80011f0 <__NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffa4 	bl	80012e8 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e08d      	b.n	80014da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b47      	ldr	r3, [pc, #284]	@ (80014e4 <HAL_DMA_Init+0x138>)
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d80f      	bhi.n	80013ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b45      	ldr	r3, [pc, #276]	@ (80014e8 <HAL_DMA_Init+0x13c>)
 80013d2:	4413      	add	r3, r2
 80013d4:	4a45      	ldr	r2, [pc, #276]	@ (80014ec <HAL_DMA_Init+0x140>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	009a      	lsls	r2, r3, #2
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a42      	ldr	r2, [pc, #264]	@ (80014f0 <HAL_DMA_Init+0x144>)
 80013e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013e8:	e00e      	b.n	8001408 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	4b40      	ldr	r3, [pc, #256]	@ (80014f4 <HAL_DMA_Init+0x148>)
 80013f2:	4413      	add	r3, r2
 80013f4:	4a3d      	ldr	r2, [pc, #244]	@ (80014ec <HAL_DMA_Init+0x140>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	009a      	lsls	r2, r3, #2
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a3c      	ldr	r2, [pc, #240]	@ (80014f8 <HAL_DMA_Init+0x14c>)
 8001406:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2202      	movs	r2, #2
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800141e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001422:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 fa84 	bl	8001968 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001468:	d102      	bne.n	8001470 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001484:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d010      	beq.n	80014b0 <HAL_DMA_Init+0x104>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b04      	cmp	r3, #4
 8001494:	d80c      	bhi.n	80014b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 faa4 	bl	80019e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	e008      	b.n	80014c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40020407 	.word	0x40020407
 80014e8:	bffdfff8 	.word	0xbffdfff8
 80014ec:	cccccccd 	.word	0xcccccccd
 80014f0:	40020000 	.word	0x40020000
 80014f4:	bffdfbf8 	.word	0xbffdfbf8
 80014f8:	40020400 	.word	0x40020400

080014fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <HAL_DMA_Start_IT+0x20>
 8001518:	2302      	movs	r3, #2
 800151a:	e066      	b.n	80015ea <HAL_DMA_Start_IT+0xee>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d155      	bne.n	80015dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2202      	movs	r2, #2
 8001534:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	68f8      	ldr	r0, [r7, #12]
 8001556:	f000 f9c9 	bl	80018ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	2b00      	cmp	r3, #0
 8001560:	d008      	beq.n	8001574 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 020e 	orr.w	r2, r2, #14
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e00f      	b.n	8001594 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0204 	bic.w	r2, r2, #4
 8001582:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f042 020a 	orr.w	r2, r2, #10
 8001592:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e005      	b.n	80015e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015e4:	2302      	movs	r3, #2
 80015e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d005      	beq.n	8001616 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2204      	movs	r2, #4
 800160e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e037      	b.n	8001686 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 020e 	bic.w	r2, r2, #14
 8001624:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001630:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001634:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f003 021f 	and.w	r2, r3, #31
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	2101      	movs	r1, #1
 8001654:	fa01 f202 	lsl.w	r2, r1, r2
 8001658:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001662:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00c      	beq.n	8001686 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001676:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800167a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001684:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d00d      	beq.n	80016d8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2204      	movs	r2, #4
 80016c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	e047      	b.n	8001768 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 020e 	bic.w	r2, r2, #14
 80016e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0201 	bic.w	r2, r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001702:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	f003 021f 	and.w	r2, r3, #31
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	2101      	movs	r1, #1
 8001716:	fa01 f202 	lsl.w	r2, r1, r2
 800171a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001724:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001738:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800173c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001746:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
    }
  }
  return status;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f003 031f 	and.w	r3, r3, #31
 8001792:	2204      	movs	r2, #4
 8001794:	409a      	lsls	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	4013      	ands	r3, r2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d026      	beq.n	80017ec <HAL_DMA_IRQHandler+0x7a>
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d021      	beq.n	80017ec <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0320 	and.w	r3, r3, #32
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d107      	bne.n	80017c6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0204 	bic.w	r2, r2, #4
 80017c4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	f003 021f 	and.w	r2, r3, #31
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	2104      	movs	r1, #4
 80017d4:	fa01 f202 	lsl.w	r2, r1, r2
 80017d8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d071      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017ea:	e06c      	b.n	80018c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	f003 031f 	and.w	r3, r3, #31
 80017f4:	2202      	movs	r2, #2
 80017f6:	409a      	lsls	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d02e      	beq.n	800185e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d029      	beq.n	800185e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10b      	bne.n	8001830 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 020a 	bic.w	r2, r2, #10
 8001826:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001834:	f003 021f 	and.w	r2, r3, #31
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	2102      	movs	r1, #2
 800183e:	fa01 f202 	lsl.w	r2, r1, r2
 8001842:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001850:	2b00      	cmp	r3, #0
 8001852:	d038      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800185c:	e033      	b.n	80018c6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f003 031f 	and.w	r3, r3, #31
 8001866:	2208      	movs	r2, #8
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d02a      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d025      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 020e 	bic.w	r2, r2, #14
 800188a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	2101      	movs	r1, #1
 800189a:	fa01 f202 	lsl.w	r2, r1, r2
 800189e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018c6:	bf00      	nop
 80018c8:	bf00      	nop
}
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018de:	b2db      	uxtb	r3, r3
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001902:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001914:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191a:	f003 021f 	and.w	r2, r3, #31
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b10      	cmp	r3, #16
 8001938:	d108      	bne.n	800194c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800194a:	e007      	b.n	800195c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68ba      	ldr	r2, [r7, #8]
 8001952:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	60da      	str	r2, [r3, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b16      	ldr	r3, [pc, #88]	@ (80019d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001978:	429a      	cmp	r2, r3
 800197a:	d802      	bhi.n	8001982 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800197c:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	e001      	b.n	8001986 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001982:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001984:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b2db      	uxtb	r3, r3
 8001990:	3b08      	subs	r3, #8
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001994:	fba2 2303 	umull	r2, r3, r2, r3
 8001998:	091b      	lsrs	r3, r3, #4
 800199a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	009a      	lsls	r2, r3, #2
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4413      	add	r3, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a0b      	ldr	r2, [pc, #44]	@ (80019e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2201      	movs	r2, #1
 80019bc:	409a      	lsls	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80019c2:	bf00      	nop
 80019c4:	371c      	adds	r7, #28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40020407 	.word	0x40020407
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020820 	.word	0x40020820
 80019dc:	cccccccd 	.word	0xcccccccd
 80019e0:	40020880 	.word	0x40020880

080019e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019f8:	4413      	add	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	461a      	mov	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a08      	ldr	r2, [pc, #32]	@ (8001a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a06:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2201      	movs	r2, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	1000823f 	.word	0x1000823f
 8001a28:	40020940 	.word	0x40020940

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b087      	sub	sp, #28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a3a:	e15a      	b.n	8001cf2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2101      	movs	r1, #1
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 814c 	beq.w	8001cec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d005      	beq.n	8001a6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d130      	bne.n	8001ace <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	f003 0201 	and.w	r2, r3, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d017      	beq.n	8001b0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0303 	and.w	r3, r3, #3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d123      	bne.n	8001b5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	08da      	lsrs	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3208      	adds	r2, #8
 8001b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	08da      	lsrs	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3208      	adds	r2, #8
 8001b58:	6939      	ldr	r1, [r7, #16]
 8001b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	4013      	ands	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0203 	and.w	r2, r3, #3
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 80a6 	beq.w	8001cec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d10 <HAL_GPIO_Init+0x2e4>)
 8001ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba4:	4a5a      	ldr	r2, [pc, #360]	@ (8001d10 <HAL_GPIO_Init+0x2e4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bac:	4b58      	ldr	r3, [pc, #352]	@ (8001d10 <HAL_GPIO_Init+0x2e4>)
 8001bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bb8:	4a56      	ldr	r2, [pc, #344]	@ (8001d14 <HAL_GPIO_Init+0x2e8>)
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	220f      	movs	r2, #15
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001be2:	d01f      	beq.n	8001c24 <HAL_GPIO_Init+0x1f8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4c      	ldr	r2, [pc, #304]	@ (8001d18 <HAL_GPIO_Init+0x2ec>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d019      	beq.n	8001c20 <HAL_GPIO_Init+0x1f4>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a4b      	ldr	r2, [pc, #300]	@ (8001d1c <HAL_GPIO_Init+0x2f0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_GPIO_Init+0x1f0>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a4a      	ldr	r2, [pc, #296]	@ (8001d20 <HAL_GPIO_Init+0x2f4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00d      	beq.n	8001c18 <HAL_GPIO_Init+0x1ec>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a49      	ldr	r2, [pc, #292]	@ (8001d24 <HAL_GPIO_Init+0x2f8>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d007      	beq.n	8001c14 <HAL_GPIO_Init+0x1e8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a48      	ldr	r2, [pc, #288]	@ (8001d28 <HAL_GPIO_Init+0x2fc>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_GPIO_Init+0x1e4>
 8001c0c:	2305      	movs	r3, #5
 8001c0e:	e00a      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c10:	2306      	movs	r3, #6
 8001c12:	e008      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c14:	2304      	movs	r3, #4
 8001c16:	e006      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e004      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	e002      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_GPIO_Init+0x1fa>
 8001c24:	2300      	movs	r3, #0
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	0092      	lsls	r2, r2, #2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c36:	4937      	ldr	r1, [pc, #220]	@ (8001d14 <HAL_GPIO_Init+0x2e8>)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	3302      	adds	r3, #2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c44:	4b39      	ldr	r3, [pc, #228]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c68:	4a30      	ldr	r2, [pc, #192]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c92:	4a26      	ldr	r2, [pc, #152]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c98:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ce6:	4a11      	ldr	r2, [pc, #68]	@ (8001d2c <HAL_GPIO_Init+0x300>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f47f ae9d 	bne.w	8001a3c <HAL_GPIO_Init+0x10>
  }
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	371c      	adds	r7, #28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40010000 	.word	0x40010000
 8001d18:	48000400 	.word	0x48000400
 8001d1c:	48000800 	.word	0x48000800
 8001d20:	48000c00 	.word	0x48000c00
 8001d24:	48001000 	.word	0x48001000
 8001d28:	48001400 	.word	0x48001400
 8001d2c:	40010400 	.word	0x40010400

08001d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e001      	b.n	8001d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d70:	787b      	ldrb	r3, [r7, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d7c:	e002      	b.n	8001d84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d7e:	887a      	ldrh	r2, [r7, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d9a:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d9c:	695a      	ldr	r2, [r3, #20]
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	4013      	ands	r3, r2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001da6:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da8:	88fb      	ldrh	r3, [r7, #6]
 8001daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f806 	bl	8001dc0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e08d      	b.n	8001f04 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d106      	bne.n	8001e02 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7fe fef9 	bl	8000bf4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2224      	movs	r2, #36	@ 0x24
 8001e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e26:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e36:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	e006      	b.n	8001e5e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e5c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d108      	bne.n	8001e78 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	e007      	b.n	8001e88 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e86:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e9a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69d9      	ldr	r1, [r3, #28]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1a      	ldr	r2, [r3, #32]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af02      	add	r7, sp, #8
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	817b      	strh	r3, [r7, #10]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	813b      	strh	r3, [r7, #8]
 8001f22:	4613      	mov	r3, r2
 8001f24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d16a      	bne.n	8002008 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <HAL_I2C_Mem_Write_IT+0x32>
 8001f38:	8bbb      	ldrh	r3, [r7, #28]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e05f      	b.n	800200a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f58:	d101      	bne.n	8001f5e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	e055      	b.n	800200a <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_I2C_Mem_Write_IT+0x60>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e04e      	b.n	800200a <HAL_I2C_Mem_Write_IT+0xfe>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2221      	movs	r2, #33	@ 0x21
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2240      	movs	r2, #64	@ 0x40
 8001f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8bba      	ldrh	r2, [r7, #28]
 8001f9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002014 <HAL_I2C_Mem_Write_IT+0x108>)
 8001fa0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8002018 <HAL_I2C_Mem_Write_IT+0x10c>)
 8001fa6:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001fa8:	897a      	ldrh	r2, [r7, #10]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d109      	bne.n	8001fc8 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fb4:	893b      	ldrh	r3, [r7, #8]
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fc6:	e00b      	b.n	8001fe0 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fc8:	893b      	ldrh	r3, [r7, #8]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001fd6:	893b      	ldrh	r3, [r7, #8]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	8979      	ldrh	r1, [r7, #10]
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800201c <HAL_I2C_Mem_Write_IT+0x110>)
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f001 fb78 	bl	80036e4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f001 fba2 	bl	8003748 <I2C_Enable_IRQ>

    return HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	e000      	b.n	800200a <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002008:	2302      	movs	r3, #2
  }
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	ffff0000 	.word	0xffff0000
 8002018:	080022e9 	.word	0x080022e9
 800201c:	80002000 	.word	0x80002000

08002020 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	4608      	mov	r0, r1
 800202a:	4611      	mov	r1, r2
 800202c:	461a      	mov	r2, r3
 800202e:	4603      	mov	r3, r0
 8002030:	817b      	strh	r3, [r7, #10]
 8002032:	460b      	mov	r3, r1
 8002034:	813b      	strh	r3, [r7, #8]
 8002036:	4613      	mov	r3, r2
 8002038:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b20      	cmp	r3, #32
 8002044:	d166      	bne.n	8002114 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <HAL_I2C_Mem_Read_IT+0x32>
 800204c:	8bbb      	ldrh	r3, [r7, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d105      	bne.n	800205e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002058:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e05b      	b.n	8002116 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800206c:	d101      	bne.n	8002072 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800206e:	2302      	movs	r3, #2
 8002070:	e051      	b.n	8002116 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_I2C_Mem_Read_IT+0x60>
 800207c:	2302      	movs	r3, #2
 800207e:	e04a      	b.n	8002116 <HAL_I2C_Mem_Read_IT+0xf6>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2222      	movs	r2, #34	@ 0x22
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2240      	movs	r2, #64	@ 0x40
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8bba      	ldrh	r2, [r7, #28]
 80020a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002120 <HAL_I2C_Mem_Read_IT+0x100>)
 80020ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002124 <HAL_I2C_Mem_Read_IT+0x104>)
 80020b4:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80020b6:	897a      	ldrh	r2, [r7, #10]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d109      	bne.n	80020d6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020c2:	893b      	ldrh	r3, [r7, #8]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f04f 32ff 	mov.w	r2, #4294967295
 80020d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80020d4:	e00b      	b.n	80020ee <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020d6:	893b      	ldrh	r3, [r7, #8]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	b29b      	uxth	r3, r3
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80020e4:	893b      	ldrh	r3, [r7, #8]
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020ee:	88fb      	ldrh	r3, [r7, #6]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	8979      	ldrh	r1, [r7, #10]
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <HAL_I2C_Mem_Read_IT+0x108>)
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2300      	movs	r3, #0
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f001 faf2 	bl	80036e4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002108:	2101      	movs	r1, #1
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f001 fb1c 	bl	8003748 <I2C_Enable_IRQ>

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	ffff0000 	.word	0xffff0000
 8002124:	080022e9 	.word	0x080022e9
 8002128:	80002000 	.word	0x80002000

0800212c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	68f9      	ldr	r1, [r7, #12]
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4798      	blx	r3
  }
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00f      	beq.n	80021a2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002188:	2b00      	cmp	r3, #0
 800218a:	d00a      	beq.n	80021a2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021a0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00f      	beq.n	80021cc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ba:	f043 0208 	orr.w	r2, r3, #8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00f      	beq.n	80021f6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e4:	f043 0202 	orr.w	r2, r3, #2
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 030b 	and.w	r3, r3, #11
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f001 f911 	bl	8003430 <I2C_ITError>
  }
}
 800220e:	bf00      	nop
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	460b      	mov	r3, r1
 8002270:	70fb      	strb	r3, [r7, #3]
 8002272:	4613      	mov	r3, r2
 8002274:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80022f4:	4b8d      	ldr	r3, [pc, #564]	@ (800252c <I2C_Mem_ISR_IT+0x244>)
 80022f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <I2C_Mem_ISR_IT+0x22>
 8002306:	2302      	movs	r3, #2
 8002308:	e10c      	b.n	8002524 <I2C_Mem_ISR_IT+0x23c>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	d012      	beq.n	8002342 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00d      	beq.n	8002342 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2210      	movs	r2, #16
 800232c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002332:	f043 0204 	orr.w	r2, r3, #4
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f001 f98f 	bl	800365e <I2C_Flush_TXDR>
 8002340:	e0dd      	b.n	80024fe <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d022      	beq.n	8002392 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01d      	beq.n	8002392 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f023 0304 	bic.w	r3, r3, #4
 800235c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237a:	3b01      	subs	r3, #1
 800237c:	b29a      	uxth	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002390:	e0b5      	b.n	80024fe <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d02c      	beq.n	80023f6 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d027      	beq.n	80023f6 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ae:	d118      	bne.n	80023e2 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b4:	781a      	ldrb	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80023e0:	e08d      	b.n	80024fe <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023ea:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f04f 32ff 	mov.w	r2, #4294967295
 80023f2:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80023f4:	e083      	b.n	80024fe <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d03c      	beq.n	800247a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002406:	2b00      	cmp	r3, #0
 8002408:	d037      	beq.n	800247a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d02c      	beq.n	800246e <I2C_Mem_ISR_IT+0x186>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	d128      	bne.n	800246e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	2bff      	cmp	r3, #255	@ 0xff
 8002424:	d910      	bls.n	8002448 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	22ff      	movs	r2, #255	@ 0xff
 800242a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002430:	b299      	uxth	r1, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002436:	b2da      	uxtb	r2, r3
 8002438:	2300      	movs	r3, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f001 f94f 	bl	80036e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002446:	e017      	b.n	8002478 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	b299      	uxth	r1, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245c:	b2da      	uxtb	r2, r3
 800245e:	2300      	movs	r3, #0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f001 f93c 	bl	80036e4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800246c:	e004      	b.n	8002478 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800246e:	2140      	movs	r1, #64	@ 0x40
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 ffdd 	bl	8003430 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002476:	e042      	b.n	80024fe <I2C_Mem_ISR_IT+0x216>
 8002478:	e041      	b.n	80024fe <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002480:	2b00      	cmp	r3, #0
 8002482:	d03c      	beq.n	80024fe <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800248a:	2b00      	cmp	r3, #0
 800248c:	d037      	beq.n	80024fe <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800248e:	2101      	movs	r1, #1
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f001 f9dd 	bl	8003850 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002496:	2102      	movs	r1, #2
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f001 f955 	bl	8003748 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b22      	cmp	r3, #34	@ 0x22
 80024a8:	d101      	bne.n	80024ae <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80024aa:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <I2C_Mem_ISR_IT+0x248>)
 80024ac:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2bff      	cmp	r3, #255	@ 0xff
 80024b6:	d910      	bls.n	80024da <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	22ff      	movs	r2, #255	@ 0xff
 80024bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	b299      	uxth	r1, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f001 f906 	bl	80036e4 <I2C_TransferConfig>
 80024d8:	e011      	b.n	80024fe <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e8:	b299      	uxth	r1, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f001 f8f3 	bl	80036e4 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002512:	6939      	ldr	r1, [r7, #16]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 fd0b 	bl	8002f30 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	80002000 	.word	0x80002000
 8002530:	80002400 	.word	0x80002400

08002534 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002544:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <I2C_Slave_ISR_IT+0x24>
 8002554:	2302      	movs	r3, #2
 8002556:	e0e2      	b.n	800271e <I2C_Slave_ISR_IT+0x1ea>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002574:	6939      	ldr	r1, [r7, #16]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fda2 	bl	80030c0 <I2C_ITSlaveCplt>
 800257c:	e0ca      	b.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	2b00      	cmp	r3, #0
 8002586:	d04b      	beq.n	8002620 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800258e:	2b00      	cmp	r3, #0
 8002590:	d046      	beq.n	8002620 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d128      	bne.n	80025ee <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b28      	cmp	r3, #40	@ 0x28
 80025a6:	d108      	bne.n	80025ba <I2C_Slave_ISR_IT+0x86>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025ae:	d104      	bne.n	80025ba <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80025b0:	6939      	ldr	r1, [r7, #16]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fee8 	bl	8003388 <I2C_ITListenCplt>
 80025b8:	e031      	b.n	800261e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b29      	cmp	r3, #41	@ 0x29
 80025c4:	d10e      	bne.n	80025e4 <I2C_Slave_ISR_IT+0xb0>
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025cc:	d00a      	beq.n	80025e4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2210      	movs	r2, #16
 80025d4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f001 f841 	bl	800365e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fc4b 	bl	8002e78 <I2C_ITSlaveSeqCplt>
 80025e2:	e01c      	b.n	800261e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2210      	movs	r2, #16
 80025ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80025ec:	e08f      	b.n	800270e <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2210      	movs	r2, #16
 80025f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f043 0204 	orr.w	r2, r3, #4
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <I2C_Slave_ISR_IT+0xdc>
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800260e:	d17e      	bne.n	800270e <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002614:	4619      	mov	r1, r3
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 ff0a 	bl	8003430 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800261c:	e077      	b.n	800270e <I2C_Slave_ISR_IT+0x1da>
 800261e:	e076      	b.n	800270e <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02f      	beq.n	800268a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002630:	2b00      	cmp	r3, #0
 8002632:	d02a      	beq.n	800268a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002638:	b29b      	uxth	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d018      	beq.n	8002670 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d14b      	bne.n	8002712 <I2C_Slave_ISR_IT+0x1de>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002680:	d047      	beq.n	8002712 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fbf8 	bl	8002e78 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002688:	e043      	b.n	8002712 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d009      	beq.n	80026a8 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800269a:	2b00      	cmp	r3, #0
 800269c:	d004      	beq.n	80026a8 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800269e:	6939      	ldr	r1, [r7, #16]
 80026a0:	68f8      	ldr	r0, [r7, #12]
 80026a2:	f000 fb28 	bl	8002cf6 <I2C_ITAddrCplt>
 80026a6:	e035      	b.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d030      	beq.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d02b      	beq.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d018      	beq.n	80026f8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29a      	uxth	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80026f6:	e00d      	b.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026fe:	d002      	beq.n	8002706 <I2C_Slave_ISR_IT+0x1d2>
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d106      	bne.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fbb6 	bl	8002e78 <I2C_ITSlaveSeqCplt>
 800270c:	e002      	b.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 800270e:	bf00      	nop
 8002710:	e000      	b.n	8002714 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002712:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b088      	sub	sp, #32
 800272a:	af02      	add	r7, sp, #8
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <I2C_Master_ISR_DMA+0x1a>
 800273c:	2302      	movs	r3, #2
 800273e:	e0d9      	b.n	80028f4 <I2C_Master_ISR_DMA+0x1ce>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	2b00      	cmp	r3, #0
 8002750:	d016      	beq.n	8002780 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002758:	2b00      	cmp	r3, #0
 800275a:	d011      	beq.n	8002780 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2210      	movs	r2, #16
 8002762:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002768:	f043 0204 	orr.w	r2, r3, #4
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002770:	2120      	movs	r1, #32
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 ffe8 	bl	8003748 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 ff70 	bl	800365e <I2C_Flush_TXDR>
 800277e:	e0b4      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002786:	2b00      	cmp	r3, #0
 8002788:	d071      	beq.n	800286e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002790:	2b00      	cmp	r3, #0
 8002792:	d06c      	beq.n	800286e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027a2:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d04e      	beq.n	800284c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ba:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2bff      	cmp	r3, #255	@ 0xff
 80027c4:	d906      	bls.n	80027d4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	22ff      	movs	r2, #255	@ 0xff
 80027ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80027cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	e010      	b.n	80027f6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027e6:	d003      	beq.n	80027f0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e002      	b.n	80027f6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80027f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	8a79      	ldrh	r1, [r7, #18]
 80027fe:	2300      	movs	r3, #0
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 ff6d 	bl	80036e4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800280e:	b29a      	uxth	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	b29a      	uxth	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b22      	cmp	r3, #34	@ 0x22
 8002826:	d108      	bne.n	800283a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002836:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002838:	e057      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002848:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800284a:	e04e      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800285a:	d003      	beq.n	8002864 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 face 	bl	8002dfe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002862:	e042      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002864:	2140      	movs	r1, #64	@ 0x40
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fde2 	bl	8003430 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800286c:	e03d      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002874:	2b00      	cmp	r3, #0
 8002876:	d028      	beq.n	80028ca <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800287e:	2b00      	cmp	r3, #0
 8002880:	d023      	beq.n	80028ca <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d119      	bne.n	80028c0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002896:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800289a:	d025      	beq.n	80028e8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028a4:	d108      	bne.n	80028b8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80028b6:	e017      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 faa0 	bl	8002dfe <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80028be:	e013      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80028c0:	2140      	movs	r1, #64	@ 0x40
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fdb4 	bl	8003430 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80028c8:	e00e      	b.n	80028e8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 fb25 	bl	8002f30 <I2C_ITMasterCplt>
 80028e6:	e000      	b.n	80028ea <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80028e8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002908:	4b8d      	ldr	r3, [pc, #564]	@ (8002b40 <I2C_Mem_ISR_DMA+0x244>)
 800290a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <I2C_Mem_ISR_DMA+0x1e>
 8002916:	2302      	movs	r3, #2
 8002918:	e10e      	b.n	8002b38 <I2C_Mem_ISR_DMA+0x23c>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d016      	beq.n	800295a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002932:	2b00      	cmp	r3, #0
 8002934:	d011      	beq.n	800295a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2210      	movs	r2, #16
 800293c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800294a:	2120      	movs	r1, #32
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 fefb 	bl	8003748 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fe83 	bl	800365e <I2C_Flush_TXDR>
 8002958:	e0e9      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002976:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f04f 32ff 	mov.w	r2, #4294967295
 800297e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002980:	e0d5      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002988:	2b00      	cmp	r3, #0
 800298a:	d05f      	beq.n	8002a4c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002992:	2b00      	cmp	r3, #0
 8002994:	d05a      	beq.n	8002a4c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002996:	2101      	movs	r1, #1
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f000 ff59 	bl	8003850 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800299e:	2110      	movs	r1, #16
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 fed1 	bl	8003748 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d048      	beq.n	8002a42 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2bff      	cmp	r3, #255	@ 0xff
 80029b8:	d910      	bls.n	80029dc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	22ff      	movs	r2, #255	@ 0xff
 80029be:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c4:	b299      	uxth	r1, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	2300      	movs	r3, #0
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fe85 	bl	80036e4 <I2C_TransferConfig>
 80029da:	e011      	b.n	8002a00 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ea:	b299      	uxth	r1, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	2300      	movs	r3, #0
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fe72 	bl	80036e4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b22      	cmp	r3, #34	@ 0x22
 8002a1c:	d108      	bne.n	8002a30 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a2c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a2e:	e07e      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a3e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a40:	e075      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a42:	2140      	movs	r1, #64	@ 0x40
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 fcf3 	bl	8003430 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a4a:	e070      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d05d      	beq.n	8002b12 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d058      	beq.n	8002b12 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a60:	2101      	movs	r1, #1
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fef4 	bl	8003850 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002a68:	2110      	movs	r1, #16
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fe6c 	bl	8003748 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b22      	cmp	r3, #34	@ 0x22
 8002a7a:	d101      	bne.n	8002a80 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002a7c:	4b31      	ldr	r3, [pc, #196]	@ (8002b44 <I2C_Mem_ISR_DMA+0x248>)
 8002a7e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2bff      	cmp	r3, #255	@ 0xff
 8002a88:	d910      	bls.n	8002aac <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	22ff      	movs	r2, #255	@ 0xff
 8002a8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a94:	b299      	uxth	r1, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fe1d 	bl	80036e4 <I2C_TransferConfig>
 8002aaa:	e011      	b.n	8002ad0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aba:	b299      	uxth	r1, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fe0a 	bl	80036e4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b22      	cmp	r3, #34	@ 0x22
 8002aec:	d108      	bne.n	8002b00 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002afc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002afe:	e016      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b0e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b10:	e00d      	b.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fa01 	bl	8002f30 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	80002000 	.word	0x80002000
 8002b44:	80002400 	.word	0x80002400

08002b48 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b58:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <I2C_Slave_ISR_DMA+0x24>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e0c0      	b.n	8002cee <I2C_Slave_ISR_DMA+0x1a6>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d004      	beq.n	8002b92 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fa98 	bl	80030c0 <I2C_ITSlaveCplt>
 8002b90:	e0a8      	b.n	8002ce4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 8095 	beq.w	8002cc8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 808f 	beq.w	8002cc8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d07d      	beq.n	8002cba <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00c      	beq.n	8002be0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00c      	beq.n	8002c02 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d007      	beq.n	8002c02 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d128      	bne.n	8002c5a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b28      	cmp	r3, #40	@ 0x28
 8002c12:	d108      	bne.n	8002c26 <I2C_Slave_ISR_DMA+0xde>
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c1a:	d104      	bne.n	8002c26 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fbb2 	bl	8003388 <I2C_ITListenCplt>
 8002c24:	e048      	b.n	8002cb8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b29      	cmp	r3, #41	@ 0x29
 8002c30:	d10e      	bne.n	8002c50 <I2C_Slave_ISR_DMA+0x108>
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c38:	d00a      	beq.n	8002c50 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2210      	movs	r2, #16
 8002c40:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 fd0b 	bl	800365e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f915 	bl	8002e78 <I2C_ITSlaveSeqCplt>
 8002c4e:	e033      	b.n	8002cb8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2210      	movs	r2, #16
 8002c56:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002c58:	e034      	b.n	8002cc4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2210      	movs	r2, #16
 8002c60:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	f043 0204 	orr.w	r2, r3, #4
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c74:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <I2C_Slave_ISR_DMA+0x13c>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c82:	d11f      	bne.n	8002cc4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b21      	cmp	r3, #33	@ 0x21
 8002c88:	d002      	beq.n	8002c90 <I2C_Slave_ISR_DMA+0x148>
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b29      	cmp	r3, #41	@ 0x29
 8002c8e:	d103      	bne.n	8002c98 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2221      	movs	r2, #33	@ 0x21
 8002c94:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c96:	e008      	b.n	8002caa <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	2b22      	cmp	r3, #34	@ 0x22
 8002c9c:	d002      	beq.n	8002ca4 <I2C_Slave_ISR_DMA+0x15c>
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ca2:	d102      	bne.n	8002caa <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2222      	movs	r2, #34	@ 0x22
 8002ca8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cae:	4619      	mov	r1, r3
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fbbd 	bl	8003430 <I2C_ITError>
      if (treatdmanack == 1U)
 8002cb6:	e005      	b.n	8002cc4 <I2C_Slave_ISR_DMA+0x17c>
 8002cb8:	e004      	b.n	8002cc4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cc2:	e00f      	b.n	8002ce4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002cc4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cc6:	e00d      	b.n	8002ce4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d008      	beq.n	8002ce4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f809 	bl	8002cf6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d0c:	2b28      	cmp	r3, #40	@ 0x28
 8002d0e:	d16a      	bne.n	8002de6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d2e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d3c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d4a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d138      	bne.n	8002dc6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002d54:	897b      	ldrh	r3, [r7, #10]
 8002d56:	09db      	lsrs	r3, r3, #7
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	89bb      	ldrh	r3, [r7, #12]
 8002d5c:	4053      	eors	r3, r2
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	f003 0306 	and.w	r3, r3, #6
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11c      	bne.n	8002da2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d68:	897b      	ldrh	r3, [r7, #10]
 8002d6a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d13b      	bne.n	8002df6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2208      	movs	r2, #8
 8002d8a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d94:	89ba      	ldrh	r2, [r7, #12]
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff fa63 	bl	8002266 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002da0:	e029      	b.n	8002df6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002da6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fd50 	bl	8003850 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002db8:	89ba      	ldrh	r2, [r7, #12]
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff fa51 	bl	8002266 <HAL_I2C_AddrCallback>
}
 8002dc4:	e017      	b.n	8002df6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002dc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fd40 	bl	8003850 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dd8:	89ba      	ldrh	r2, [r7, #12]
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f7ff fa41 	bl	8002266 <HAL_I2C_AddrCallback>
}
 8002de4:	e007      	b.n	8002df6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2208      	movs	r2, #8
 8002dec:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b21      	cmp	r3, #33	@ 0x21
 8002e18:	d115      	bne.n	8002e46 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2211      	movs	r2, #17
 8002e26:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e2e:	2101      	movs	r1, #1
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fd0d 	bl	8003850 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff f9e9 	bl	8002216 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e44:	e014      	b.n	8002e70 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2212      	movs	r2, #18
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e5a:	2102      	movs	r1, #2
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 fcf7 	bl	8003850 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff f9dd 	bl	800222a <HAL_I2C_MasterRxCpltCallback>
}
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d008      	beq.n	8002eac <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	e00c      	b.n	8002ec6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b29      	cmp	r3, #41	@ 0x29
 8002ed0:	d112      	bne.n	8002ef8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2228      	movs	r2, #40	@ 0x28
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2221      	movs	r2, #33	@ 0x21
 8002ede:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fcb4 	bl	8003850 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff f9a4 	bl	800223e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ef6:	e017      	b.n	8002f28 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f02:	d111      	bne.n	8002f28 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2228      	movs	r2, #40	@ 0x28
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2222      	movs	r2, #34	@ 0x22
 8002f10:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f12:	2102      	movs	r1, #2
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fc9b 	bl	8003850 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff f995 	bl	8002252 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2220      	movs	r2, #32
 8002f44:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b21      	cmp	r3, #33	@ 0x21
 8002f50:	d107      	bne.n	8002f62 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f52:	2101      	movs	r1, #1
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fc7b 	bl	8003850 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2211      	movs	r2, #17
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f60:	e00c      	b.n	8002f7c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b22      	cmp	r3, #34	@ 0x22
 8002f6c:	d106      	bne.n	8002f7c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f6e:	2102      	movs	r1, #2
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fc6d 	bl	8003850 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2212      	movs	r2, #18
 8002f7a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b4c      	ldr	r3, [pc, #304]	@ (80030b8 <I2C_ITMasterCplt+0x188>)
 8002f88:	400b      	ands	r3, r1
 8002f8a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a49      	ldr	r2, [pc, #292]	@ (80030bc <I2C_ITMasterCplt+0x18c>)
 8002f96:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d009      	beq.n	8002fb6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2210      	movs	r2, #16
 8002fa8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fae:	f043 0204 	orr.w	r2, r3, #4
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b60      	cmp	r3, #96	@ 0x60
 8002fc0:	d10a      	bne.n	8002fd8 <I2C_ITMasterCplt+0xa8>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fb40 	bl	800365e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b60      	cmp	r3, #96	@ 0x60
 8002fee:	d002      	beq.n	8002ff6 <I2C_ITMasterCplt+0xc6>
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fa17 	bl	8003430 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003002:	e054      	b.n	80030ae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b21      	cmp	r3, #33	@ 0x21
 800300e:	d124      	bne.n	800305a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b40      	cmp	r3, #64	@ 0x40
 8003028:	d10b      	bne.n	8003042 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff f92b 	bl	8002296 <HAL_I2C_MemTxCpltCallback>
}
 8003040:	e035      	b.n	80030ae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff f8df 	bl	8002216 <HAL_I2C_MasterTxCpltCallback>
}
 8003058:	e029      	b.n	80030ae <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b22      	cmp	r3, #34	@ 0x22
 8003064:	d123      	bne.n	80030ae <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b40      	cmp	r3, #64	@ 0x40
 800307e:	d10b      	bne.n	8003098 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff f90a 	bl	80022aa <HAL_I2C_MemRxCpltCallback>
}
 8003096:	e00a      	b.n	80030ae <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff f8be 	bl	800222a <HAL_I2C_MasterRxCpltCallback>
}
 80030ae:	bf00      	nop
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	fe00e800 	.word	0xfe00e800
 80030bc:	ffff0000 	.word	0xffff0000

080030c0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030da:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2220      	movs	r2, #32
 80030ea:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030ec:	7afb      	ldrb	r3, [r7, #11]
 80030ee:	2b21      	cmp	r3, #33	@ 0x21
 80030f0:	d002      	beq.n	80030f8 <I2C_ITSlaveCplt+0x38>
 80030f2:	7afb      	ldrb	r3, [r7, #11]
 80030f4:	2b29      	cmp	r3, #41	@ 0x29
 80030f6:	d108      	bne.n	800310a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80030f8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fba7 	bl	8003850 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2221      	movs	r2, #33	@ 0x21
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
 8003108:	e019      	b.n	800313e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800310a:	7afb      	ldrb	r3, [r7, #11]
 800310c:	2b22      	cmp	r3, #34	@ 0x22
 800310e:	d002      	beq.n	8003116 <I2C_ITSlaveCplt+0x56>
 8003110:	7afb      	ldrb	r3, [r7, #11]
 8003112:	2b2a      	cmp	r3, #42	@ 0x2a
 8003114:	d108      	bne.n	8003128 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003116:	f248 0102 	movw	r1, #32770	@ 0x8002
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fb98 	bl	8003850 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2222      	movs	r2, #34	@ 0x22
 8003124:	631a      	str	r2, [r3, #48]	@ 0x30
 8003126:	e00a      	b.n	800313e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003128:	7afb      	ldrb	r3, [r7, #11]
 800312a:	2b28      	cmp	r3, #40	@ 0x28
 800312c:	d107      	bne.n	800313e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800312e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fb8c 	bl	8003850 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800314c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6859      	ldr	r1, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b89      	ldr	r3, [pc, #548]	@ (8003380 <I2C_ITSlaveCplt+0x2c0>)
 800315a:	400b      	ands	r3, r1
 800315c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 fa7d 	bl	800365e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d013      	beq.n	8003196 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800317c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01f      	beq.n	80031c6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	b29a      	uxth	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003194:	e017      	b.n	80031c6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031ae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d006      	beq.n	80031c6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d020      	beq.n	8003212 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0304 	bic.w	r3, r3, #4
 80031d6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	b2d2      	uxtb	r2, r2
 80031e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ea:	1c5a      	adds	r2, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00c      	beq.n	8003212 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003220:	f043 0204 	orr.w	r2, r3, #4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f003 0310 	and.w	r3, r3, #16
 800322e:	2b00      	cmp	r3, #0
 8003230:	d049      	beq.n	80032c6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003238:	2b00      	cmp	r3, #0
 800323a:	d044      	beq.n	80032c6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d128      	bne.n	8003298 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b28      	cmp	r3, #40	@ 0x28
 8003250:	d108      	bne.n	8003264 <I2C_ITSlaveCplt+0x1a4>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003258:	d104      	bne.n	8003264 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800325a:	6979      	ldr	r1, [r7, #20]
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f893 	bl	8003388 <I2C_ITListenCplt>
 8003262:	e030      	b.n	80032c6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b29      	cmp	r3, #41	@ 0x29
 800326e:	d10e      	bne.n	800328e <I2C_ITSlaveCplt+0x1ce>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003276:	d00a      	beq.n	800328e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2210      	movs	r2, #16
 800327e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f9ec 	bl	800365e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff fdf6 	bl	8002e78 <I2C_ITSlaveSeqCplt>
 800328c:	e01b      	b.n	80032c6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	61da      	str	r2, [r3, #28]
 8003296:	e016      	b.n	80032c6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2210      	movs	r2, #16
 800329e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <I2C_ITSlaveCplt+0x1fa>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032b8:	d105      	bne.n	80032c6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	4619      	mov	r1, r3
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f8b5 	bl	8003430 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d010      	beq.n	80032fe <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f8a4 	bl	8003430 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b28      	cmp	r3, #40	@ 0x28
 80032f2:	d141      	bne.n	8003378 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80032f4:	6979      	ldr	r1, [r7, #20]
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f846 	bl	8003388 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032fc:	e03c      	b.n	8003378 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003306:	d014      	beq.n	8003332 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fdb5 	bl	8002e78 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1c      	ldr	r2, [pc, #112]	@ (8003384 <I2C_ITSlaveCplt+0x2c4>)
 8003312:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fe ffa9 	bl	8002282 <HAL_I2C_ListenCpltCallback>
}
 8003330:	e022      	b.n	8003378 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b22      	cmp	r3, #34	@ 0x22
 800333c:	d10e      	bne.n	800335c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2220      	movs	r2, #32
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fe ff7c 	bl	8002252 <HAL_I2C_SlaveRxCpltCallback>
}
 800335a:	e00d      	b.n	8003378 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe ff63 	bl	800223e <HAL_I2C_SlaveTxCpltCallback>
}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	fe00e800 	.word	0xfe00e800
 8003384:	ffff0000 	.word	0xffff0000

08003388 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a25      	ldr	r2, [pc, #148]	@ (800342c <I2C_ITListenCplt+0xa4>)
 8003396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2220      	movs	r2, #32
 80033a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f003 0304 	and.w	r3, r3, #4
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d022      	beq.n	8003404 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d012      	beq.n	8003404 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033fc:	f043 0204 	orr.w	r2, r3, #4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003404:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa21 	bl	8003850 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2210      	movs	r2, #16
 8003414:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe ff2f 	bl	8002282 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	ffff0000 	.word	0xffff0000

08003430 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003440:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a6d      	ldr	r2, [pc, #436]	@ (8003604 <I2C_ITError+0x1d4>)
 800344e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003462:	7bfb      	ldrb	r3, [r7, #15]
 8003464:	2b28      	cmp	r3, #40	@ 0x28
 8003466:	d005      	beq.n	8003474 <I2C_ITError+0x44>
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	2b29      	cmp	r3, #41	@ 0x29
 800346c:	d002      	beq.n	8003474 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	2b2a      	cmp	r3, #42	@ 0x2a
 8003472:	d10b      	bne.n	800348c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003474:	2103      	movs	r1, #3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f9ea 	bl	8003850 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2228      	movs	r2, #40	@ 0x28
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a60      	ldr	r2, [pc, #384]	@ (8003608 <I2C_ITError+0x1d8>)
 8003488:	635a      	str	r2, [r3, #52]	@ 0x34
 800348a:	e030      	b.n	80034ee <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800348c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f000 f9dd 	bl	8003850 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8e1 	bl	800365e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b60      	cmp	r3, #96	@ 0x60
 80034a6:	d01f      	beq.n	80034e8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2220      	movs	r2, #32
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0320 	and.w	r3, r3, #32
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d114      	bne.n	80034e8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b10      	cmp	r3, #16
 80034ca:	d109      	bne.n	80034e0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2210      	movs	r2, #16
 80034d2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	f043 0204 	orr.w	r2, r3, #4
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2220      	movs	r2, #32
 80034e6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d039      	beq.n	8003570 <I2C_ITError+0x140>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b11      	cmp	r3, #17
 8003500:	d002      	beq.n	8003508 <I2C_ITError+0xd8>
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	2b21      	cmp	r3, #33	@ 0x21
 8003506:	d133      	bne.n	8003570 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003512:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003516:	d107      	bne.n	8003528 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003526:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe f9cf 	bl	80018d0 <HAL_DMA_GetState>
 8003532:	4603      	mov	r3, r0
 8003534:	2b01      	cmp	r3, #1
 8003536:	d017      	beq.n	8003568 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	4a33      	ldr	r2, [pc, #204]	@ (800360c <I2C_ITError+0x1dc>)
 800353e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe f8a9 	bl	80016a4 <HAL_DMA_Abort_IT>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d04d      	beq.n	80035f4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003562:	4610      	mov	r0, r2
 8003564:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003566:	e045      	b.n	80035f4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f851 	bl	8003610 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800356e:	e041      	b.n	80035f4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003574:	2b00      	cmp	r3, #0
 8003576:	d039      	beq.n	80035ec <I2C_ITError+0x1bc>
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b12      	cmp	r3, #18
 800357c:	d002      	beq.n	8003584 <I2C_ITError+0x154>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	2b22      	cmp	r3, #34	@ 0x22
 8003582:	d133      	bne.n	80035ec <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800358e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003592:	d107      	bne.n	80035a4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fe f991 	bl	80018d0 <HAL_DMA_GetState>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d017      	beq.n	80035e4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	4a14      	ldr	r2, [pc, #80]	@ (800360c <I2C_ITError+0x1dc>)
 80035ba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fe f86b 	bl	80016a4 <HAL_DMA_Abort_IT>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d011      	beq.n	80035f8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035de:	4610      	mov	r0, r2
 80035e0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035e2:	e009      	b.n	80035f8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f813 	bl	8003610 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035ea:	e005      	b.n	80035f8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f80f 	bl	8003610 <I2C_TreatErrorCallback>
  }
}
 80035f2:	e002      	b.n	80035fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035f4:	bf00      	nop
 80035f6:	e000      	b.n	80035fa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035f8:	bf00      	nop
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	ffff0000 	.word	0xffff0000
 8003608:	08002535 	.word	0x08002535
 800360c:	080036a7 	.word	0x080036a7

08003610 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b60      	cmp	r3, #96	@ 0x60
 8003622:	d10e      	bne.n	8003642 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2220      	movs	r2, #32
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe fe49 	bl	80022d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003640:	e009      	b.n	8003656 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7fe fe34 	bl	80022be <HAL_I2C_ErrorCallback>
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b02      	cmp	r3, #2
 8003672:	d103      	bne.n	800367c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2200      	movs	r2, #0
 800367a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b01      	cmp	r3, #1
 8003688:	d007      	beq.n	800369a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	619a      	str	r2, [r3, #24]
  }
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr

080036a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c0:	2200      	movs	r2, #0
 80036c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d0:	2200      	movs	r2, #0
 80036d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff ff9b 	bl	8003610 <I2C_TreatErrorCallback>
}
 80036da:	bf00      	nop
 80036dc:	3710      	adds	r7, #16
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	607b      	str	r3, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	817b      	strh	r3, [r7, #10]
 80036f2:	4613      	mov	r3, r2
 80036f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036f6:	897b      	ldrh	r3, [r7, #10]
 80036f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036fc:	7a7b      	ldrb	r3, [r7, #9]
 80036fe:	041b      	lsls	r3, r3, #16
 8003700:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003704:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	4313      	orrs	r3, r2
 800370e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003712:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	0d5b      	lsrs	r3, r3, #21
 800371e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003722:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <I2C_TransferConfig+0x60>)
 8003724:	430b      	orrs	r3, r1
 8003726:	43db      	mvns	r3, r3
 8003728:	ea02 0103 	and.w	r1, r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003736:	bf00      	nop
 8003738:	371c      	adds	r7, #28
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	03ff63ff 	.word	0x03ff63ff

08003748 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800375c:	4a39      	ldr	r2, [pc, #228]	@ (8003844 <I2C_Enable_IRQ+0xfc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d032      	beq.n	80037c8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003766:	4a38      	ldr	r2, [pc, #224]	@ (8003848 <I2C_Enable_IRQ+0x100>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d02d      	beq.n	80037c8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003770:	4a36      	ldr	r2, [pc, #216]	@ (800384c <I2C_Enable_IRQ+0x104>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d028      	beq.n	80037c8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003776:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800377a:	2b00      	cmp	r3, #0
 800377c:	da03      	bge.n	8003786 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003784:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003786:	887b      	ldrh	r3, [r7, #2]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003796:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003798:	887b      	ldrh	r3, [r7, #2]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80037a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037aa:	887b      	ldrh	r3, [r7, #2]
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d103      	bne.n	80037b8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80037b6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d133      	bne.n	8003826 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f043 0320 	orr.w	r3, r3, #32
 80037c4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037c6:	e02e      	b.n	8003826 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80037c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	da03      	bge.n	80037d8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80037d6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80037d8:	887b      	ldrh	r3, [r7, #2]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80037e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80037ea:	887b      	ldrh	r3, [r7, #2]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80037fa:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d103      	bne.n	800380a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003808:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	2b20      	cmp	r3, #32
 800380e:	d103      	bne.n	8003818 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003816:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003818:	887b      	ldrh	r3, [r7, #2]
 800381a:	2b40      	cmp	r3, #64	@ 0x40
 800381c:	d103      	bne.n	8003826 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003824:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	430a      	orrs	r2, r1
 8003834:	601a      	str	r2, [r3, #0]
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	08002727 	.word	0x08002727
 8003848:	08002b49 	.word	0x08002b49
 800384c:	080028fd 	.word	0x080028fd

08003850 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00f      	beq.n	800388a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003870:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800387e:	2b28      	cmp	r3, #40	@ 0x28
 8003880:	d003      	beq.n	800388a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003888:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800388a:	887b      	ldrh	r3, [r7, #2]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00f      	beq.n	80038b4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800389a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038a8:	2b28      	cmp	r3, #40	@ 0x28
 80038aa:	d003      	beq.n	80038b4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80038b2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80038b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	da03      	bge.n	80038c4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80038c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80038c4:	887b      	ldrh	r3, [r7, #2]
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d103      	bne.n	80038d2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80038d2:	887b      	ldrh	r3, [r7, #2]
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d103      	bne.n	80038e0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f043 0320 	orr.w	r3, r3, #32
 80038de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80038e0:	887b      	ldrh	r3, [r7, #2]
 80038e2:	2b40      	cmp	r3, #64	@ 0x40
 80038e4:	d103      	bne.n	80038ee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	43da      	mvns	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	400a      	ands	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	d138      	bne.n	8003994 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800392c:	2302      	movs	r3, #2
 800392e:	e032      	b.n	8003996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2224      	movs	r2, #36	@ 0x24
 800393c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0201 	bic.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800395e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6819      	ldr	r1, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b085      	sub	sp, #20
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d139      	bne.n	8003a2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e033      	b.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2224      	movs	r2, #36	@ 0x24
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f022 0201 	bic.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d141      	bne.n	8003ace <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a56:	d131      	bne.n	8003abc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a58:	4b47      	ldr	r3, [pc, #284]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a5e:	4a46      	ldr	r2, [pc, #280]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a68:	4b43      	ldr	r3, [pc, #268]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a70:	4a41      	ldr	r2, [pc, #260]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a78:	4b40      	ldr	r3, [pc, #256]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2232      	movs	r2, #50	@ 0x32
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	4a3f      	ldr	r2, [pc, #252]	@ (8003b80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	0c9b      	lsrs	r3, r3, #18
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a8e:	e002      	b.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a96:	4b38      	ldr	r3, [pc, #224]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa2:	d102      	bne.n	8003aaa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f2      	bne.n	8003a90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aaa:	4b33      	ldr	r3, [pc, #204]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab6:	d158      	bne.n	8003b6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e057      	b.n	8003b6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003abc:	4b2e      	ldr	r3, [pc, #184]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ac8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003acc:	e04d      	b.n	8003b6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad4:	d141      	bne.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ad6:	4b28      	ldr	r3, [pc, #160]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ade:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae2:	d131      	bne.n	8003b48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ae4:	4b24      	ldr	r3, [pc, #144]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aea:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af4:	4b20      	ldr	r3, [pc, #128]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003afc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b04:	4b1d      	ldr	r3, [pc, #116]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2232      	movs	r2, #50	@ 0x32
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b10:	fba2 2303 	umull	r2, r3, r2, r3
 8003b14:	0c9b      	lsrs	r3, r3, #18
 8003b16:	3301      	adds	r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1a:	e002      	b.n	8003b22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b2e:	d102      	bne.n	8003b36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f2      	bne.n	8003b1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b36:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b42:	d112      	bne.n	8003b6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e011      	b.n	8003b6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b48:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b58:	e007      	b.n	8003b6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b5a:	4b07      	ldr	r3, [pc, #28]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b62:	4a05      	ldr	r2, [pc, #20]	@ (8003b78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	20000000 	.word	0x20000000
 8003b80:	431bde83 	.word	0x431bde83

08003b84 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003b88:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	4a04      	ldr	r2, [pc, #16]	@ (8003ba0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b92:	6093      	str	r3, [r2, #8]
}
 8003b94:	bf00      	nop
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40007000 	.word	0x40007000

08003ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b088      	sub	sp, #32
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e2fe      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d075      	beq.n	8003cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc2:	4b97      	ldr	r3, [pc, #604]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bcc:	4b94      	ldr	r3, [pc, #592]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	d102      	bne.n	8003be2 <HAL_RCC_OscConfig+0x3e>
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d002      	beq.n	8003be8 <HAL_RCC_OscConfig+0x44>
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d10b      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	4b8d      	ldr	r3, [pc, #564]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d05b      	beq.n	8003cac <HAL_RCC_OscConfig+0x108>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d157      	bne.n	8003cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e2d9      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c08:	d106      	bne.n	8003c18 <HAL_RCC_OscConfig+0x74>
 8003c0a:	4b85      	ldr	r3, [pc, #532]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a84      	ldr	r2, [pc, #528]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	e01d      	b.n	8003c54 <HAL_RCC_OscConfig+0xb0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCC_OscConfig+0x98>
 8003c22:	4b7f      	ldr	r3, [pc, #508]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7e      	ldr	r2, [pc, #504]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b7c      	ldr	r3, [pc, #496]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7b      	ldr	r2, [pc, #492]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCC_OscConfig+0xb0>
 8003c3c:	4b78      	ldr	r3, [pc, #480]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a77      	ldr	r2, [pc, #476]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	4b75      	ldr	r3, [pc, #468]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a74      	ldr	r2, [pc, #464]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d013      	beq.n	8003c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fa68 	bl	8001130 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fd fa64 	bl	8001130 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	@ 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e29e      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c76:	4b6a      	ldr	r3, [pc, #424]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0xc0>
 8003c82:	e014      	b.n	8003cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fd fa54 	bl	8001130 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c8c:	f7fd fa50 	bl	8001130 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b64      	cmp	r3, #100	@ 0x64
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e28a      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c9e:	4b60      	ldr	r3, [pc, #384]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1f0      	bne.n	8003c8c <HAL_RCC_OscConfig+0xe8>
 8003caa:	e000      	b.n	8003cae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d075      	beq.n	8003da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cba:	4b59      	ldr	r3, [pc, #356]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc4:	4b56      	ldr	r3, [pc, #344]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	d102      	bne.n	8003cda <HAL_RCC_OscConfig+0x136>
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d002      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x13c>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d11f      	bne.n	8003d20 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce0:	4b4f      	ldr	r3, [pc, #316]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x154>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e25d      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf8:	4b49      	ldr	r3, [pc, #292]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	061b      	lsls	r3, r3, #24
 8003d06:	4946      	ldr	r1, [pc, #280]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d0c:	4b45      	ldr	r3, [pc, #276]	@ (8003e24 <HAL_RCC_OscConfig+0x280>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd f9c1 	bl	8001098 <HAL_InitTick>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d043      	beq.n	8003da4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e249      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d023      	beq.n	8003d70 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d28:	4b3d      	ldr	r3, [pc, #244]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fd f9fc 	bl	8001130 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3c:	f7fd f9f8 	bl	8001130 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e232      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d4e:	4b34      	ldr	r3, [pc, #208]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5a:	4b31      	ldr	r3, [pc, #196]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	492d      	ldr	r1, [pc, #180]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	604b      	str	r3, [r1, #4]
 8003d6e:	e01a      	b.n	8003da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d70:	4b2b      	ldr	r3, [pc, #172]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2a      	ldr	r2, [pc, #168]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003d76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7c:	f7fd f9d8 	bl	8001130 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d84:	f7fd f9d4 	bl	8001130 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e20e      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d96:	4b22      	ldr	r3, [pc, #136]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0x1e0>
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d041      	beq.n	8003e36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dba:	4b19      	ldr	r3, [pc, #100]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc0:	4a17      	ldr	r2, [pc, #92]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003dc2:	f043 0301 	orr.w	r3, r3, #1
 8003dc6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fd f9b1 	bl	8001130 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fd f9ad 	bl	8001130 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e1e7      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de4:	4b0e      	ldr	r3, [pc, #56]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0ef      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x22e>
 8003df2:	e020      	b.n	8003e36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dfa:	4a09      	ldr	r2, [pc, #36]	@ (8003e20 <HAL_RCC_OscConfig+0x27c>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e04:	f7fd f994 	bl	8001130 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e0a:	e00d      	b.n	8003e28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0c:	f7fd f990 	bl	8001130 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d906      	bls.n	8003e28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1ca      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e28:	4b8c      	ldr	r3, [pc, #560]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ea      	bne.n	8003e0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 80a6 	beq.w	8003f90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e44:	2300      	movs	r3, #0
 8003e46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e48:	4b84      	ldr	r3, [pc, #528]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_RCC_OscConfig+0x2b4>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x2b6>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	4b7f      	ldr	r3, [pc, #508]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e62:	4a7e      	ldr	r2, [pc, #504]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003e64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e6a:	4b7c      	ldr	r3, [pc, #496]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e76:	2301      	movs	r3, #1
 8003e78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7a:	4b79      	ldr	r3, [pc, #484]	@ (8004060 <HAL_RCC_OscConfig+0x4bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d118      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e86:	4b76      	ldr	r3, [pc, #472]	@ (8004060 <HAL_RCC_OscConfig+0x4bc>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a75      	ldr	r2, [pc, #468]	@ (8004060 <HAL_RCC_OscConfig+0x4bc>)
 8003e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e92:	f7fd f94d 	bl	8001130 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9a:	f7fd f949 	bl	8001130 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e183      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eac:	4b6c      	ldr	r3, [pc, #432]	@ (8004060 <HAL_RCC_OscConfig+0x4bc>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d108      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x32e>
 8003ec0:	4b66      	ldr	r3, [pc, #408]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	4a65      	ldr	r2, [pc, #404]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ed0:	e024      	b.n	8003f1c <HAL_RCC_OscConfig+0x378>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b05      	cmp	r3, #5
 8003ed8:	d110      	bne.n	8003efc <HAL_RCC_OscConfig+0x358>
 8003eda:	4b60      	ldr	r3, [pc, #384]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee0:	4a5e      	ldr	r2, [pc, #376]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003ee2:	f043 0304 	orr.w	r3, r3, #4
 8003ee6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003eea:	4b5c      	ldr	r3, [pc, #368]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef0:	4a5a      	ldr	r2, [pc, #360]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003efa:	e00f      	b.n	8003f1c <HAL_RCC_OscConfig+0x378>
 8003efc:	4b57      	ldr	r3, [pc, #348]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	4a56      	ldr	r2, [pc, #344]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f0c:	4b53      	ldr	r3, [pc, #332]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f12:	4a52      	ldr	r2, [pc, #328]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003f14:	f023 0304 	bic.w	r3, r3, #4
 8003f18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d016      	beq.n	8003f52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7fd f904 	bl	8001130 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f7fd f900 	bl	8001130 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e138      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f42:	4b46      	ldr	r3, [pc, #280]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ed      	beq.n	8003f2c <HAL_RCC_OscConfig+0x388>
 8003f50:	e015      	b.n	8003f7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f52:	f7fd f8ed 	bl	8001130 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f58:	e00a      	b.n	8003f70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5a:	f7fd f8e9 	bl	8001130 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e121      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f70:	4b3a      	ldr	r3, [pc, #232]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1ed      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f7e:	7ffb      	ldrb	r3, [r7, #31]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d105      	bne.n	8003f90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f84:	4b35      	ldr	r3, [pc, #212]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003f86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f88:	4a34      	ldr	r2, [pc, #208]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f8e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d03c      	beq.n	8004016 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01c      	beq.n	8003fde <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fa4:	4b2d      	ldr	r3, [pc, #180]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003faa:	4a2c      	ldr	r2, [pc, #176]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb4:	f7fd f8bc 	bl	8001130 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fbc:	f7fd f8b8 	bl	8001130 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0f2      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fce:	4b23      	ldr	r3, [pc, #140]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0ef      	beq.n	8003fbc <HAL_RCC_OscConfig+0x418>
 8003fdc:	e01b      	b.n	8004016 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fde:	4b1f      	ldr	r3, [pc, #124]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fee:	f7fd f89f 	bl	8001130 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ff6:	f7fd f89b 	bl	8001130 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b02      	cmp	r3, #2
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e0d5      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004008:	4b14      	ldr	r3, [pc, #80]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 800400a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1ef      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80c9 	beq.w	80041b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004020:	4b0e      	ldr	r3, [pc, #56]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 030c 	and.w	r3, r3, #12
 8004028:	2b0c      	cmp	r3, #12
 800402a:	f000 8083 	beq.w	8004134 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d15e      	bne.n	80040f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	4b09      	ldr	r3, [pc, #36]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a08      	ldr	r2, [pc, #32]	@ (800405c <HAL_RCC_OscConfig+0x4b8>)
 800403c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004042:	f7fd f875 	bl	8001130 <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004048:	e00c      	b.n	8004064 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404a:	f7fd f871 	bl	8001130 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	2b02      	cmp	r3, #2
 8004056:	d905      	bls.n	8004064 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e0ab      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
 800405c:	40021000 	.word	0x40021000
 8004060:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004064:	4b55      	ldr	r3, [pc, #340]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1ec      	bne.n	800404a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004070:	4b52      	ldr	r3, [pc, #328]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	4b52      	ldr	r3, [pc, #328]	@ (80041c0 <HAL_RCC_OscConfig+0x61c>)
 8004076:	4013      	ands	r3, r2
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6a11      	ldr	r1, [r2, #32]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004080:	3a01      	subs	r2, #1
 8004082:	0112      	lsls	r2, r2, #4
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800408a:	0212      	lsls	r2, r2, #8
 800408c:	4311      	orrs	r1, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004092:	0852      	lsrs	r2, r2, #1
 8004094:	3a01      	subs	r2, #1
 8004096:	0552      	lsls	r2, r2, #21
 8004098:	4311      	orrs	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800409e:	0852      	lsrs	r2, r2, #1
 80040a0:	3a01      	subs	r2, #1
 80040a2:	0652      	lsls	r2, r2, #25
 80040a4:	4311      	orrs	r1, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040aa:	06d2      	lsls	r2, r2, #27
 80040ac:	430a      	orrs	r2, r1
 80040ae:	4943      	ldr	r1, [pc, #268]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b4:	4b41      	ldr	r3, [pc, #260]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a40      	ldr	r2, [pc, #256]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 80040ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040c0:	4b3e      	ldr	r3, [pc, #248]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a3d      	ldr	r2, [pc, #244]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd f830 	bl	8001130 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fd f82c 	bl	8001130 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e066      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	4b35      	ldr	r3, [pc, #212]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x530>
 80040f2:	e05e      	b.n	80041b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f4:	4b31      	ldr	r3, [pc, #196]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a30      	ldr	r2, [pc, #192]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 80040fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fd f816 	bl	8001130 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004108:	f7fd f812 	bl	8001130 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e04c      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411a:	4b28      	ldr	r3, [pc, #160]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004126:	4b25      	ldr	r3, [pc, #148]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 8004128:	68da      	ldr	r2, [r3, #12]
 800412a:	4924      	ldr	r1, [pc, #144]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 800412c:	4b25      	ldr	r3, [pc, #148]	@ (80041c4 <HAL_RCC_OscConfig+0x620>)
 800412e:	4013      	ands	r3, r2
 8004130:	60cb      	str	r3, [r1, #12]
 8004132:	e03e      	b.n	80041b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e039      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004140:	4b1e      	ldr	r3, [pc, #120]	@ (80041bc <HAL_RCC_OscConfig+0x618>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f003 0203 	and.w	r2, r3, #3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	429a      	cmp	r2, r3
 8004152:	d12c      	bne.n	80041ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	3b01      	subs	r3, #1
 8004160:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	429a      	cmp	r2, r3
 8004164:	d123      	bne.n	80041ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d11b      	bne.n	80041ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004182:	429a      	cmp	r2, r3
 8004184:	d113      	bne.n	80041ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	3b01      	subs	r3, #1
 8004194:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d109      	bne.n	80041ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	3b01      	subs	r3, #1
 80041a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d001      	beq.n	80041b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	019f800c 	.word	0x019f800c
 80041c4:	feeefffc 	.word	0xfeeefffc

080041c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e11e      	b.n	800441e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b91      	ldr	r3, [pc, #580]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d910      	bls.n	8004210 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b8e      	ldr	r3, [pc, #568]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 020f 	bic.w	r2, r3, #15
 80041f6:	498c      	ldr	r1, [pc, #560]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b8a      	ldr	r3, [pc, #552]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e106      	b.n	800441e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d073      	beq.n	8004304 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b03      	cmp	r3, #3
 8004222:	d129      	bne.n	8004278 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004224:	4b81      	ldr	r3, [pc, #516]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0f4      	b.n	800441e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004234:	f000 f99e 	bl	8004574 <RCC_GetSysClockFreqFromPLLSource>
 8004238:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4a7c      	ldr	r2, [pc, #496]	@ (8004430 <HAL_RCC_ClockConfig+0x268>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d93f      	bls.n	80042c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004242:	4b7a      	ldr	r3, [pc, #488]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d009      	beq.n	8004262 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004256:	2b00      	cmp	r3, #0
 8004258:	d033      	beq.n	80042c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800425e:	2b00      	cmp	r3, #0
 8004260:	d12f      	bne.n	80042c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004262:	4b72      	ldr	r3, [pc, #456]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800426a:	4a70      	ldr	r2, [pc, #448]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 800426c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004270:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004272:	2380      	movs	r3, #128	@ 0x80
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e024      	b.n	80042c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d107      	bne.n	8004290 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004280:	4b6a      	ldr	r3, [pc, #424]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0c6      	b.n	800441e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004290:	4b66      	ldr	r3, [pc, #408]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e0be      	b.n	800441e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80042a0:	f000 f8ce 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4a61      	ldr	r2, [pc, #388]	@ (8004430 <HAL_RCC_ClockConfig+0x268>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d909      	bls.n	80042c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042ae:	4b5f      	ldr	r3, [pc, #380]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042b6:	4a5d      	ldr	r2, [pc, #372]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80042b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042be:	2380      	movs	r3, #128	@ 0x80
 80042c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042c2:	4b5a      	ldr	r3, [pc, #360]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f023 0203 	bic.w	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4957      	ldr	r1, [pc, #348]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d4:	f7fc ff2c 	bl	8001130 <HAL_GetTick>
 80042d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042dc:	f7fc ff28 	bl	8001130 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e095      	b.n	800441e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f2:	4b4e      	ldr	r3, [pc, #312]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 020c 	and.w	r2, r3, #12
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	429a      	cmp	r2, r3
 8004302:	d1eb      	bne.n	80042dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d023      	beq.n	8004358 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800431c:	4b43      	ldr	r3, [pc, #268]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a42      	ldr	r2, [pc, #264]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004322:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004326:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d007      	beq.n	8004344 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004334:	4b3d      	ldr	r3, [pc, #244]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800433c:	4a3b      	ldr	r2, [pc, #236]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 800433e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004342:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004344:	4b39      	ldr	r3, [pc, #228]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	4936      	ldr	r1, [pc, #216]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004352:	4313      	orrs	r3, r2
 8004354:	608b      	str	r3, [r1, #8]
 8004356:	e008      	b.n	800436a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2b80      	cmp	r3, #128	@ 0x80
 800435c:	d105      	bne.n	800436a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800435e:	4b33      	ldr	r3, [pc, #204]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	4a32      	ldr	r2, [pc, #200]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 8004364:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004368:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800436a:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d21d      	bcs.n	80043b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004378:	4b2b      	ldr	r3, [pc, #172]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f023 020f 	bic.w	r2, r3, #15
 8004380:	4929      	ldr	r1, [pc, #164]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	4313      	orrs	r3, r2
 8004386:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004388:	f7fc fed2 	bl	8001130 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800438e:	e00a      	b.n	80043a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004390:	f7fc fece 	bl	8001130 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e03b      	b.n	800441e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a6:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <HAL_RCC_ClockConfig+0x260>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d1ed      	bne.n	8004390 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c0:	4b1a      	ldr	r3, [pc, #104]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4917      	ldr	r1, [pc, #92]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043de:	4b13      	ldr	r3, [pc, #76]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	490f      	ldr	r1, [pc, #60]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043f2:	f000 f825 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80043f6:	4602      	mov	r2, r0
 80043f8:	4b0c      	ldr	r3, [pc, #48]	@ (800442c <HAL_RCC_ClockConfig+0x264>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	490c      	ldr	r1, [pc, #48]	@ (8004434 <HAL_RCC_ClockConfig+0x26c>)
 8004404:	5ccb      	ldrb	r3, [r1, r3]
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	fa22 f303 	lsr.w	r3, r2, r3
 800440e:	4a0a      	ldr	r2, [pc, #40]	@ (8004438 <HAL_RCC_ClockConfig+0x270>)
 8004410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004412:	4b0a      	ldr	r3, [pc, #40]	@ (800443c <HAL_RCC_ClockConfig+0x274>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4618      	mov	r0, r3
 8004418:	f7fc fe3e 	bl	8001098 <HAL_InitTick>
 800441c:	4603      	mov	r3, r0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40022000 	.word	0x40022000
 800442c:	40021000 	.word	0x40021000
 8004430:	04c4b400 	.word	0x04c4b400
 8004434:	08006500 	.word	0x08006500
 8004438:	20000000 	.word	0x20000000
 800443c:	20000004 	.word	0x20000004

08004440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004446:	4b2c      	ldr	r3, [pc, #176]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
 800444e:	2b04      	cmp	r3, #4
 8004450:	d102      	bne.n	8004458 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004452:	4b2a      	ldr	r3, [pc, #168]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	e047      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004458:	4b27      	ldr	r3, [pc, #156]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 030c 	and.w	r3, r3, #12
 8004460:	2b08      	cmp	r3, #8
 8004462:	d102      	bne.n	800446a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004464:	4b26      	ldr	r3, [pc, #152]	@ (8004500 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	e03e      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800446a:	4b23      	ldr	r3, [pc, #140]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b0c      	cmp	r3, #12
 8004474:	d136      	bne.n	80044e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004476:	4b20      	ldr	r3, [pc, #128]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004480:	4b1d      	ldr	r3, [pc, #116]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	091b      	lsrs	r3, r3, #4
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	3301      	adds	r3, #1
 800448c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2b03      	cmp	r3, #3
 8004492:	d10c      	bne.n	80044ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004494:	4a1a      	ldr	r2, [pc, #104]	@ (8004500 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	fbb2 f3f3 	udiv	r3, r2, r3
 800449c:	4a16      	ldr	r2, [pc, #88]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800449e:	68d2      	ldr	r2, [r2, #12]
 80044a0:	0a12      	lsrs	r2, r2, #8
 80044a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	617b      	str	r3, [r7, #20]
      break;
 80044ac:	e00c      	b.n	80044c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044ae:	4a13      	ldr	r2, [pc, #76]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b6:	4a10      	ldr	r2, [pc, #64]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044b8:	68d2      	ldr	r2, [r2, #12]
 80044ba:	0a12      	lsrs	r2, r2, #8
 80044bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044c0:	fb02 f303 	mul.w	r3, r2, r3
 80044c4:	617b      	str	r3, [r7, #20]
      break;
 80044c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	0e5b      	lsrs	r3, r3, #25
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	3301      	adds	r3, #1
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	e001      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044e8:	693b      	ldr	r3, [r7, #16]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	371c      	adds	r7, #28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
 80044fc:	00f42400 	.word	0x00f42400
 8004500:	016e3600 	.word	0x016e3600

08004504 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004508:	4b03      	ldr	r3, [pc, #12]	@ (8004518 <HAL_RCC_GetHCLKFreq+0x14>)
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000000 	.word	0x20000000

0800451c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004520:	f7ff fff0 	bl	8004504 <HAL_RCC_GetHCLKFreq>
 8004524:	4602      	mov	r2, r0
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	0a1b      	lsrs	r3, r3, #8
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	4904      	ldr	r1, [pc, #16]	@ (8004544 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004532:	5ccb      	ldrb	r3, [r1, r3]
 8004534:	f003 031f 	and.w	r3, r3, #31
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
}
 800453c:	4618      	mov	r0, r3
 800453e:	bd80      	pop	{r7, pc}
 8004540:	40021000 	.word	0x40021000
 8004544:	08006510 	.word	0x08006510

08004548 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800454c:	f7ff ffda 	bl	8004504 <HAL_RCC_GetHCLKFreq>
 8004550:	4602      	mov	r2, r0
 8004552:	4b06      	ldr	r3, [pc, #24]	@ (800456c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	0adb      	lsrs	r3, r3, #11
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	4904      	ldr	r1, [pc, #16]	@ (8004570 <HAL_RCC_GetPCLK2Freq+0x28>)
 800455e:	5ccb      	ldrb	r3, [r1, r3]
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004568:	4618      	mov	r0, r3
 800456a:	bd80      	pop	{r7, pc}
 800456c:	40021000 	.word	0x40021000
 8004570:	08006510 	.word	0x08006510

08004574 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457a:	4b1e      	ldr	r3, [pc, #120]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004584:	4b1b      	ldr	r3, [pc, #108]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b03      	cmp	r3, #3
 8004596:	d10c      	bne.n	80045b2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004598:	4a17      	ldr	r2, [pc, #92]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a0:	4a14      	ldr	r2, [pc, #80]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045a2:	68d2      	ldr	r2, [r2, #12]
 80045a4:	0a12      	lsrs	r2, r2, #8
 80045a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	617b      	str	r3, [r7, #20]
    break;
 80045b0:	e00c      	b.n	80045cc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b2:	4a12      	ldr	r2, [pc, #72]	@ (80045fc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ba:	4a0e      	ldr	r2, [pc, #56]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045bc:	68d2      	ldr	r2, [r2, #12]
 80045be:	0a12      	lsrs	r2, r2, #8
 80045c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045c4:	fb02 f303 	mul.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
    break;
 80045ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	0e5b      	lsrs	r3, r3, #25
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	3301      	adds	r3, #1
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045e6:	687b      	ldr	r3, [r7, #4]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40021000 	.word	0x40021000
 80045f8:	016e3600 	.word	0x016e3600
 80045fc:	00f42400 	.word	0x00f42400

08004600 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004608:	2300      	movs	r3, #0
 800460a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800460c:	2300      	movs	r3, #0
 800460e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 8098 	beq.w	800474e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004622:	4b43      	ldr	r3, [pc, #268]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d10d      	bne.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800462e:	4b40      	ldr	r3, [pc, #256]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004632:	4a3f      	ldr	r2, [pc, #252]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004638:	6593      	str	r3, [r2, #88]	@ 0x58
 800463a:	4b3d      	ldr	r3, [pc, #244]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800463e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004646:	2301      	movs	r3, #1
 8004648:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464a:	4b3a      	ldr	r3, [pc, #232]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a39      	ldr	r2, [pc, #228]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004656:	f7fc fd6b 	bl	8001130 <HAL_GetTick>
 800465a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800465c:	e009      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fc fd67 	bl	8001130 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d902      	bls.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	74fb      	strb	r3, [r7, #19]
        break;
 8004670:	e005      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004672:	4b30      	ldr	r3, [pc, #192]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0ef      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800467e:	7cfb      	ldrb	r3, [r7, #19]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d159      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004684:	4b2a      	ldr	r3, [pc, #168]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800468e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01e      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	429a      	cmp	r2, r3
 800469e:	d019      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a0:	4b23      	ldr	r3, [pc, #140]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046ac:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046cc:	4a18      	ldr	r2, [pc, #96]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d016      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046de:	f7fc fd27 	bl	8001130 <HAL_GetTick>
 80046e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e4:	e00b      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046e6:	f7fc fd23 	bl	8001130 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d902      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	74fb      	strb	r3, [r7, #19]
            break;
 80046fc:	e006      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ec      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800470c:	7cfb      	ldrb	r3, [r7, #19]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d10b      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004712:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004718:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004720:	4903      	ldr	r1, [pc, #12]	@ (8004730 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004728:	e008      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800472a:	7cfb      	ldrb	r3, [r7, #19]
 800472c:	74bb      	strb	r3, [r7, #18]
 800472e:	e005      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004730:	40021000 	.word	0x40021000
 8004734:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800473c:	7c7b      	ldrb	r3, [r7, #17]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d105      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004742:	4ba7      	ldr	r3, [pc, #668]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004746:	4aa6      	ldr	r2, [pc, #664]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800474c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800475a:	4ba1      	ldr	r3, [pc, #644]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004760:	f023 0203 	bic.w	r2, r3, #3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	499d      	ldr	r1, [pc, #628]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476a:	4313      	orrs	r3, r2
 800476c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00a      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800477c:	4b98      	ldr	r3, [pc, #608]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004782:	f023 020c 	bic.w	r2, r3, #12
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	4995      	ldr	r1, [pc, #596]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800479e:	4b90      	ldr	r3, [pc, #576]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	498c      	ldr	r1, [pc, #560]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047c0:	4b87      	ldr	r3, [pc, #540]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	4984      	ldr	r1, [pc, #528]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047e2:	4b7f      	ldr	r3, [pc, #508]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	695b      	ldr	r3, [r3, #20]
 80047f0:	497b      	ldr	r1, [pc, #492]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004804:	4b76      	ldr	r3, [pc, #472]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	4973      	ldr	r1, [pc, #460]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004826:	4b6e      	ldr	r3, [pc, #440]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800482c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	496a      	ldr	r1, [pc, #424]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004848:	4b65      	ldr	r3, [pc, #404]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	4962      	ldr	r1, [pc, #392]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800486a:	4b5d      	ldr	r3, [pc, #372]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004870:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	4959      	ldr	r1, [pc, #356]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800488c:	4b54      	ldr	r3, [pc, #336]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004892:	f023 0203 	bic.w	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489a:	4951      	ldr	r1, [pc, #324]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ae:	4b4c      	ldr	r3, [pc, #304]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048bc:	4948      	ldr	r1, [pc, #288]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d015      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048d0:	4b43      	ldr	r3, [pc, #268]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048de:	4940      	ldr	r1, [pc, #256]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ee:	d105      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f0:	4b3b      	ldr	r3, [pc, #236]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4a3a      	ldr	r2, [pc, #232]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004904:	2b00      	cmp	r3, #0
 8004906:	d015      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004908:	4b35      	ldr	r3, [pc, #212]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	4932      	ldr	r1, [pc, #200]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004926:	d105      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004928:	4b2d      	ldr	r3, [pc, #180]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a2c      	ldr	r2, [pc, #176]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004932:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d015      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004940:	4b27      	ldr	r3, [pc, #156]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004946:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494e:	4924      	ldr	r1, [pc, #144]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800495e:	d105      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004960:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a1e      	ldr	r2, [pc, #120]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004966:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800496a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d015      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004978:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004986:	4916      	ldr	r1, [pc, #88]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004988:	4313      	orrs	r3, r2
 800498a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004992:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004996:	d105      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004998:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a10      	ldr	r2, [pc, #64]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d019      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b0:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	4908      	ldr	r1, [pc, #32]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049ce:	d109      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d0:	4b03      	ldr	r3, [pc, #12]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	4a02      	ldr	r2, [pc, #8]	@ (80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049da:	60d3      	str	r3, [r2, #12]
 80049dc:	e002      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80049de:	bf00      	nop
 80049e0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d015      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f0:	4b29      	ldr	r3, [pc, #164]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fe:	4926      	ldr	r1, [pc, #152]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a0e:	d105      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a10:	4b21      	ldr	r3, [pc, #132]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a20      	ldr	r2, [pc, #128]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d015      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a28:	4b1b      	ldr	r3, [pc, #108]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a36:	4918      	ldr	r1, [pc, #96]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a46:	d105      	bne.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a48:	4b13      	ldr	r3, [pc, #76]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	4a12      	ldr	r2, [pc, #72]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a52:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d015      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a60:	4b0d      	ldr	r3, [pc, #52]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6e:	490a      	ldr	r1, [pc, #40]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a7e:	d105      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000

08004a9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e042      	b.n	8004b34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7fc f95b 	bl	8000d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2224      	movs	r2, #36	@ 0x24
 8004aca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0201 	bic.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f001 f848 	bl	8005b7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fd49 	bl	8005584 <UART_SetConfig>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e01b      	b.n	8004b34 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f001 f8c7 	bl	8005cc0 <UART_CheckIdleState>
 8004b32:	4603      	mov	r3, r0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	@ 0x28
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d17b      	bne.n	8004c4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_UART_Transmit+0x26>
 8004b5c:	88fb      	ldrh	r3, [r7, #6]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e074      	b.n	8004c50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2221      	movs	r2, #33	@ 0x21
 8004b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b76:	f7fc fadb 	bl	8001130 <HAL_GetTick>
 8004b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88fa      	ldrh	r2, [r7, #6]
 8004b80:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b94:	d108      	bne.n	8004ba8 <HAL_UART_Transmit+0x6c>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	e003      	b.n	8004bb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bb0:	e030      	b.n	8004c14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2180      	movs	r1, #128	@ 0x80
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f001 f929 	bl	8005e14 <UART_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e03d      	b.n	8004c50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	3302      	adds	r3, #2
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	e007      	b.n	8004c02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	781a      	ldrb	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1c8      	bne.n	8004bb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2200      	movs	r2, #0
 8004c28:	2140      	movs	r1, #64	@ 0x40
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f001 f8f2 	bl	8005e14 <UART_WaitOnFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2220      	movs	r2, #32
 8004c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e006      	b.n	8004c50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e000      	b.n	8004c50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
  }
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3720      	adds	r7, #32
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08a      	sub	sp, #40	@ 0x28
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	f040 80b5 	bne.w	8004dde <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_UART_Receive+0x28>
 8004c7a:	88fb      	ldrh	r3, [r7, #6]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e0ad      	b.n	8004de0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2222      	movs	r2, #34	@ 0x22
 8004c90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9a:	f7fc fa49 	bl	8001130 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	88fa      	ldrh	r2, [r7, #6]
 8004cac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cb8:	d10e      	bne.n	8004cd8 <HAL_UART_Receive+0x80>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d105      	bne.n	8004cce <HAL_UART_Receive+0x76>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004cc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004ccc:	e02d      	b.n	8004d2a <HAL_UART_Receive+0xd2>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	22ff      	movs	r2, #255	@ 0xff
 8004cd2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cd6:	e028      	b.n	8004d2a <HAL_UART_Receive+0xd2>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10d      	bne.n	8004cfc <HAL_UART_Receive+0xa4>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d104      	bne.n	8004cf2 <HAL_UART_Receive+0x9a>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	22ff      	movs	r2, #255	@ 0xff
 8004cec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cf0:	e01b      	b.n	8004d2a <HAL_UART_Receive+0xd2>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	227f      	movs	r2, #127	@ 0x7f
 8004cf6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cfa:	e016      	b.n	8004d2a <HAL_UART_Receive+0xd2>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d04:	d10d      	bne.n	8004d22 <HAL_UART_Receive+0xca>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d104      	bne.n	8004d18 <HAL_UART_Receive+0xc0>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	227f      	movs	r2, #127	@ 0x7f
 8004d12:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d16:	e008      	b.n	8004d2a <HAL_UART_Receive+0xd2>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	223f      	movs	r2, #63	@ 0x3f
 8004d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d20:	e003      	b.n	8004d2a <HAL_UART_Receive+0xd2>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004d30:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d3a:	d108      	bne.n	8004d4e <HAL_UART_Receive+0xf6>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	61bb      	str	r3, [r7, #24]
 8004d4c:	e003      	b.n	8004d56 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004d56:	e036      	b.n	8004dc6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2120      	movs	r1, #32
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f001 f856 	bl	8005e14 <UART_WaitOnFlagUntilTimeout>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e032      	b.n	8004de0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10c      	bne.n	8004d9a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	8a7b      	ldrh	r3, [r7, #18]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	3302      	adds	r3, #2
 8004d96:	61bb      	str	r3, [r7, #24]
 8004d98:	e00c      	b.n	8004db4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	8a7b      	ldrh	r3, [r7, #18]
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	4013      	ands	r3, r2
 8004da8:	b2da      	uxtb	r2, r3
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	3301      	adds	r3, #1
 8004db2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1c2      	bne.n	8004d58 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e000      	b.n	8004de0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
  }
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	@ 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d167      	bne.n	8004ed0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_UART_Transmit_DMA+0x24>
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e060      	b.n	8004ed2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	88fa      	ldrh	r2, [r7, #6]
 8004e1a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	88fa      	ldrh	r2, [r7, #6]
 8004e22:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2221      	movs	r2, #33	@ 0x21
 8004e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d028      	beq.n	8004e90 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e42:	4a26      	ldr	r2, [pc, #152]	@ (8004edc <HAL_UART_Transmit_DMA+0xf4>)
 8004e44:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e4a:	4a25      	ldr	r2, [pc, #148]	@ (8004ee0 <HAL_UART_Transmit_DMA+0xf8>)
 8004e4c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e52:	4a24      	ldr	r2, [pc, #144]	@ (8004ee4 <HAL_UART_Transmit_DMA+0xfc>)
 8004e54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e66:	4619      	mov	r1, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3328      	adds	r3, #40	@ 0x28
 8004e6e:	461a      	mov	r2, r3
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	f7fc fb43 	bl	80014fc <HAL_DMA_Start_IT>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d009      	beq.n	8004e90 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2210      	movs	r2, #16
 8004e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e020      	b.n	8004ed2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2240      	movs	r2, #64	@ 0x40
 8004e96:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb8:	623a      	str	r2, [r7, #32]
 8004eba:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	69f9      	ldr	r1, [r7, #28]
 8004ebe:	6a3a      	ldr	r2, [r7, #32]
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e000      	b.n	8004ed2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3728      	adds	r7, #40	@ 0x28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	0800603d 	.word	0x0800603d
 8004ee0:	080060d7 	.word	0x080060d7
 8004ee4:	080060f3 	.word	0x080060f3

08004ee8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b0ba      	sub	sp, #232	@ 0xe8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f16:	4013      	ands	r3, r2
 8004f18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d11b      	bne.n	8004f5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f28:	f003 0320 	and.w	r3, r3, #32
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 82e3 	beq.w	8005518 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
      }
      return;
 8004f5a:	e2dd      	b.n	8005518 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8123 	beq.w	80051ac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80051a0 <HAL_UART_IRQHandler+0x2b8>)
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f76:	4b8b      	ldr	r3, [pc, #556]	@ (80051a4 <HAL_UART_IRQHandler+0x2bc>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8116 	beq.w	80051ac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d011      	beq.n	8004fb0 <HAL_UART_IRQHandler+0xc8>
 8004f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa6:	f043 0201 	orr.w	r2, r3, #1
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d011      	beq.n	8004fe0 <HAL_UART_IRQHandler+0xf8>
 8004fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd6:	f043 0204 	orr.w	r2, r3, #4
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d011      	beq.n	8005010 <HAL_UART_IRQHandler+0x128>
 8004fec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00b      	beq.n	8005010 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2204      	movs	r2, #4
 8004ffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005006:	f043 0202 	orr.w	r2, r3, #2
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d017      	beq.n	800504c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800501c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d105      	bne.n	8005034 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005028:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800502c:	4b5c      	ldr	r3, [pc, #368]	@ (80051a0 <HAL_UART_IRQHandler+0x2b8>)
 800502e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00b      	beq.n	800504c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2208      	movs	r2, #8
 800503a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005042:	f043 0208 	orr.w	r2, r3, #8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800504c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005050:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005054:	2b00      	cmp	r3, #0
 8005056:	d012      	beq.n	800507e <HAL_UART_IRQHandler+0x196>
 8005058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800505c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00c      	beq.n	800507e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800506c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005074:	f043 0220 	orr.w	r2, r3, #32
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8249 	beq.w	800551c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	d013      	beq.n	80050be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d105      	bne.n	80050ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d2:	2b40      	cmp	r3, #64	@ 0x40
 80050d4:	d005      	beq.n	80050e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050da:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d054      	beq.n	800518c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 ff44 	bl	8005f70 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f2:	2b40      	cmp	r3, #64	@ 0x40
 80050f4:	d146      	bne.n	8005184 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	3308      	adds	r3, #8
 80050fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005104:	e853 3f00 	ldrex	r3, [r3]
 8005108:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800510c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005114:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	3308      	adds	r3, #8
 800511e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005122:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800512e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800513a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1d9      	bne.n	80050f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005148:	2b00      	cmp	r3, #0
 800514a:	d017      	beq.n	800517c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005152:	4a15      	ldr	r2, [pc, #84]	@ (80051a8 <HAL_UART_IRQHandler+0x2c0>)
 8005154:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800515c:	4618      	mov	r0, r3
 800515e:	f7fc faa1 	bl	80016a4 <HAL_DMA_Abort_IT>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d019      	beq.n	800519c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800516e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005176:	4610      	mov	r0, r2
 8005178:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517a:	e00f      	b.n	800519c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f9eb 	bl	8005558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005182:	e00b      	b.n	800519c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f9e7 	bl	8005558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518a:	e007      	b.n	800519c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f9e3 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800519a:	e1bf      	b.n	800551c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519c:	bf00      	nop
    return;
 800519e:	e1bd      	b.n	800551c <HAL_UART_IRQHandler+0x634>
 80051a0:	10000001 	.word	0x10000001
 80051a4:	04000120 	.word	0x04000120
 80051a8:	08006173 	.word	0x08006173

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	f040 8153 	bne.w	800545c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ba:	f003 0310 	and.w	r3, r3, #16
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 814c 	beq.w	800545c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8145 	beq.w	800545c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2210      	movs	r2, #16
 80051d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e4:	2b40      	cmp	r3, #64	@ 0x40
 80051e6:	f040 80bb 	bne.w	8005360 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 818f 	beq.w	8005520 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005208:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800520c:	429a      	cmp	r2, r3
 800520e:	f080 8187 	bcs.w	8005520 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005218:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0320 	and.w	r3, r3, #32
 800522a:	2b00      	cmp	r3, #0
 800522c:	f040 8087 	bne.w	800533e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800523c:	e853 3f00 	ldrex	r3, [r3]
 8005240:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005244:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005248:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800524c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800525a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800525e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005266:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005272:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1da      	bne.n	8005230 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3308      	adds	r3, #8
 8005280:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800528a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800528c:	f023 0301 	bic.w	r3, r3, #1
 8005290:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	3308      	adds	r3, #8
 800529a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800529e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e1      	bne.n	800527a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3308      	adds	r3, #8
 80052d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e3      	bne.n	80052b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005304:	e853 3f00 	ldrex	r3, [r3]
 8005308:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800530a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800530c:	f023 0310 	bic.w	r3, r3, #16
 8005310:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	461a      	mov	r2, r3
 800531a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800531e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005320:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005322:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005324:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005326:	e841 2300 	strex	r3, r2, [r1]
 800532a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800532c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1e4      	bne.n	80052fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005338:	4618      	mov	r0, r3
 800533a:	f7fc f95a 	bl	80015f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2202      	movs	r2, #2
 8005342:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005350:	b29b      	uxth	r3, r3
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	b29b      	uxth	r3, r3
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f907 	bl	800556c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800535e:	e0df      	b.n	8005520 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800536c:	b29b      	uxth	r3, r3
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800537a:	b29b      	uxth	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 80d1 	beq.w	8005524 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005382:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80cc 	beq.w	8005524 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005394:	e853 3f00 	ldrex	r3, [r3]
 8005398:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800539a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	461a      	mov	r2, r3
 80053aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1e4      	bne.n	800538c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3308      	adds	r3, #8
 80053c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	623b      	str	r3, [r7, #32]
   return(result);
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053d8:	f023 0301 	bic.w	r3, r3, #1
 80053dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3308      	adds	r3, #8
 80053e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e1      	bne.n	80053c2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	e853 3f00 	ldrex	r3, [r3]
 800541e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0310 	bic.w	r3, r3, #16
 8005426:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	461a      	mov	r2, r3
 8005430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	69b9      	ldr	r1, [r7, #24]
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	617b      	str	r3, [r7, #20]
   return(result);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e4      	bne.n	8005412 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800544e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005452:	4619      	mov	r1, r3
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f889 	bl	800556c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800545a:	e063      	b.n	8005524 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005460:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00e      	beq.n	8005486 <HAL_UART_IRQHandler+0x59e>
 8005468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800546c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d008      	beq.n	8005486 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800547c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 feb8 	bl	80061f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005484:	e051      	b.n	800552a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548e:	2b00      	cmp	r3, #0
 8005490:	d014      	beq.n	80054bc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d105      	bne.n	80054aa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800549e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03a      	beq.n	8005528 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	4798      	blx	r3
    }
    return;
 80054ba:	e035      	b.n	8005528 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d009      	beq.n	80054dc <HAL_UART_IRQHandler+0x5f4>
 80054c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fe62 	bl	800619e <UART_EndTransmit_IT>
    return;
 80054da:	e026      	b.n	800552a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80054dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d009      	beq.n	80054fc <HAL_UART_IRQHandler+0x614>
 80054e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fe91 	bl	800621c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054fa:	e016      	b.n	800552a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80054fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d010      	beq.n	800552a <HAL_UART_IRQHandler+0x642>
 8005508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800550c:	2b00      	cmp	r3, #0
 800550e:	da0c      	bge.n	800552a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fe79 	bl	8006208 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005516:	e008      	b.n	800552a <HAL_UART_IRQHandler+0x642>
      return;
 8005518:	bf00      	nop
 800551a:	e006      	b.n	800552a <HAL_UART_IRQHandler+0x642>
    return;
 800551c:	bf00      	nop
 800551e:	e004      	b.n	800552a <HAL_UART_IRQHandler+0x642>
      return;
 8005520:	bf00      	nop
 8005522:	e002      	b.n	800552a <HAL_UART_IRQHandler+0x642>
      return;
 8005524:	bf00      	nop
 8005526:	e000      	b.n	800552a <HAL_UART_IRQHandler+0x642>
    return;
 8005528:	bf00      	nop
  }
}
 800552a:	37e8      	adds	r7, #232	@ 0xe8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	460b      	mov	r3, r1
 8005576:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005588:	b08c      	sub	sp, #48	@ 0x30
 800558a:	af00      	add	r7, sp, #0
 800558c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	431a      	orrs	r2, r3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	4baa      	ldr	r3, [pc, #680]	@ (800585c <UART_SetConfig+0x2d8>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	6812      	ldr	r2, [r2, #0]
 80055ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055bc:	430b      	orrs	r3, r1
 80055be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a9f      	ldr	r2, [pc, #636]	@ (8005860 <UART_SetConfig+0x2dc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d004      	beq.n	80055f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ec:	4313      	orrs	r3, r2
 80055ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80055fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	6812      	ldr	r2, [r2, #0]
 8005602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005604:	430b      	orrs	r3, r1
 8005606:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800560e:	f023 010f 	bic.w	r1, r3, #15
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a90      	ldr	r2, [pc, #576]	@ (8005864 <UART_SetConfig+0x2e0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d125      	bne.n	8005674 <UART_SetConfig+0xf0>
 8005628:	4b8f      	ldr	r3, [pc, #572]	@ (8005868 <UART_SetConfig+0x2e4>)
 800562a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b03      	cmp	r3, #3
 8005634:	d81a      	bhi.n	800566c <UART_SetConfig+0xe8>
 8005636:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <UART_SetConfig+0xb8>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	0800564d 	.word	0x0800564d
 8005640:	0800565d 	.word	0x0800565d
 8005644:	08005655 	.word	0x08005655
 8005648:	08005665 	.word	0x08005665
 800564c:	2301      	movs	r3, #1
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005652:	e116      	b.n	8005882 <UART_SetConfig+0x2fe>
 8005654:	2302      	movs	r3, #2
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800565a:	e112      	b.n	8005882 <UART_SetConfig+0x2fe>
 800565c:	2304      	movs	r3, #4
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005662:	e10e      	b.n	8005882 <UART_SetConfig+0x2fe>
 8005664:	2308      	movs	r3, #8
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800566a:	e10a      	b.n	8005882 <UART_SetConfig+0x2fe>
 800566c:	2310      	movs	r3, #16
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005672:	e106      	b.n	8005882 <UART_SetConfig+0x2fe>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a7c      	ldr	r2, [pc, #496]	@ (800586c <UART_SetConfig+0x2e8>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d138      	bne.n	80056f0 <UART_SetConfig+0x16c>
 800567e:	4b7a      	ldr	r3, [pc, #488]	@ (8005868 <UART_SetConfig+0x2e4>)
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005684:	f003 030c 	and.w	r3, r3, #12
 8005688:	2b0c      	cmp	r3, #12
 800568a:	d82d      	bhi.n	80056e8 <UART_SetConfig+0x164>
 800568c:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <UART_SetConfig+0x110>)
 800568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005692:	bf00      	nop
 8005694:	080056c9 	.word	0x080056c9
 8005698:	080056e9 	.word	0x080056e9
 800569c:	080056e9 	.word	0x080056e9
 80056a0:	080056e9 	.word	0x080056e9
 80056a4:	080056d9 	.word	0x080056d9
 80056a8:	080056e9 	.word	0x080056e9
 80056ac:	080056e9 	.word	0x080056e9
 80056b0:	080056e9 	.word	0x080056e9
 80056b4:	080056d1 	.word	0x080056d1
 80056b8:	080056e9 	.word	0x080056e9
 80056bc:	080056e9 	.word	0x080056e9
 80056c0:	080056e9 	.word	0x080056e9
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ce:	e0d8      	b.n	8005882 <UART_SetConfig+0x2fe>
 80056d0:	2302      	movs	r3, #2
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056d6:	e0d4      	b.n	8005882 <UART_SetConfig+0x2fe>
 80056d8:	2304      	movs	r3, #4
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056de:	e0d0      	b.n	8005882 <UART_SetConfig+0x2fe>
 80056e0:	2308      	movs	r3, #8
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e6:	e0cc      	b.n	8005882 <UART_SetConfig+0x2fe>
 80056e8:	2310      	movs	r3, #16
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	e0c8      	b.n	8005882 <UART_SetConfig+0x2fe>
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005870 <UART_SetConfig+0x2ec>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d125      	bne.n	8005746 <UART_SetConfig+0x1c2>
 80056fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005868 <UART_SetConfig+0x2e4>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005700:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005704:	2b30      	cmp	r3, #48	@ 0x30
 8005706:	d016      	beq.n	8005736 <UART_SetConfig+0x1b2>
 8005708:	2b30      	cmp	r3, #48	@ 0x30
 800570a:	d818      	bhi.n	800573e <UART_SetConfig+0x1ba>
 800570c:	2b20      	cmp	r3, #32
 800570e:	d00a      	beq.n	8005726 <UART_SetConfig+0x1a2>
 8005710:	2b20      	cmp	r3, #32
 8005712:	d814      	bhi.n	800573e <UART_SetConfig+0x1ba>
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <UART_SetConfig+0x19a>
 8005718:	2b10      	cmp	r3, #16
 800571a:	d008      	beq.n	800572e <UART_SetConfig+0x1aa>
 800571c:	e00f      	b.n	800573e <UART_SetConfig+0x1ba>
 800571e:	2300      	movs	r3, #0
 8005720:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005724:	e0ad      	b.n	8005882 <UART_SetConfig+0x2fe>
 8005726:	2302      	movs	r3, #2
 8005728:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800572c:	e0a9      	b.n	8005882 <UART_SetConfig+0x2fe>
 800572e:	2304      	movs	r3, #4
 8005730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005734:	e0a5      	b.n	8005882 <UART_SetConfig+0x2fe>
 8005736:	2308      	movs	r3, #8
 8005738:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800573c:	e0a1      	b.n	8005882 <UART_SetConfig+0x2fe>
 800573e:	2310      	movs	r3, #16
 8005740:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005744:	e09d      	b.n	8005882 <UART_SetConfig+0x2fe>
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a4a      	ldr	r2, [pc, #296]	@ (8005874 <UART_SetConfig+0x2f0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d125      	bne.n	800579c <UART_SetConfig+0x218>
 8005750:	4b45      	ldr	r3, [pc, #276]	@ (8005868 <UART_SetConfig+0x2e4>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800575a:	2bc0      	cmp	r3, #192	@ 0xc0
 800575c:	d016      	beq.n	800578c <UART_SetConfig+0x208>
 800575e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005760:	d818      	bhi.n	8005794 <UART_SetConfig+0x210>
 8005762:	2b80      	cmp	r3, #128	@ 0x80
 8005764:	d00a      	beq.n	800577c <UART_SetConfig+0x1f8>
 8005766:	2b80      	cmp	r3, #128	@ 0x80
 8005768:	d814      	bhi.n	8005794 <UART_SetConfig+0x210>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <UART_SetConfig+0x1f0>
 800576e:	2b40      	cmp	r3, #64	@ 0x40
 8005770:	d008      	beq.n	8005784 <UART_SetConfig+0x200>
 8005772:	e00f      	b.n	8005794 <UART_SetConfig+0x210>
 8005774:	2300      	movs	r3, #0
 8005776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577a:	e082      	b.n	8005882 <UART_SetConfig+0x2fe>
 800577c:	2302      	movs	r3, #2
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005782:	e07e      	b.n	8005882 <UART_SetConfig+0x2fe>
 8005784:	2304      	movs	r3, #4
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800578a:	e07a      	b.n	8005882 <UART_SetConfig+0x2fe>
 800578c:	2308      	movs	r3, #8
 800578e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005792:	e076      	b.n	8005882 <UART_SetConfig+0x2fe>
 8005794:	2310      	movs	r3, #16
 8005796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800579a:	e072      	b.n	8005882 <UART_SetConfig+0x2fe>
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a35      	ldr	r2, [pc, #212]	@ (8005878 <UART_SetConfig+0x2f4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d12a      	bne.n	80057fc <UART_SetConfig+0x278>
 80057a6:	4b30      	ldr	r3, [pc, #192]	@ (8005868 <UART_SetConfig+0x2e4>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057b4:	d01a      	beq.n	80057ec <UART_SetConfig+0x268>
 80057b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057ba:	d81b      	bhi.n	80057f4 <UART_SetConfig+0x270>
 80057bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c0:	d00c      	beq.n	80057dc <UART_SetConfig+0x258>
 80057c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c6:	d815      	bhi.n	80057f4 <UART_SetConfig+0x270>
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d003      	beq.n	80057d4 <UART_SetConfig+0x250>
 80057cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d0:	d008      	beq.n	80057e4 <UART_SetConfig+0x260>
 80057d2:	e00f      	b.n	80057f4 <UART_SetConfig+0x270>
 80057d4:	2300      	movs	r3, #0
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057da:	e052      	b.n	8005882 <UART_SetConfig+0x2fe>
 80057dc:	2302      	movs	r3, #2
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e2:	e04e      	b.n	8005882 <UART_SetConfig+0x2fe>
 80057e4:	2304      	movs	r3, #4
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ea:	e04a      	b.n	8005882 <UART_SetConfig+0x2fe>
 80057ec:	2308      	movs	r3, #8
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f2:	e046      	b.n	8005882 <UART_SetConfig+0x2fe>
 80057f4:	2310      	movs	r3, #16
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fa:	e042      	b.n	8005882 <UART_SetConfig+0x2fe>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a17      	ldr	r2, [pc, #92]	@ (8005860 <UART_SetConfig+0x2dc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d13a      	bne.n	800587c <UART_SetConfig+0x2f8>
 8005806:	4b18      	ldr	r3, [pc, #96]	@ (8005868 <UART_SetConfig+0x2e4>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800580c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005810:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005814:	d01a      	beq.n	800584c <UART_SetConfig+0x2c8>
 8005816:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800581a:	d81b      	bhi.n	8005854 <UART_SetConfig+0x2d0>
 800581c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005820:	d00c      	beq.n	800583c <UART_SetConfig+0x2b8>
 8005822:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005826:	d815      	bhi.n	8005854 <UART_SetConfig+0x2d0>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <UART_SetConfig+0x2b0>
 800582c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005830:	d008      	beq.n	8005844 <UART_SetConfig+0x2c0>
 8005832:	e00f      	b.n	8005854 <UART_SetConfig+0x2d0>
 8005834:	2300      	movs	r3, #0
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583a:	e022      	b.n	8005882 <UART_SetConfig+0x2fe>
 800583c:	2302      	movs	r3, #2
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005842:	e01e      	b.n	8005882 <UART_SetConfig+0x2fe>
 8005844:	2304      	movs	r3, #4
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584a:	e01a      	b.n	8005882 <UART_SetConfig+0x2fe>
 800584c:	2308      	movs	r3, #8
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005852:	e016      	b.n	8005882 <UART_SetConfig+0x2fe>
 8005854:	2310      	movs	r3, #16
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585a:	e012      	b.n	8005882 <UART_SetConfig+0x2fe>
 800585c:	cfff69f3 	.word	0xcfff69f3
 8005860:	40008000 	.word	0x40008000
 8005864:	40013800 	.word	0x40013800
 8005868:	40021000 	.word	0x40021000
 800586c:	40004400 	.word	0x40004400
 8005870:	40004800 	.word	0x40004800
 8005874:	40004c00 	.word	0x40004c00
 8005878:	40005000 	.word	0x40005000
 800587c:	2310      	movs	r3, #16
 800587e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4aae      	ldr	r2, [pc, #696]	@ (8005b40 <UART_SetConfig+0x5bc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	f040 8097 	bne.w	80059bc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800588e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005892:	2b08      	cmp	r3, #8
 8005894:	d823      	bhi.n	80058de <UART_SetConfig+0x35a>
 8005896:	a201      	add	r2, pc, #4	@ (adr r2, 800589c <UART_SetConfig+0x318>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058df 	.word	0x080058df
 80058a4:	080058c9 	.word	0x080058c9
 80058a8:	080058df 	.word	0x080058df
 80058ac:	080058cf 	.word	0x080058cf
 80058b0:	080058df 	.word	0x080058df
 80058b4:	080058df 	.word	0x080058df
 80058b8:	080058df 	.word	0x080058df
 80058bc:	080058d7 	.word	0x080058d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c0:	f7fe fe2c 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 80058c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058c6:	e010      	b.n	80058ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058c8:	4b9e      	ldr	r3, [pc, #632]	@ (8005b44 <UART_SetConfig+0x5c0>)
 80058ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058cc:	e00d      	b.n	80058ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ce:	f7fe fdb7 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 80058d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058d4:	e009      	b.n	80058ea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058dc:	e005      	b.n	80058ea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8130 	beq.w	8005b52 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	4a94      	ldr	r2, [pc, #592]	@ (8005b48 <UART_SetConfig+0x5c4>)
 80058f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058fc:	461a      	mov	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	fbb3 f3f2 	udiv	r3, r3, r2
 8005904:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	4413      	add	r3, r2
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	429a      	cmp	r2, r3
 8005914:	d305      	bcc.n	8005922 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	429a      	cmp	r2, r3
 8005920:	d903      	bls.n	800592a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005928:	e113      	b.n	8005b52 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	2200      	movs	r2, #0
 800592e:	60bb      	str	r3, [r7, #8]
 8005930:	60fa      	str	r2, [r7, #12]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	4a84      	ldr	r2, [pc, #528]	@ (8005b48 <UART_SetConfig+0x5c4>)
 8005938:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800593c:	b29b      	uxth	r3, r3
 800593e:	2200      	movs	r2, #0
 8005940:	603b      	str	r3, [r7, #0]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005948:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800594c:	f7fa fc64 	bl	8000218 <__aeabi_uldivmod>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4610      	mov	r0, r2
 8005956:	4619      	mov	r1, r3
 8005958:	f04f 0200 	mov.w	r2, #0
 800595c:	f04f 0300 	mov.w	r3, #0
 8005960:	020b      	lsls	r3, r1, #8
 8005962:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005966:	0202      	lsls	r2, r0, #8
 8005968:	6979      	ldr	r1, [r7, #20]
 800596a:	6849      	ldr	r1, [r1, #4]
 800596c:	0849      	lsrs	r1, r1, #1
 800596e:	2000      	movs	r0, #0
 8005970:	460c      	mov	r4, r1
 8005972:	4605      	mov	r5, r0
 8005974:	eb12 0804 	adds.w	r8, r2, r4
 8005978:	eb43 0905 	adc.w	r9, r3, r5
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	469a      	mov	sl, r3
 8005984:	4693      	mov	fp, r2
 8005986:	4652      	mov	r2, sl
 8005988:	465b      	mov	r3, fp
 800598a:	4640      	mov	r0, r8
 800598c:	4649      	mov	r1, r9
 800598e:	f7fa fc43 	bl	8000218 <__aeabi_uldivmod>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4613      	mov	r3, r2
 8005998:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059a0:	d308      	bcc.n	80059b4 <UART_SetConfig+0x430>
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059a8:	d204      	bcs.n	80059b4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6a3a      	ldr	r2, [r7, #32]
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	e0ce      	b.n	8005b52 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059ba:	e0ca      	b.n	8005b52 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c4:	d166      	bne.n	8005a94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80059c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d827      	bhi.n	8005a1e <UART_SetConfig+0x49a>
 80059ce:	a201      	add	r2, pc, #4	@ (adr r2, 80059d4 <UART_SetConfig+0x450>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059f9 	.word	0x080059f9
 80059d8:	08005a01 	.word	0x08005a01
 80059dc:	08005a09 	.word	0x08005a09
 80059e0:	08005a1f 	.word	0x08005a1f
 80059e4:	08005a0f 	.word	0x08005a0f
 80059e8:	08005a1f 	.word	0x08005a1f
 80059ec:	08005a1f 	.word	0x08005a1f
 80059f0:	08005a1f 	.word	0x08005a1f
 80059f4:	08005a17 	.word	0x08005a17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059f8:	f7fe fd90 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 80059fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059fe:	e014      	b.n	8005a2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a00:	f7fe fda2 	bl	8004548 <HAL_RCC_GetPCLK2Freq>
 8005a04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a06:	e010      	b.n	8005a2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a08:	4b4e      	ldr	r3, [pc, #312]	@ (8005b44 <UART_SetConfig+0x5c0>)
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a0c:	e00d      	b.n	8005a2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a0e:	f7fe fd17 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8005a12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a14:	e009      	b.n	8005a2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a1c:	e005      	b.n	8005a2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8090 	beq.w	8005b52 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a36:	4a44      	ldr	r2, [pc, #272]	@ (8005b48 <UART_SetConfig+0x5c4>)
 8005a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a44:	005a      	lsls	r2, r3, #1
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	085b      	lsrs	r3, r3, #1
 8005a4c:	441a      	add	r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	2b0f      	cmp	r3, #15
 8005a5c:	d916      	bls.n	8005a8c <UART_SetConfig+0x508>
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a64:	d212      	bcs.n	8005a8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	f023 030f 	bic.w	r3, r3, #15
 8005a6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	085b      	lsrs	r3, r3, #1
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f003 0307 	and.w	r3, r3, #7
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	8bfb      	ldrh	r3, [r7, #30]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	8bfa      	ldrh	r2, [r7, #30]
 8005a88:	60da      	str	r2, [r3, #12]
 8005a8a:	e062      	b.n	8005b52 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a92:	e05e      	b.n	8005b52 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a94:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d828      	bhi.n	8005aee <UART_SetConfig+0x56a>
 8005a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <UART_SetConfig+0x520>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005aef 	.word	0x08005aef
 8005ab4:	08005adf 	.word	0x08005adf
 8005ab8:	08005aef 	.word	0x08005aef
 8005abc:	08005aef 	.word	0x08005aef
 8005ac0:	08005aef 	.word	0x08005aef
 8005ac4:	08005ae7 	.word	0x08005ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fe fd28 	bl	800451c <HAL_RCC_GetPCLK1Freq>
 8005acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ace:	e014      	b.n	8005afa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad0:	f7fe fd3a 	bl	8004548 <HAL_RCC_GetPCLK2Freq>
 8005ad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ad6:	e010      	b.n	8005afa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b44 <UART_SetConfig+0x5c0>)
 8005ada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005adc:	e00d      	b.n	8005afa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ade:	f7fe fcaf 	bl	8004440 <HAL_RCC_GetSysClockFreq>
 8005ae2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ae4:	e009      	b.n	8005afa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005aec:	e005      	b.n	8005afa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005af8:	bf00      	nop
    }

    if (pclk != 0U)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d028      	beq.n	8005b52 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b04:	4a10      	ldr	r2, [pc, #64]	@ (8005b48 <UART_SetConfig+0x5c4>)
 8005b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	085b      	lsrs	r3, r3, #1
 8005b18:	441a      	add	r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	2b0f      	cmp	r3, #15
 8005b28:	d910      	bls.n	8005b4c <UART_SetConfig+0x5c8>
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b30:	d20c      	bcs.n	8005b4c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b32:	6a3b      	ldr	r3, [r7, #32]
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60da      	str	r2, [r3, #12]
 8005b3c:	e009      	b.n	8005b52 <UART_SetConfig+0x5ce>
 8005b3e:	bf00      	nop
 8005b40:	40008000 	.word	0x40008000
 8005b44:	00f42400 	.word	0x00f42400
 8005b48:	08006518 	.word	0x08006518
      }
      else
      {
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b6e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3730      	adds	r7, #48	@ 0x30
 8005b76:	46bd      	mov	sp, r7
 8005b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b88:	f003 0308 	and.w	r3, r3, #8
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00a      	beq.n	8005ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00a      	beq.n	8005bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00a      	beq.n	8005c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c32:	f003 0320 	and.w	r3, r3, #32
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d01a      	beq.n	8005c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c7a:	d10a      	bne.n	8005c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	605a      	str	r2, [r3, #4]
  }
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b098      	sub	sp, #96	@ 0x60
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cd0:	f7fb fa2e 	bl	8001130 <HAL_GetTick>
 8005cd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0308 	and.w	r3, r3, #8
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d12f      	bne.n	8005d44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cec:	2200      	movs	r2, #0
 8005cee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f88e 	bl	8005e14 <UART_WaitOnFlagUntilTimeout>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d022      	beq.n	8005d44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d06:	e853 3f00 	ldrex	r3, [r3]
 8005d0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d24:	e841 2300 	strex	r3, r2, [r1]
 8005d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1e6      	bne.n	8005cfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2220      	movs	r2, #32
 8005d34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e063      	b.n	8005e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d149      	bne.n	8005de6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 f857 	bl	8005e14 <UART_WaitOnFlagUntilTimeout>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d03c      	beq.n	8005de6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	e853 3f00 	ldrex	r3, [r3]
 8005d78:	623b      	str	r3, [r7, #32]
   return(result);
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e6      	bne.n	8005d6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3308      	adds	r3, #8
 8005dbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dbe:	61fa      	str	r2, [r7, #28]
 8005dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	69b9      	ldr	r1, [r7, #24]
 8005dc4:	69fa      	ldr	r2, [r7, #28]
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	617b      	str	r3, [r7, #20]
   return(result);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e5      	bne.n	8005d9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e012      	b.n	8005e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3758      	adds	r7, #88	@ 0x58
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e24:	e04f      	b.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d04b      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2e:	f7fb f97f 	bl	8001130 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d302      	bcc.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e04e      	b.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d037      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b80      	cmp	r3, #128	@ 0x80
 8005e5a:	d034      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b40      	cmp	r3, #64	@ 0x40
 8005e60:	d031      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d110      	bne.n	8005e92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2208      	movs	r2, #8
 8005e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f879 	bl	8005f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2208      	movs	r2, #8
 8005e82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e029      	b.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69db      	ldr	r3, [r3, #28]
 8005e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea0:	d111      	bne.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005eaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f85f 	bl	8005f70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e00f      	b.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	69da      	ldr	r2, [r3, #28]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	bf0c      	ite	eq
 8005ed6:	2301      	moveq	r3, #1
 8005ed8:	2300      	movne	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d0a0      	beq.n	8005e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b08f      	sub	sp, #60	@ 0x3c
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	e853 3f00 	ldrex	r3, [r3]
 8005f02:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e6      	bne.n	8005ef6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	e853 3f00 	ldrex	r3, [r3]
 8005f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005f3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3308      	adds	r3, #8
 8005f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f48:	61ba      	str	r2, [r7, #24]
 8005f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6979      	ldr	r1, [r7, #20]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	e841 2300 	strex	r3, r2, [r1]
 8005f54:	613b      	str	r3, [r7, #16]
   return(result);
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1e5      	bne.n	8005f28 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005f64:	bf00      	nop
 8005f66:	373c      	adds	r7, #60	@ 0x3c
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b095      	sub	sp, #84	@ 0x54
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f96:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e6      	bne.n	8005f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fc0:	f023 0301 	bic.w	r3, r3, #1
 8005fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3308      	adds	r3, #8
 8005fcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fd6:	e841 2300 	strex	r3, r2, [r1]
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1e3      	bne.n	8005faa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d118      	bne.n	800601c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f023 0310 	bic.w	r3, r3, #16
 8005ffe:	647b      	str	r3, [r7, #68]	@ 0x44
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	461a      	mov	r2, r3
 8006006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6979      	ldr	r1, [r7, #20]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	613b      	str	r3, [r7, #16]
   return(result);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e6      	bne.n	8005fea <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006030:	bf00      	nop
 8006032:	3754      	adds	r7, #84	@ 0x54
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b090      	sub	sp, #64	@ 0x40
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006048:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d137      	bne.n	80060c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605a:	2200      	movs	r2, #0
 800605c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	623b      	str	r3, [r7, #32]
   return(result);
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006076:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006080:	633a      	str	r2, [r7, #48]	@ 0x30
 8006082:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006084:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006086:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006088:	e841 2300 	strex	r3, r2, [r1]
 800608c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800608e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e5      	bne.n	8006060 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	69b9      	ldr	r1, [r7, #24]
 80060b8:	69fa      	ldr	r2, [r7, #28]
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	617b      	str	r3, [r7, #20]
   return(result);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e6      	bne.n	8006094 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060c6:	e002      	b.n	80060ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80060c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80060ca:	f7ff fa31 	bl	8005530 <HAL_UART_TxCpltCallback>
}
 80060ce:	bf00      	nop
 80060d0:	3740      	adds	r7, #64	@ 0x40
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff fa2d 	bl	8005544 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b086      	sub	sp, #24
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006106:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800610e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800611a:	2b80      	cmp	r3, #128	@ 0x80
 800611c:	d109      	bne.n	8006132 <UART_DMAError+0x40>
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b21      	cmp	r3, #33	@ 0x21
 8006122:	d106      	bne.n	8006132 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2200      	movs	r2, #0
 8006128:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800612c:	6978      	ldr	r0, [r7, #20]
 800612e:	f7ff fede 	bl	8005eee <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613c:	2b40      	cmp	r3, #64	@ 0x40
 800613e:	d109      	bne.n	8006154 <UART_DMAError+0x62>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b22      	cmp	r3, #34	@ 0x22
 8006144:	d106      	bne.n	8006154 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2200      	movs	r2, #0
 800614a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800614e:	6978      	ldr	r0, [r7, #20]
 8006150:	f7ff ff0e 	bl	8005f70 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800615a:	f043 0210 	orr.w	r2, r3, #16
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006164:	6978      	ldr	r0, [r7, #20]
 8006166:	f7ff f9f7 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800616a:	bf00      	nop
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}

08006172 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006172:	b580      	push	{r7, lr}
 8006174:	b084      	sub	sp, #16
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7ff f9e1 	bl	8005558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b088      	sub	sp, #32
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ba:	61fb      	str	r3, [r7, #28]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	61bb      	str	r3, [r7, #24]
 80061c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6979      	ldr	r1, [r7, #20]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	613b      	str	r3, [r7, #16]
   return(result);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e6      	bne.n	80061a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7ff f9a2 	bl	8005530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ec:	bf00      	nop
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_UARTEx_DisableFifoMode+0x16>
 8006242:	2302      	movs	r3, #2
 8006244:	e027      	b.n	8006296 <HAL_UARTEx_DisableFifoMode+0x66>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2224      	movs	r2, #36	@ 0x24
 8006252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 0201 	bic.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006274:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr

080062a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e02d      	b.n	8006316 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2224      	movs	r2, #36	@ 0x24
 80062c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0201 	bic.w	r2, r2, #1
 80062e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f850 	bl	800639c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006332:	2302      	movs	r3, #2
 8006334:	e02d      	b.n	8006392 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2224      	movs	r2, #36	@ 0x24
 8006342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f812 	bl	800639c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d108      	bne.n	80063be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063bc:	e031      	b.n	8006422 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063be:	2308      	movs	r3, #8
 80063c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063c2:	2308      	movs	r3, #8
 80063c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	0e5b      	lsrs	r3, r3, #25
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	0f5b      	lsrs	r3, r3, #29
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	7b3a      	ldrb	r2, [r7, #12]
 80063ea:	4911      	ldr	r1, [pc, #68]	@ (8006430 <UARTEx_SetNbDataToProcess+0x94>)
 80063ec:	5c8a      	ldrb	r2, [r1, r2]
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063f2:	7b3a      	ldrb	r2, [r7, #12]
 80063f4:	490f      	ldr	r1, [pc, #60]	@ (8006434 <UARTEx_SetNbDataToProcess+0x98>)
 80063f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80063fc:	b29a      	uxth	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	7b7a      	ldrb	r2, [r7, #13]
 8006408:	4909      	ldr	r1, [pc, #36]	@ (8006430 <UARTEx_SetNbDataToProcess+0x94>)
 800640a:	5c8a      	ldrb	r2, [r1, r2]
 800640c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006410:	7b7a      	ldrb	r2, [r7, #13]
 8006412:	4908      	ldr	r1, [pc, #32]	@ (8006434 <UARTEx_SetNbDataToProcess+0x98>)
 8006414:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006416:	fb93 f3f2 	sdiv	r3, r3, r2
 800641a:	b29a      	uxth	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006422:	bf00      	nop
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	08006530 	.word	0x08006530
 8006434:	08006538 	.word	0x08006538

08006438 <memset>:
 8006438:	4402      	add	r2, r0
 800643a:	4603      	mov	r3, r0
 800643c:	4293      	cmp	r3, r2
 800643e:	d100      	bne.n	8006442 <memset+0xa>
 8006440:	4770      	bx	lr
 8006442:	f803 1b01 	strb.w	r1, [r3], #1
 8006446:	e7f9      	b.n	800643c <memset+0x4>

08006448 <__libc_init_array>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	4d0d      	ldr	r5, [pc, #52]	@ (8006480 <__libc_init_array+0x38>)
 800644c:	4c0d      	ldr	r4, [pc, #52]	@ (8006484 <__libc_init_array+0x3c>)
 800644e:	1b64      	subs	r4, r4, r5
 8006450:	10a4      	asrs	r4, r4, #2
 8006452:	2600      	movs	r6, #0
 8006454:	42a6      	cmp	r6, r4
 8006456:	d109      	bne.n	800646c <__libc_init_array+0x24>
 8006458:	4d0b      	ldr	r5, [pc, #44]	@ (8006488 <__libc_init_array+0x40>)
 800645a:	4c0c      	ldr	r4, [pc, #48]	@ (800648c <__libc_init_array+0x44>)
 800645c:	f000 f818 	bl	8006490 <_init>
 8006460:	1b64      	subs	r4, r4, r5
 8006462:	10a4      	asrs	r4, r4, #2
 8006464:	2600      	movs	r6, #0
 8006466:	42a6      	cmp	r6, r4
 8006468:	d105      	bne.n	8006476 <__libc_init_array+0x2e>
 800646a:	bd70      	pop	{r4, r5, r6, pc}
 800646c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006470:	4798      	blx	r3
 8006472:	3601      	adds	r6, #1
 8006474:	e7ee      	b.n	8006454 <__libc_init_array+0xc>
 8006476:	f855 3b04 	ldr.w	r3, [r5], #4
 800647a:	4798      	blx	r3
 800647c:	3601      	adds	r6, #1
 800647e:	e7f2      	b.n	8006466 <__libc_init_array+0x1e>
 8006480:	08006548 	.word	0x08006548
 8006484:	08006548 	.word	0x08006548
 8006488:	08006548 	.word	0x08006548
 800648c:	0800654c 	.word	0x0800654c

08006490 <_init>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr

0800649c <_fini>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr
