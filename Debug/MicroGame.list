
MicroGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08006498  08006498  00016498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006530  08006530  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006530  08006530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006538  08006538  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006538  08006538  00016538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000000c  0800654c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  0800654c  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d6e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000220a  00000000  00000000  00030ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d28  00000000  00000000  00032ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a41  00000000  00000000  00033d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002521d  00000000  00000000  00034761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113f5  00000000  00000000  0005997e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebbfe  00000000  00000000  0006ad73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003644  00000000  00000000  00156974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00159fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006480 	.word	0x08006480

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006480 	.word	0x08006480

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b09c      	sub	sp, #112	; 0x70
 8000518:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fd9c 	bl	8001056 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f9b7 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 facd 	bl	8000ac0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 fa89 	bl	8000a3c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800052a:	f000 fa3d 	bl	80009a8 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800052e:	f000 f9fb 	bl	8000928 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t newline[] = "\r\n";
 8000532:	4a5f      	ldr	r2, [pc, #380]	; (80006b0 <main+0x19c>)
 8000534:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000538:	6812      	ldr	r2, [r2, #0]
 800053a:	4611      	mov	r1, r2
 800053c:	8019      	strh	r1, [r3, #0]
 800053e:	3302      	adds	r3, #2
 8000540:	0c12      	lsrs	r2, r2, #16
 8000542:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&hlpuart1, newline, sizeof(newline) - 1, 10);
 8000544:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000548:	230a      	movs	r3, #10
 800054a:	2202      	movs	r2, #2
 800054c:	4859      	ldr	r0, [pc, #356]	; (80006b4 <main+0x1a0>)
 800054e:	f004 faed 	bl	8004b2c <HAL_UART_Transmit>

  uint8_t text[] = "Enter Difficulty from 1 - 3 \r\n";
 8000552:	4b59      	ldr	r3, [pc, #356]	; (80006b8 <main+0x1a4>)
 8000554:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000562:	c407      	stmia	r4!, {r0, r1, r2}
 8000564:	8023      	strh	r3, [r4, #0]
 8000566:	3402      	adds	r4, #2
 8000568:	0c1b      	lsrs	r3, r3, #16
 800056a:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, text, 28, 10);
 800056c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000570:	230a      	movs	r3, #10
 8000572:	221c      	movs	r2, #28
 8000574:	484f      	ldr	r0, [pc, #316]	; (80006b4 <main+0x1a0>)
 8000576:	f004 fad9 	bl	8004b2c <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (State == 0)
 800057a:	4b50      	ldr	r3, [pc, #320]	; (80006bc <main+0x1a8>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d103      	bne.n	800058a <main+0x76>
	  {
		  State = 1;
 8000582:	4b4e      	ldr	r3, [pc, #312]	; (80006bc <main+0x1a8>)
 8000584:	2201      	movs	r2, #1
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	e107      	b.n	800079a <main+0x286>
	  }

	  else if (State == 1)
 800058a:	4b4c      	ldr	r3, [pc, #304]	; (80006bc <main+0x1a8>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d12e      	bne.n	80005f0 <main+0xdc>
	  {
		  Read[4] = '\0';
 8000592:	4b4b      	ldr	r3, [pc, #300]	; (80006c0 <main+0x1ac>)
 8000594:	2200      	movs	r2, #0
 8000596:	711a      	strb	r2, [r3, #4]
		  HAL_UART_Receive(&hlpuart1, Read, 4,10);
 8000598:	230a      	movs	r3, #10
 800059a:	2204      	movs	r2, #4
 800059c:	4948      	ldr	r1, [pc, #288]	; (80006c0 <main+0x1ac>)
 800059e:	4845      	ldr	r0, [pc, #276]	; (80006b4 <main+0x1a0>)
 80005a0:	f004 fb52 	bl	8004c48 <HAL_UART_Receive>

		  uint8_t data = Read[0];
 80005a4:	4b46      	ldr	r3, [pc, #280]	; (80006c0 <main+0x1ac>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

		  if (data == 49)
 80005ac:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80005b0:	2b31      	cmp	r3, #49	; 0x31
 80005b2:	d106      	bne.n	80005c2 <main+0xae>
		  {
			  Diff = 100;
 80005b4:	4b43      	ldr	r3, [pc, #268]	; (80006c4 <main+0x1b0>)
 80005b6:	2264      	movs	r2, #100	; 0x64
 80005b8:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005ba:	4b40      	ldr	r3, [pc, #256]	; (80006bc <main+0x1a8>)
 80005bc:	2202      	movs	r2, #2
 80005be:	701a      	strb	r2, [r3, #0]
 80005c0:	e0eb      	b.n	800079a <main+0x286>
		  }

		  else if (data == 50)
 80005c2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80005c6:	2b32      	cmp	r3, #50	; 0x32
 80005c8:	d106      	bne.n	80005d8 <main+0xc4>
		  {
			  Diff = 50;
 80005ca:	4b3e      	ldr	r3, [pc, #248]	; (80006c4 <main+0x1b0>)
 80005cc:	2232      	movs	r2, #50	; 0x32
 80005ce:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005d0:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <main+0x1a8>)
 80005d2:	2202      	movs	r2, #2
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e0e0      	b.n	800079a <main+0x286>
		  }

		  else if (data == 51)
 80005d8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80005dc:	2b33      	cmp	r3, #51	; 0x33
 80005de:	f040 80dc 	bne.w	800079a <main+0x286>
		  {
			  Diff = 10;
 80005e2:	4b38      	ldr	r3, [pc, #224]	; (80006c4 <main+0x1b0>)
 80005e4:	220a      	movs	r2, #10
 80005e6:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005e8:	4b34      	ldr	r3, [pc, #208]	; (80006bc <main+0x1a8>)
 80005ea:	2202      	movs	r2, #2
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	e0d4      	b.n	800079a <main+0x286>
		  }
	  }

	  else if (State == 2)
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <main+0x1a8>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	f040 80d0 	bne.w	800079a <main+0x286>
	  {
		  memset(Read, 0, sizeof(Read));
 80005fa:	2204      	movs	r2, #4
 80005fc:	2100      	movs	r1, #0
 80005fe:	4830      	ldr	r0, [pc, #192]	; (80006c0 <main+0x1ac>)
 8000600:	f005 ff12 	bl	8006428 <memset>
		  for (int i = 1; i < 10; i++)
 8000604:	2301      	movs	r3, #1
 8000606:	667b      	str	r3, [r7, #100]	; 0x64
 8000608:	e0c3      	b.n	8000792 <main+0x27e>
		  {
			  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET && stop == 0)
 800060a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060e:	482e      	ldr	r0, [pc, #184]	; (80006c8 <main+0x1b4>)
 8000610:	f001 fb86 	bl	8001d20 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d107      	bne.n	800062a <main+0x116>
 800061a:	4b2c      	ldr	r3, [pc, #176]	; (80006cc <main+0x1b8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d103      	bne.n	800062a <main+0x116>
			  {
				  stop = 1;
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <main+0x1b8>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
 8000628:	e0b0      	b.n	800078c <main+0x278>
			  }

			  else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && stop == 1)
 800062a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062e:	4826      	ldr	r0, [pc, #152]	; (80006c8 <main+0x1b4>)
 8000630:	f001 fb76 	bl	8001d20 <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d114      	bne.n	8000664 <main+0x150>
 800063a:	4b24      	ldr	r3, [pc, #144]	; (80006cc <main+0x1b8>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d110      	bne.n	8000664 <main+0x150>
			  {
				  slot_mem[indexx] = slot;
 8000642:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <main+0x1bc>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <main+0x1c0>)
 800064a:	7819      	ldrb	r1, [r3, #0]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <main+0x1c4>)
 800064e:	5499      	strb	r1, [r3, r2]
				  stop = 0;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <main+0x1b8>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
				  indexx++;
 8000656:	4b1e      	ldr	r3, [pc, #120]	; (80006d0 <main+0x1bc>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <main+0x1bc>)
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	e093      	b.n	800078c <main+0x278>
			  }

			  else if (indexx == 3)
 8000664:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <main+0x1bc>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b03      	cmp	r3, #3
 800066a:	d103      	bne.n	8000674 <main+0x160>
			  {
				  State = 3;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <main+0x1a8>)
 800066e:	2203      	movs	r2, #3
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e08b      	b.n	800078c <main+0x278>
			  }

			  else
			  {
				  if (indexx == 0)
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <main+0x1bc>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10c      	bne.n	8000696 <main+0x182>
				  {
					  slot_mem[0] = i;
 800067c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800067e:	b2da      	uxtb	r2, r3
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <main+0x1c4>)
 8000682:	701a      	strb	r2, [r3, #0]
					  slot_mem[1] = i;
 8000684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <main+0x1c4>)
 800068a:	705a      	strb	r2, [r3, #1]
					  slot_mem[2] = i;
 800068c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <main+0x1c4>)
 8000692:	709a      	strb	r2, [r3, #2]
 8000694:	e02a      	b.n	80006ec <main+0x1d8>
				  }
				  else if (indexx == 1)
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <main+0x1bc>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d11e      	bne.n	80006dc <main+0x1c8>
				  {
					  slot_mem[1] = i;
 800069e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <main+0x1c4>)
 80006a4:	705a      	strb	r2, [r3, #1]
					  slot_mem[2] = i;
 80006a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <main+0x1c4>)
 80006ac:	709a      	strb	r2, [r3, #2]
 80006ae:	e01d      	b.n	80006ec <main+0x1d8>
 80006b0:	08006498 	.word	0x08006498
 80006b4:	2000013c 	.word	0x2000013c
 80006b8:	0800649c 	.word	0x0800649c
 80006bc:	20000294 	.word	0x20000294
 80006c0:	20000290 	.word	0x20000290
 80006c4:	20000295 	.word	0x20000295
 80006c8:	48000800 	.word	0x48000800
 80006cc:	20000296 	.word	0x20000296
 80006d0:	20000297 	.word	0x20000297
 80006d4:	2000029f 	.word	0x2000029f
 80006d8:	200002a0 	.word	0x200002a0
				  }
				  else if (indexx == 2)
 80006dc:	4b60      	ldr	r3, [pc, #384]	; (8000860 <main+0x34c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d103      	bne.n	80006ec <main+0x1d8>
				  {
					  slot_mem[2] = i;
 80006e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b5e      	ldr	r3, [pc, #376]	; (8000864 <main+0x350>)
 80006ea:	709a      	strb	r2, [r3, #2]
				  }

				  slot = i;
 80006ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b5d      	ldr	r3, [pc, #372]	; (8000868 <main+0x354>)
 80006f2:	701a      	strb	r2, [r3, #0]
				  uint8_t data;

				  data = slot_mem[0] + '0';
 80006f4:	4b5b      	ldr	r3, [pc, #364]	; (8000864 <main+0x350>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	3330      	adds	r3, #48	; 0x30
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  HAL_UART_Transmit(&hlpuart1, &data, sizeof(data), 10);
 8000700:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000704:	230a      	movs	r3, #10
 8000706:	2201      	movs	r2, #1
 8000708:	4858      	ldr	r0, [pc, #352]	; (800086c <main+0x358>)
 800070a:	f004 fa0f 	bl	8004b2c <HAL_UART_Transmit>
				  uint8_t tab[] = "\t";
 800070e:	2309      	movs	r3, #9
 8000710:	87bb      	strh	r3, [r7, #60]	; 0x3c
				  HAL_UART_Transmit(&hlpuart1, tab, 1, 10);
 8000712:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000716:	230a      	movs	r3, #10
 8000718:	2201      	movs	r2, #1
 800071a:	4854      	ldr	r0, [pc, #336]	; (800086c <main+0x358>)
 800071c:	f004 fa06 	bl	8004b2c <HAL_UART_Transmit>

				  data = slot_mem[1] + '0';
 8000720:	4b50      	ldr	r3, [pc, #320]	; (8000864 <main+0x350>)
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	3330      	adds	r3, #48	; 0x30
 8000726:	b2db      	uxtb	r3, r3
 8000728:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  HAL_UART_Transmit(&hlpuart1, &data, sizeof(data), 10);
 800072c:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000730:	230a      	movs	r3, #10
 8000732:	2201      	movs	r2, #1
 8000734:	484d      	ldr	r0, [pc, #308]	; (800086c <main+0x358>)
 8000736:	f004 f9f9 	bl	8004b2c <HAL_UART_Transmit>
				  HAL_UART_Transmit(&hlpuart1, tab, 1, 10);
 800073a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800073e:	230a      	movs	r3, #10
 8000740:	2201      	movs	r2, #1
 8000742:	484a      	ldr	r0, [pc, #296]	; (800086c <main+0x358>)
 8000744:	f004 f9f2 	bl	8004b2c <HAL_UART_Transmit>

				  data = slot_mem[2] + '0';
 8000748:	4b46      	ldr	r3, [pc, #280]	; (8000864 <main+0x350>)
 800074a:	789b      	ldrb	r3, [r3, #2]
 800074c:	3330      	adds	r3, #48	; 0x30
 800074e:	b2db      	uxtb	r3, r3
 8000750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				  HAL_UART_Transmit(&hlpuart1, &data, sizeof(data), 10);
 8000754:	f107 013f 	add.w	r1, r7, #63	; 0x3f
 8000758:	230a      	movs	r3, #10
 800075a:	2201      	movs	r2, #1
 800075c:	4843      	ldr	r0, [pc, #268]	; (800086c <main+0x358>)
 800075e:	f004 f9e5 	bl	8004b2c <HAL_UART_Transmit>

				  uint8_t newline[] = "\r\n";
 8000762:	4a43      	ldr	r2, [pc, #268]	; (8000870 <main+0x35c>)
 8000764:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	4611      	mov	r1, r2
 800076c:	8019      	strh	r1, [r3, #0]
 800076e:	3302      	adds	r3, #2
 8000770:	0c12      	lsrs	r2, r2, #16
 8000772:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&hlpuart1, newline, sizeof(newline) - 1, 10);
 8000774:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000778:	230a      	movs	r3, #10
 800077a:	2202      	movs	r2, #2
 800077c:	483b      	ldr	r0, [pc, #236]	; (800086c <main+0x358>)
 800077e:	f004 f9d5 	bl	8004b2c <HAL_UART_Transmit>
				  HAL_Delay(Diff);
 8000782:	4b3c      	ldr	r3, [pc, #240]	; (8000874 <main+0x360>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4618      	mov	r0, r3
 8000788:	f000 fcd6 	bl	8001138 <HAL_Delay>
		  for (int i = 1; i < 10; i++)
 800078c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800078e:	3301      	adds	r3, #1
 8000790:	667b      	str	r3, [r7, #100]	; 0x64
 8000792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000794:	2b09      	cmp	r3, #9
 8000796:	f77f af38 	ble.w	800060a <main+0xf6>
			  }
		  }
	  }

	  if (indexx == 3 && State == 3)
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <main+0x34c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d12c      	bne.n	80007fc <main+0x2e8>
 80007a2:	4b35      	ldr	r3, [pc, #212]	; (8000878 <main+0x364>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d128      	bne.n	80007fc <main+0x2e8>
	  {
		  if (hi2c1.State == HAL_I2C_STATE_READY)
 80007aa:	4b34      	ldr	r3, [pc, #208]	; (800087c <main+0x368>)
 80007ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b20      	cmp	r3, #32
 80007b4:	d109      	bne.n	80007ca <main+0x2b6>
		  {
			  HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT, slot_mem, 3);
 80007b6:	2303      	movs	r3, #3
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <main+0x350>)
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2302      	movs	r3, #2
 80007c0:	222c      	movs	r2, #44	; 0x2c
 80007c2:	21a0      	movs	r1, #160	; 0xa0
 80007c4:	482d      	ldr	r0, [pc, #180]	; (800087c <main+0x368>)
 80007c6:	f001 fb99 	bl	8001efc <HAL_I2C_Mem_Write_IT>
		  }

		  HAL_Delay(50);
 80007ca:	2032      	movs	r0, #50	; 0x32
 80007cc:	f000 fcb4 	bl	8001138 <HAL_Delay>

		  if (hi2c1.State == HAL_I2C_STATE_READY)
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <main+0x368>)
 80007d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b20      	cmp	r3, #32
 80007da:	d109      	bne.n	80007f0 <main+0x2dc>
		  {
			  HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT, memRead, 3);
 80007dc:	2303      	movs	r3, #3
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <main+0x36c>)
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2302      	movs	r3, #2
 80007e6:	222c      	movs	r2, #44	; 0x2c
 80007e8:	21a0      	movs	r1, #160	; 0xa0
 80007ea:	4824      	ldr	r0, [pc, #144]	; (800087c <main+0x368>)
 80007ec:	f001 fc10 	bl	8002010 <HAL_I2C_Mem_Read_IT>
	  	  }

	  	  indexx = 0;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <main+0x34c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
	  	  Check = 1;
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <main+0x370>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
  	  }

	  if (Check == 1)
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <main+0x370>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b01      	cmp	r3, #1
 8000802:	f47f aeba 	bne.w	800057a <main+0x66>
	  {
		  if (slot_mem[0] == slot_mem[1] && slot_mem[0] == slot_mem[2])
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <main+0x350>)
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <main+0x350>)
 800080c:	785b      	ldrb	r3, [r3, #1]
 800080e:	429a      	cmp	r2, r3
 8000810:	d113      	bne.n	800083a <main+0x326>
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <main+0x350>)
 8000814:	781a      	ldrb	r2, [r3, #0]
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <main+0x350>)
 8000818:	789b      	ldrb	r3, [r3, #2]
 800081a:	429a      	cmp	r2, r3
 800081c:	d10d      	bne.n	800083a <main+0x326>
		  {
			  uint8_t text[] = "You're Winner!!";
 800081e:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <main+0x374>)
 8000820:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  HAL_UART_Transmit_DMA(&hlpuart1, text, sizeof(text));
 800082a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082e:	2210      	movs	r2, #16
 8000830:	4619      	mov	r1, r3
 8000832:	480e      	ldr	r0, [pc, #56]	; (800086c <main+0x358>)
 8000834:	f004 fad0 	bl	8004dd8 <HAL_UART_Transmit_DMA>
		  {
 8000838:	e00e      	b.n	8000858 <main+0x344>
		  }
		  else
		  {
			  uint8_t text[] = "Try Again!! -- Press Reset Button";
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <main+0x378>)
 800083c:	1d3c      	adds	r4, r7, #4
 800083e:	461d      	mov	r5, r3
 8000840:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000848:	682b      	ldr	r3, [r5, #0]
 800084a:	8023      	strh	r3, [r4, #0]
			  HAL_UART_Transmit_DMA(&hlpuart1, text, sizeof(text));
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2222      	movs	r2, #34	; 0x22
 8000850:	4619      	mov	r1, r3
 8000852:	4806      	ldr	r0, [pc, #24]	; (800086c <main+0x358>)
 8000854:	f004 fac0 	bl	8004dd8 <HAL_UART_Transmit_DMA>
		  }
		  Check = 0;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <main+0x370>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
	  if (State == 0)
 800085e:	e68c      	b.n	800057a <main+0x66>
 8000860:	20000297 	.word	0x20000297
 8000864:	200002a0 	.word	0x200002a0
 8000868:	2000029f 	.word	0x2000029f
 800086c:	2000013c 	.word	0x2000013c
 8000870:	08006498 	.word	0x08006498
 8000874:	20000295 	.word	0x20000295
 8000878:	20000294 	.word	0x20000294
 800087c:	20000028 	.word	0x20000028
 8000880:	2000029c 	.word	0x2000029c
 8000884:	20000298 	.word	0x20000298
 8000888:	080064bc 	.word	0x080064bc
 800088c:	080064cc 	.word	0x080064cc

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	; 0x50
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0318 	add.w	r3, r7, #24
 800089a:	2238      	movs	r2, #56	; 0x38
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f005 fdc2 	bl	8006428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f003 f8ba 	bl	8003a2c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c6:	2302      	movs	r3, #2
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ca:	2302      	movs	r3, #2
 80008cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008d2:	2355      	movs	r3, #85	; 0x55
 80008d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 0318 	add.w	r3, r7, #24
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 f954 	bl	8003b94 <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008f2:	f000 f953 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	230f      	movs	r3, #15
 80008f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fa:	2303      	movs	r3, #3
 80008fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2104      	movs	r1, #4
 800090e:	4618      	mov	r0, r3
 8000910:	f003 fc52 	bl	80041b8 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800091a:	f000 f93f 	bl	8000b9c <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	; 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_I2C1_Init+0x74>)
 800092e:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <MX_I2C1_Init+0x78>)
 8000930:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_I2C1_Init+0x74>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <MX_I2C1_Init+0x7c>)
 8000936:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_I2C1_Init+0x74>)
 8000940:	2201      	movs	r2, #1
 8000942:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800094a:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000962:	480e      	ldr	r0, [pc, #56]	; (800099c <MX_I2C1_Init+0x74>)
 8000964:	f001 fa2f 	bl	8001dc6 <HAL_I2C_Init>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096e:	f000 f915 	bl	8000b9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	4809      	ldr	r0, [pc, #36]	; (800099c <MX_I2C1_Init+0x74>)
 8000976:	f002 ffc1 	bl	80038fc <HAL_I2CEx_ConfigAnalogFilter>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000980:	f000 f90c 	bl	8000b9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000984:	2100      	movs	r1, #0
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_I2C1_Init+0x74>)
 8000988:	f003 f803 	bl	8003992 <HAL_I2CEx_ConfigDigitalFilter>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 f903 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000028 	.word	0x20000028
 80009a0:	40005400 	.word	0x40005400
 80009a4:	30a0a7fb 	.word	0x30a0a7fb

080009a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009ac:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 80009b2:	4b20      	ldr	r3, [pc, #128]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009b4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80009b8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009ea:	4812      	ldr	r0, [pc, #72]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009ec:	f004 f84e 	bl	8004a8c <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009f6:	f000 f8d1 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009fe:	f005 fc48 	bl	8006292 <HAL_UARTEx_SetTxFifoThreshold>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a08:	f000 f8c8 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 8000a10:	f005 fc7d 	bl	800630e <HAL_UARTEx_SetRxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a1a:	f000 f8bf 	bl	8000b9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 8000a20:	f005 fbfe 	bl	8006220 <HAL_UARTEx_DisableFifoMode>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a2a:	f000 f8b7 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000013c 	.word	0x2000013c
 8000a38:	40008000 	.word	0x40008000

08000a3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_DMA_Init+0x80>)
 8000a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a46:	4a1d      	ldr	r2, [pc, #116]	; (8000abc <MX_DMA_Init+0x80>)
 8000a48:	f043 0304 	orr.w	r3, r3, #4
 8000a4c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_DMA_Init+0x80>)
 8000a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_DMA_Init+0x80>)
 8000a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a5e:	4a17      	ldr	r2, [pc, #92]	; (8000abc <MX_DMA_Init+0x80>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6493      	str	r3, [r2, #72]	; 0x48
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_DMA_Init+0x80>)
 8000a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	200b      	movs	r0, #11
 8000a78:	f000 fc5b 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a7c:	200b      	movs	r0, #11
 8000a7e:	f000 fc72 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	200c      	movs	r0, #12
 8000a88:	f000 fc53 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a8c:	200c      	movs	r0, #12
 8000a8e:	f000 fc6a 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	200d      	movs	r0, #13
 8000a98:	f000 fc4b 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000a9c:	200d      	movs	r0, #13
 8000a9e:	f000 fc62 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	200e      	movs	r0, #14
 8000aa8:	f000 fc43 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000aac:	200e      	movs	r0, #14
 8000aae:	f000 fc5a 	bl	8001366 <HAL_NVIC_EnableIRQ>

}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021000 	.word	0x40021000

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a2e      	ldr	r2, [pc, #184]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aee:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a28      	ldr	r2, [pc, #160]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000af4:	f043 0320 	orr.w	r3, r3, #32
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0a:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000b24:	f043 0302 	orr.w	r3, r3, #2
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_GPIO_Init+0xd4>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2e:	f003 0302 	and.w	r3, r3, #2
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2120      	movs	r1, #32
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f001 f907 	bl	8001d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b48:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	480f      	ldr	r0, [pc, #60]	; (8000b98 <MX_GPIO_Init+0xd8>)
 8000b5a:	f000 ff5f 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b5e:	2320      	movs	r3, #32
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b78:	f000 ff50 	bl	8001a1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2028      	movs	r0, #40	; 0x28
 8000b82:	f000 fbd6 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b86:	2028      	movs	r0, #40	; 0x28
 8000b88:	f000 fbed 	bl	8001366 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000800 	.word	0x48000800

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x44>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bde:	f002 ffc9 	bl	8003b74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b09e      	sub	sp, #120	; 0x78
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	2254      	movs	r2, #84	; 0x54
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f005 fc09 	bl	8006428 <memset>
  if(hi2c->Instance==I2C1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a50      	ldr	r2, [pc, #320]	; (8000d5c <HAL_I2C_MspInit+0x16c>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	f040 8099 	bne.w	8000d54 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c22:	2340      	movs	r3, #64	; 0x40
 8000c24:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f003 fcde 	bl	80045f0 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f7ff ffaf 	bl	8000b9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3e:	4b48      	ldr	r3, [pc, #288]	; (8000d60 <HAL_I2C_MspInit+0x170>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a47      	ldr	r2, [pc, #284]	; (8000d60 <HAL_I2C_MspInit+0x170>)
 8000c44:	f043 0302 	orr.w	r3, r3, #2
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <HAL_I2C_MspInit+0x170>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c70:	4619      	mov	r1, r3
 8000c72:	483c      	ldr	r0, [pc, #240]	; (8000d64 <HAL_I2C_MspInit+0x174>)
 8000c74:	f000 fed2 	bl	8001a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c78:	4b39      	ldr	r3, [pc, #228]	; (8000d60 <HAL_I2C_MspInit+0x170>)
 8000c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7c:	4a38      	ldr	r2, [pc, #224]	; (8000d60 <HAL_I2C_MspInit+0x170>)
 8000c7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c82:	6593      	str	r3, [r2, #88]	; 0x58
 8000c84:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <HAL_I2C_MspInit+0x170>)
 8000c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000c90:	4b35      	ldr	r3, [pc, #212]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000c92:	4a36      	ldr	r2, [pc, #216]	; (8000d6c <HAL_I2C_MspInit+0x17c>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000c98:	2210      	movs	r2, #16
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c9c:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b31      	ldr	r3, [pc, #196]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cae:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000cba:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000cc6:	4828      	ldr	r0, [pc, #160]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000cc8:	f000 fb68 	bl	800139c <HAL_DMA_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000cd2:	f7ff ff63 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a23      	ldr	r2, [pc, #140]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000cda:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cdc:	4a22      	ldr	r2, [pc, #136]	; (8000d68 <HAL_I2C_MspInit+0x178>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000ce2:	4b23      	ldr	r3, [pc, #140]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000ce4:	4a23      	ldr	r2, [pc, #140]	; (8000d74 <HAL_I2C_MspInit+0x184>)
 8000ce6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000ce8:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000cea:	2211      	movs	r2, #17
 8000cec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cee:	4b20      	ldr	r3, [pc, #128]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000cf0:	2210      	movs	r2, #16
 8000cf2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf4:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d00:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d06:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d0c:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d18:	4815      	ldr	r0, [pc, #84]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000d1a:	f000 fb3f 	bl	800139c <HAL_DMA_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000d24:	f7ff ff3a 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_I2C_MspInit+0x180>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	201f      	movs	r0, #31
 8000d3a:	f000 fafa 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d3e:	201f      	movs	r0, #31
 8000d40:	f000 fb11 	bl	8001366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2020      	movs	r0, #32
 8000d4a:	f000 faf2 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d4e:	2020      	movs	r0, #32
 8000d50:	f000 fb09 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d54:	bf00      	nop
 8000d56:	3778      	adds	r7, #120	; 0x78
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000400 	.word	0x48000400
 8000d68:	2000007c 	.word	0x2000007c
 8000d6c:	40020008 	.word	0x40020008
 8000d70:	200000dc 	.word	0x200000dc
 8000d74:	4002001c 	.word	0x4002001c

08000d78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b09e      	sub	sp, #120	; 0x78
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	2254      	movs	r2, #84	; 0x54
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f005 fb45 	bl	8006428 <memset>
  if(huart->Instance==LPUART1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a4d      	ldr	r2, [pc, #308]	; (8000ed8 <HAL_UART_MspInit+0x160>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	f040 8092 	bne.w	8000ece <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000daa:	2320      	movs	r3, #32
 8000dac:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	4618      	mov	r0, r3
 8000db8:	f003 fc1a 	bl	80045f0 <HAL_RCCEx_PeriphCLKConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dc2:	f7ff feeb 	bl	8000b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dc6:	4b45      	ldr	r3, [pc, #276]	; (8000edc <HAL_UART_MspInit+0x164>)
 8000dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dca:	4a44      	ldr	r2, [pc, #272]	; (8000edc <HAL_UART_MspInit+0x164>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000dd2:	4b42      	ldr	r3, [pc, #264]	; (8000edc <HAL_UART_MspInit+0x164>)
 8000dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b3f      	ldr	r3, [pc, #252]	; (8000edc <HAL_UART_MspInit+0x164>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a3e      	ldr	r2, [pc, #248]	; (8000edc <HAL_UART_MspInit+0x164>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b3c      	ldr	r3, [pc, #240]	; (8000edc <HAL_UART_MspInit+0x164>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000df6:	230c      	movs	r3, #12
 8000df8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e06:	230c      	movs	r3, #12
 8000e08:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e14:	f000 fe02 	bl	8001a1c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000e18:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e1a:	4a32      	ldr	r2, [pc, #200]	; (8000ee4 <HAL_UART_MspInit+0x16c>)
 8000e1c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e20:	2222      	movs	r2, #34	; 0x22
 8000e22:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e24:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e30:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e32:	2280      	movs	r2, #128	; 0x80
 8000e34:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3c:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e42:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e44:	2220      	movs	r2, #32
 8000e46:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e48:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000e4e:	4824      	ldr	r0, [pc, #144]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e50:	f000 faa4 	bl	800139c <HAL_DMA_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000e5a:	f7ff fe9f 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1f      	ldr	r2, [pc, #124]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000e66:	4a1e      	ldr	r2, [pc, #120]	; (8000ee0 <HAL_UART_MspInit+0x168>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <HAL_UART_MspInit+0x174>)
 8000e70:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000e74:	2223      	movs	r2, #35	; 0x23
 8000e76:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e78:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000e7a:	2210      	movs	r2, #16
 8000e7c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000ea2:	4811      	ldr	r0, [pc, #68]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000ea4:	f000 fa7a 	bl	800139c <HAL_DMA_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000eae:	f7ff fe75 	bl	8000b9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000eb6:	67da      	str	r2, [r3, #124]	; 0x7c
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <HAL_UART_MspInit+0x170>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	205b      	movs	r0, #91	; 0x5b
 8000ec4:	f000 fa35 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000ec8:	205b      	movs	r0, #91	; 0x5b
 8000eca:	f000 fa4c 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3778      	adds	r7, #120	; 0x78
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40008000 	.word	0x40008000
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	200001d0 	.word	0x200001d0
 8000ee4:	40020030 	.word	0x40020030
 8000ee8:	20000230 	.word	0x20000230
 8000eec:	40020044 	.word	0x40020044

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 f8de 	bl	80010fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <DMA1_Channel1_IRQHandler+0x10>)
 8000f4a:	f000 fc0a 	bl	8001762 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000007c 	.word	0x2000007c

08000f58 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <DMA1_Channel2_IRQHandler+0x10>)
 8000f5e:	f000 fc00 	bl	8001762 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000dc 	.word	0x200000dc

08000f6c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Channel3_IRQHandler+0x10>)
 8000f72:	f000 fbf6 	bl	8001762 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001d0 	.word	0x200001d0

08000f80 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Channel4_IRQHandler+0x10>)
 8000f86:	f000 fbec 	bl	8001762 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000230 	.word	0x20000230

08000f94 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <I2C1_EV_IRQHandler+0x10>)
 8000f9a:	f001 f8bf 	bl	800211c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000028 	.word	0x20000028

08000fa8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <I2C1_ER_IRQHandler+0x10>)
 8000fae:	f001 f8cf 	bl	8002150 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000028 	.word	0x20000028

08000fbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fc4:	f000 fedc 	bl	8001d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <LPUART1_IRQHandler+0x10>)
 8000fd2:	f003 ff81 	bl	8004ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000013c 	.word	0x2000013c

08000fe0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001006:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001008:	f7ff ffea 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <LoopForever+0x6>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	; (8001044 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	; (8001048 <LoopForever+0xe>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	; (8001050 <LoopForever+0x16>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001032:	f005 fa01 	bl	8006438 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001036:	f7ff fa6d 	bl	8000514 <main>

0800103a <LoopForever>:

LoopForever:
    b LoopForever
 800103a:	e7fe      	b.n	800103a <LoopForever>
  ldr   r0, =_estack
 800103c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001048:	08006540 	.word	0x08006540
  ldr r2, =_sbss
 800104c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001050:	200002a8 	.word	0x200002a8

08001054 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC1_2_IRQHandler>

08001056 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f95b 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001066:	2000      	movs	r0, #0
 8001068:	f000 f80e 	bl	8001088 <HAL_InitTick>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	e001      	b.n	800107c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001078:	f7ff fd96 	bl	8000ba8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800107c:	79fb      	ldrb	r3, [r7, #7]

}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_InitTick+0x68>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d022      	beq.n	80010e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_InitTick+0x6c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_InitTick+0x68>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f966 	bl	8001382 <HAL_SYSTICK_Config>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10f      	bne.n	80010dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	d809      	bhi.n	80010d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c2:	2200      	movs	r2, #0
 80010c4:	6879      	ldr	r1, [r7, #4]
 80010c6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ca:	f000 f932 	bl	8001332 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_InitTick+0x70>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e007      	b.n	80010e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e004      	b.n	80010e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e001      	b.n	80010e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000004 	.word	0x20000004

080010fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x1c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_IncTick+0x20>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4413      	add	r3, r2
 800110a:	4a03      	ldr	r2, [pc, #12]	; (8001118 <HAL_IncTick+0x1c>)
 800110c:	6013      	str	r3, [r2, #0]
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	200002a4 	.word	0x200002a4
 800111c:	20000008 	.word	0x20000008

08001120 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return uwTick;
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <HAL_GetTick+0x14>)
 8001126:	681b      	ldr	r3, [r3, #0]
}
 8001128:	4618      	mov	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	200002a4 	.word	0x200002a4

08001138 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001140:	f7ff ffee 	bl	8001120 <HAL_GetTick>
 8001144:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001150:	d004      	beq.n	800115c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <HAL_Delay+0x40>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	4413      	add	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800115c:	bf00      	nop
 800115e:	f7ff ffdf 	bl	8001120 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	429a      	cmp	r2, r3
 800116c:	d8f7      	bhi.n	800115e <HAL_Delay+0x26>
  {
  }
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000008 	.word	0x20000008

0800117c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001198:	4013      	ands	r3, r2
 800119a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <__NVIC_SetPriorityGrouping+0x44>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <__NVIC_GetPriorityGrouping+0x18>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	0a1b      	lsrs	r3, r3, #8
 80011ce:	f003 0307 	and.w	r3, r3, #7
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	db0b      	blt.n	800120a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	f003 021f 	and.w	r2, r3, #31
 80011f8:	4907      	ldr	r1, [pc, #28]	; (8001218 <__NVIC_EnableIRQ+0x38>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2001      	movs	r0, #1
 8001202:	fa00 f202 	lsl.w	r2, r0, r2
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff29 	bl	800117c <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff40 	bl	80011c4 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff90 	bl	8001270 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5f 	bl	800121c <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff33 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffa4 	bl	80012d8 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e08d      	b.n	80014ca <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b47      	ldr	r3, [pc, #284]	; (80014d4 <HAL_DMA_Init+0x138>)
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d80f      	bhi.n	80013da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	461a      	mov	r2, r3
 80013c0:	4b45      	ldr	r3, [pc, #276]	; (80014d8 <HAL_DMA_Init+0x13c>)
 80013c2:	4413      	add	r3, r2
 80013c4:	4a45      	ldr	r2, [pc, #276]	; (80014dc <HAL_DMA_Init+0x140>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	009a      	lsls	r2, r3, #2
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a42      	ldr	r2, [pc, #264]	; (80014e0 <HAL_DMA_Init+0x144>)
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
 80013d8:	e00e      	b.n	80013f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	461a      	mov	r2, r3
 80013e0:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <HAL_DMA_Init+0x148>)
 80013e2:	4413      	add	r3, r2
 80013e4:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <HAL_DMA_Init+0x140>)
 80013e6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ea:	091b      	lsrs	r3, r3, #4
 80013ec:	009a      	lsls	r2, r3, #2
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a3c      	ldr	r2, [pc, #240]	; (80014e8 <HAL_DMA_Init+0x14c>)
 80013f6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800140e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001412:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800141c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001428:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001434:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fa84 	bl	8001958 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001458:	d102      	bne.n	8001460 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001474:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d010      	beq.n	80014a0 <HAL_DMA_Init+0x104>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b04      	cmp	r3, #4
 8001484:	d80c      	bhi.n	80014a0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 faa4 	bl	80019d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	e008      	b.n	80014b2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40020407 	.word	0x40020407
 80014d8:	bffdfff8 	.word	0xbffdfff8
 80014dc:	cccccccd 	.word	0xcccccccd
 80014e0:	40020000 	.word	0x40020000
 80014e4:	bffdfbf8 	.word	0xbffdfbf8
 80014e8:	40020400 	.word	0x40020400

080014ec <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <HAL_DMA_Start_IT+0x20>
 8001508:	2302      	movs	r3, #2
 800150a:	e066      	b.n	80015da <HAL_DMA_Start_IT+0xee>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d155      	bne.n	80015cc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2202      	movs	r2, #2
 8001524:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2200      	movs	r2, #0
 800152c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0201 	bic.w	r2, r2, #1
 800153c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f000 f9c9 	bl	80018dc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f042 020e 	orr.w	r2, r2, #14
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	e00f      	b.n	8001584 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0204 	bic.w	r2, r2, #4
 8001572:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 020a 	orr.w	r2, r2, #10
 8001582:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015a0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015b8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0201 	orr.w	r2, r2, #1
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e005      	b.n	80015d8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015d4:	2302      	movs	r3, #2
 80015d6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d005      	beq.n	8001606 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2204      	movs	r2, #4
 80015fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e037      	b.n	8001676 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 020e 	bic.w	r2, r2, #14
 8001614:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001620:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001624:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f003 021f 	and.w	r2, r3, #31
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001652:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00c      	beq.n	8001676 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800166a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001674:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d00d      	beq.n	80016c8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2204      	movs	r2, #4
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	e047      	b.n	8001758 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 020e 	bic.w	r2, r2, #14
 80016d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0201 	bic.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	2101      	movs	r1, #1
 8001706:	fa01 f202 	lsl.w	r2, r1, r2
 800170a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001714:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00c      	beq.n	8001738 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800172c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001736:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	4798      	blx	r3
    }
  }
  return status;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	2204      	movs	r2, #4
 8001784:	409a      	lsls	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4013      	ands	r3, r2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d026      	beq.n	80017dc <HAL_DMA_IRQHandler+0x7a>
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d021      	beq.n	80017dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0320 	and.w	r3, r3, #32
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d107      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0204 	bic.w	r2, r2, #4
 80017b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f003 021f 	and.w	r2, r3, #31
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	2104      	movs	r1, #4
 80017c4:	fa01 f202 	lsl.w	r2, r1, r2
 80017c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d071      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017da:	e06c      	b.n	80018b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e0:	f003 031f 	and.w	r3, r3, #31
 80017e4:	2202      	movs	r2, #2
 80017e6:	409a      	lsls	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d02e      	beq.n	800184e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d029      	beq.n	800184e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0320 	and.w	r3, r3, #32
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10b      	bne.n	8001820 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 020a 	bic.w	r2, r2, #10
 8001816:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	2102      	movs	r1, #2
 800182e:	fa01 f202 	lsl.w	r2, r1, r2
 8001832:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d038      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800184c:	e033      	b.n	80018b6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	2208      	movs	r2, #8
 8001858:	409a      	lsls	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d02a      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d025      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f022 020e 	bic.w	r2, r2, #14
 800187a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f003 021f 	and.w	r2, r3, #31
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018b6:	bf00      	nop
 80018b8:	bf00      	nop
}
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018f2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001904:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f003 021f 	and.w	r2, r3, #31
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	2101      	movs	r1, #1
 8001914:	fa01 f202 	lsl.w	r2, r1, r2
 8001918:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	2b10      	cmp	r3, #16
 8001928:	d108      	bne.n	800193c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800193a:	e007      	b.n	800194c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68ba      	ldr	r2, [r7, #8]
 8001942:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	60da      	str	r2, [r3, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001968:	429a      	cmp	r2, r3
 800196a:	d802      	bhi.n	8001972 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	e001      	b.n	8001976 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001974:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	3b08      	subs	r3, #8
 8001982:	4a12      	ldr	r2, [pc, #72]	; (80019cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001984:	fba2 2303 	umull	r2, r3, r2, r3
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	009a      	lsls	r2, r3, #2
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4413      	add	r3, r2
 8001998:	461a      	mov	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 031f 	and.w	r3, r3, #31
 80019aa:	2201      	movs	r2, #1
 80019ac:	409a      	lsls	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40020407 	.word	0x40020407
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020820 	.word	0x40020820
 80019cc:	cccccccd 	.word	0xcccccccd
 80019d0:	40020880 	.word	0x40020880

080019d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	461a      	mov	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019f6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	f003 031f 	and.w	r3, r3, #31
 8001a00:	2201      	movs	r2, #1
 8001a02:	409a      	lsls	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	1000823f 	.word	0x1000823f
 8001a18:	40020940 	.word	0x40020940

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a2a:	e15a      	b.n	8001ce2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 814c 	beq.w	8001cdc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d005      	beq.n	8001a5c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d130      	bne.n	8001abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a92:	2201      	movs	r2, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 0201 	and.w	r2, r3, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d017      	beq.n	8001afa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d123      	bne.n	8001b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	6939      	ldr	r1, [r7, #16]
 8001b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0203 	and.w	r2, r3, #3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80a6 	beq.w	8001cdc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b90:	4b5b      	ldr	r3, [pc, #364]	; (8001d00 <HAL_GPIO_Init+0x2e4>)
 8001b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b94:	4a5a      	ldr	r2, [pc, #360]	; (8001d00 <HAL_GPIO_Init+0x2e4>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9c:	4b58      	ldr	r3, [pc, #352]	; (8001d00 <HAL_GPIO_Init+0x2e4>)
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba8:	4a56      	ldr	r2, [pc, #344]	; (8001d04 <HAL_GPIO_Init+0x2e8>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bd2:	d01f      	beq.n	8001c14 <HAL_GPIO_Init+0x1f8>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a4c      	ldr	r2, [pc, #304]	; (8001d08 <HAL_GPIO_Init+0x2ec>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d019      	beq.n	8001c10 <HAL_GPIO_Init+0x1f4>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <HAL_GPIO_Init+0x2f0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_GPIO_Init+0x1f0>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_GPIO_Init+0x2f4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d00d      	beq.n	8001c08 <HAL_GPIO_Init+0x1ec>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a49      	ldr	r2, [pc, #292]	; (8001d14 <HAL_GPIO_Init+0x2f8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d007      	beq.n	8001c04 <HAL_GPIO_Init+0x1e8>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_GPIO_Init+0x2fc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d101      	bne.n	8001c00 <HAL_GPIO_Init+0x1e4>
 8001bfc:	2305      	movs	r3, #5
 8001bfe:	e00a      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c00:	2306      	movs	r3, #6
 8001c02:	e008      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c04:	2304      	movs	r3, #4
 8001c06:	e006      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e004      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e002      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_GPIO_Init+0x1fa>
 8001c14:	2300      	movs	r3, #0
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	f002 0203 	and.w	r2, r2, #3
 8001c1c:	0092      	lsls	r2, r2, #2
 8001c1e:	4093      	lsls	r3, r2
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c26:	4937      	ldr	r1, [pc, #220]	; (8001d04 <HAL_GPIO_Init+0x2e8>)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c34:	4b39      	ldr	r3, [pc, #228]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c58:	4a30      	ldr	r2, [pc, #192]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c82:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c88:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cac:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cd6:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_GPIO_Init+0x300>)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f47f ae9d 	bne.w	8001a2c <HAL_GPIO_Init+0x10>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	bf00      	nop
 8001cf6:	371c      	adds	r7, #28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40010000 	.word	0x40010000
 8001d08:	48000400 	.word	0x48000400
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	48000c00 	.word	0x48000c00
 8001d14:	48001000 	.word	0x48001000
 8001d18:	48001400 	.word	0x48001400
 8001d1c:	40010400 	.word	0x40010400

08001d20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	887b      	ldrh	r3, [r7, #2]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
 8001d3c:	e001      	b.n	8001d42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d60:	787b      	ldrb	r3, [r7, #1]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6e:	887a      	ldrh	r2, [r7, #2]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d8c:	695a      	ldr	r2, [r3, #20]
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d006      	beq.n	8001da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f806 	bl	8001db0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e08d      	b.n	8001ef4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe feff 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2224      	movs	r2, #36	; 0x24
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0201 	bic.w	r2, r2, #1
 8001e08:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e16:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e26:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d107      	bne.n	8001e40 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3c:	609a      	str	r2, [r3, #8]
 8001e3e:	e006      	b.n	8001e4e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e4c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d108      	bne.n	8001e68 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	e007      	b.n	8001e78 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e76:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e9a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69d9      	ldr	r1, [r3, #28]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1a      	ldr	r2, [r3, #32]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af02      	add	r7, sp, #8
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	4608      	mov	r0, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	817b      	strh	r3, [r7, #10]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	813b      	strh	r3, [r7, #8]
 8001f12:	4613      	mov	r3, r2
 8001f14:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	d16a      	bne.n	8001ff8 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <HAL_I2C_Mem_Write_IT+0x32>
 8001f28:	8bbb      	ldrh	r3, [r7, #28]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e05f      	b.n	8001ffa <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f48:	d101      	bne.n	8001f4e <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e055      	b.n	8001ffa <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d101      	bne.n	8001f5c <HAL_I2C_Mem_Write_IT+0x60>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e04e      	b.n	8001ffa <HAL_I2C_Mem_Write_IT+0xfe>
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2221      	movs	r2, #33	; 0x21
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->pBuffPtr    = pData;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	8bba      	ldrh	r2, [r7, #28]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a1d      	ldr	r2, [pc, #116]	; (8002004 <HAL_I2C_Mem_Write_IT+0x108>)
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a1c      	ldr	r2, [pc, #112]	; (8002008 <HAL_I2C_Mem_Write_IT+0x10c>)
 8001f96:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8001f98:	897a      	ldrh	r2, [r7, #10]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d109      	bne.n	8001fb8 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fa4:	893b      	ldrh	r3, [r7, #8]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	651a      	str	r2, [r3, #80]	; 0x50
 8001fb6:	e00b      	b.n	8001fd0 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fb8:	893b      	ldrh	r3, [r7, #8]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001fc6:	893b      	ldrh	r3, [r7, #8]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fd0:	88fb      	ldrh	r3, [r7, #6]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	8979      	ldrh	r1, [r7, #10]
 8001fd6:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_I2C_Mem_Write_IT+0x110>)
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f001 fb78 	bl	80036d4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001fec:	2101      	movs	r1, #1
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f001 fba2 	bl	8003738 <I2C_Enable_IRQ>

    return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e000      	b.n	8001ffa <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001ff8:	2302      	movs	r3, #2
  }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	ffff0000 	.word	0xffff0000
 8002008:	080022d9 	.word	0x080022d9
 800200c:	80002000 	.word	0x80002000

08002010 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af02      	add	r7, sp, #8
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	4608      	mov	r0, r1
 800201a:	4611      	mov	r1, r2
 800201c:	461a      	mov	r2, r3
 800201e:	4603      	mov	r3, r0
 8002020:	817b      	strh	r3, [r7, #10]
 8002022:	460b      	mov	r3, r1
 8002024:	813b      	strh	r3, [r7, #8]
 8002026:	4613      	mov	r3, r2
 8002028:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b20      	cmp	r3, #32
 8002034:	d166      	bne.n	8002104 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <HAL_I2C_Mem_Read_IT+0x32>
 800203c:	8bbb      	ldrh	r3, [r7, #28]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d105      	bne.n	800204e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e05b      	b.n	8002106 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002058:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800205c:	d101      	bne.n	8002062 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800205e:	2302      	movs	r3, #2
 8002060:	e051      	b.n	8002106 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_I2C_Mem_Read_IT+0x60>
 800206c:	2302      	movs	r3, #2
 800206e:	e04a      	b.n	8002106 <HAL_I2C_Mem_Read_IT+0xf6>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2222      	movs	r2, #34	; 0x22
 800207c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2240      	movs	r2, #64	; 0x40
 8002084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8bba      	ldrh	r2, [r7, #28]
 8002098:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_I2C_Mem_Read_IT+0x100>)
 800209e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <HAL_I2C_Mem_Read_IT+0x104>)
 80020a4:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 80020a6:	897a      	ldrh	r2, [r7, #10]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d109      	bne.n	80020c6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020b2:	893b      	ldrh	r3, [r7, #8]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f04f 32ff 	mov.w	r2, #4294967295
 80020c2:	651a      	str	r2, [r3, #80]	; 0x50
 80020c4:	e00b      	b.n	80020de <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020c6:	893b      	ldrh	r3, [r7, #8]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80020d4:	893b      	ldrh	r3, [r7, #8]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	8979      	ldrh	r1, [r7, #10]
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_I2C_Mem_Read_IT+0x108>)
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2300      	movs	r3, #0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f001 faf2 	bl	80036d4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020f8:	2101      	movs	r1, #1
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f001 fb1c 	bl	8003738 <I2C_Enable_IRQ>

    return HAL_OK;
 8002100:	2300      	movs	r3, #0
 8002102:	e000      	b.n	8002106 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002104:	2302      	movs	r3, #2
  }
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	ffff0000 	.word	0xffff0000
 8002114:	080022d9 	.word	0x080022d9
 8002118:	80002000 	.word	0x80002000

0800211c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
  }
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00f      	beq.n	8002192 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002190:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00f      	beq.n	80021bc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f043 0208 	orr.w	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ba:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00f      	beq.n	80021e6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00a      	beq.n	80021e6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	f043 0202 	orr.w	r2, r3, #2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021e4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 030b 	and.w	r3, r3, #11
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f001 f911 	bl	8003420 <I2C_ITError>
  }
}
 80021fe:	bf00      	nop
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	70fb      	strb	r3, [r7, #3]
 8002262:	4613      	mov	r3, r2
 8002264:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80022e4:	4b8d      	ldr	r3, [pc, #564]	; (800251c <I2C_Mem_ISR_IT+0x244>)
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <I2C_Mem_ISR_IT+0x22>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e10c      	b.n	8002514 <I2C_Mem_ISR_IT+0x23c>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d012      	beq.n	8002332 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2210      	movs	r2, #16
 800231c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f043 0204 	orr.w	r2, r3, #4
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f001 f98f 	bl	800364e <I2C_Flush_TXDR>
 8002330:	e0dd      	b.n	80024ee <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d022      	beq.n	8002382 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002342:	2b00      	cmp	r3, #0
 8002344:	d01d      	beq.n	8002382 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f023 0304 	bic.w	r3, r3, #4
 800234c:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002380:	e0b5      	b.n	80024ee <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d02c      	beq.n	80023e6 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002392:	2b00      	cmp	r3, #0
 8002394:	d027      	beq.n	80023e6 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239e:	d118      	bne.n	80023d2 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b29a      	uxth	r2, r3
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80023d0:	e08d      	b.n	80024ee <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f04f 32ff 	mov.w	r2, #4294967295
 80023e2:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80023e4:	e083      	b.n	80024ee <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03c      	beq.n	800246a <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d037      	beq.n	800246a <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2b00      	cmp	r3, #0
 8002402:	d02c      	beq.n	800245e <I2C_Mem_ISR_IT+0x186>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d128      	bne.n	800245e <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2bff      	cmp	r3, #255	; 0xff
 8002414:	d910      	bls.n	8002438 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	22ff      	movs	r2, #255	; 0xff
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	b299      	uxth	r1, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002426:	b2da      	uxtb	r2, r3
 8002428:	2300      	movs	r3, #0
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f001 f94f 	bl	80036d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002436:	e017      	b.n	8002468 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	b299      	uxth	r1, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	b2da      	uxtb	r2, r3
 800244e:	2300      	movs	r3, #0
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f001 f93c 	bl	80036d4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800245c:	e004      	b.n	8002468 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 ffdd 	bl	8003420 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002466:	e042      	b.n	80024ee <I2C_Mem_ISR_IT+0x216>
 8002468:	e041      	b.n	80024ee <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d03c      	beq.n	80024ee <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800247a:	2b00      	cmp	r3, #0
 800247c:	d037      	beq.n	80024ee <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800247e:	2101      	movs	r1, #1
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f001 f9dd 	bl	8003840 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002486:	2102      	movs	r1, #2
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f001 f955 	bl	8003738 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b22      	cmp	r3, #34	; 0x22
 8002498:	d101      	bne.n	800249e <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 800249a:	4b21      	ldr	r3, [pc, #132]	; (8002520 <I2C_Mem_ISR_IT+0x248>)
 800249c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2bff      	cmp	r3, #255	; 0xff
 80024a6:	d910      	bls.n	80024ca <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	b299      	uxth	r1, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f001 f906 	bl	80036d4 <I2C_TransferConfig>
 80024c8:	e011      	b.n	80024ee <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d8:	b299      	uxth	r1, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f001 f8f3 	bl	80036d4 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002502:	6939      	ldr	r1, [r7, #16]
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fd0b 	bl	8002f20 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	80002000 	.word	0x80002000
 8002520:	80002400 	.word	0x80002400

08002524 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <I2C_Slave_ISR_IT+0x24>
 8002544:	2302      	movs	r3, #2
 8002546:	e0e2      	b.n	800270e <I2C_Slave_ISR_IT+0x1ea>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f003 0320 	and.w	r3, r3, #32
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002564:	6939      	ldr	r1, [r7, #16]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fda2 	bl	80030b0 <I2C_ITSlaveCplt>
 800256c:	e0ca      	b.n	8002704 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d04b      	beq.n	8002610 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800257e:	2b00      	cmp	r3, #0
 8002580:	d046      	beq.n	8002610 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d128      	bne.n	80025de <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b28      	cmp	r3, #40	; 0x28
 8002596:	d108      	bne.n	80025aa <I2C_Slave_ISR_IT+0x86>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800259e:	d104      	bne.n	80025aa <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80025a0:	6939      	ldr	r1, [r7, #16]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fee8 	bl	8003378 <I2C_ITListenCplt>
 80025a8:	e031      	b.n	800260e <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b29      	cmp	r3, #41	; 0x29
 80025b4:	d10e      	bne.n	80025d4 <I2C_Slave_ISR_IT+0xb0>
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025bc:	d00a      	beq.n	80025d4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2210      	movs	r2, #16
 80025c4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f001 f841 	bl	800364e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fc4b 	bl	8002e68 <I2C_ITSlaveSeqCplt>
 80025d2:	e01c      	b.n	800260e <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2210      	movs	r2, #16
 80025da:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80025dc:	e08f      	b.n	80026fe <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2210      	movs	r2, #16
 80025e4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f043 0204 	orr.w	r2, r3, #4
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <I2C_Slave_ISR_IT+0xdc>
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025fe:	d17e      	bne.n	80026fe <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	4619      	mov	r1, r3
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 ff0a 	bl	8003420 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800260c:	e077      	b.n	80026fe <I2C_Slave_ISR_IT+0x1da>
 800260e:	e076      	b.n	80026fe <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d02f      	beq.n	800267a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002620:	2b00      	cmp	r3, #0
 8002622:	d02a      	beq.n	800267a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264a:	3b01      	subs	r3, #1
 800264c:	b29a      	uxth	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d14b      	bne.n	8002702 <I2C_Slave_ISR_IT+0x1de>
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002670:	d047      	beq.n	8002702 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 fbf8 	bl	8002e68 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002678:	e043      	b.n	8002702 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b00      	cmp	r3, #0
 8002682:	d009      	beq.n	8002698 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800268a:	2b00      	cmp	r3, #0
 800268c:	d004      	beq.n	8002698 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800268e:	6939      	ldr	r1, [r7, #16]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 fb28 	bl	8002ce6 <I2C_ITAddrCplt>
 8002696:	e035      	b.n	8002704 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d030      	beq.n	8002704 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d02b      	beq.n	8002704 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d018      	beq.n	80026e8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28
 80026e6:	e00d      	b.n	8002704 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026ee:	d002      	beq.n	80026f6 <I2C_Slave_ISR_IT+0x1d2>
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80026f6:	68f8      	ldr	r0, [r7, #12]
 80026f8:	f000 fbb6 	bl	8002e68 <I2C_ITSlaveSeqCplt>
 80026fc:	e002      	b.n	8002704 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80026fe:	bf00      	nop
 8002700:	e000      	b.n	8002704 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002702:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b088      	sub	sp, #32
 800271a:	af02      	add	r7, sp, #8
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <I2C_Master_ISR_DMA+0x1a>
 800272c:	2302      	movs	r3, #2
 800272e:	e0d9      	b.n	80028e4 <I2C_Master_ISR_DMA+0x1ce>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d016      	beq.n	8002770 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002748:	2b00      	cmp	r3, #0
 800274a:	d011      	beq.n	8002770 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2210      	movs	r2, #16
 8002752:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	f043 0204 	orr.w	r2, r3, #4
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002760:	2120      	movs	r1, #32
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 ffe8 	bl	8003738 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 ff70 	bl	800364e <I2C_Flush_TXDR>
 800276e:	e0b4      	b.n	80028da <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002776:	2b00      	cmp	r3, #0
 8002778:	d071      	beq.n	800285e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002780:	2b00      	cmp	r3, #0
 8002782:	d06c      	beq.n	800285e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002792:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29b      	uxth	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d04e      	beq.n	800283c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027aa:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2bff      	cmp	r3, #255	; 0xff
 80027b4:	d906      	bls.n	80027c4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	22ff      	movs	r2, #255	; 0xff
 80027ba:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80027bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e010      	b.n	80027e6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d6:	d003      	beq.n	80027e0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e002      	b.n	80027e6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80027e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	8a79      	ldrh	r1, [r7, #18]
 80027ee:	2300      	movs	r3, #0
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 ff6d 	bl	80036d4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b22      	cmp	r3, #34	; 0x22
 8002816:	d108      	bne.n	800282a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002826:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002828:	e057      	b.n	80028da <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002838:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800283a:	e04e      	b.n	80028da <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800284a:	d003      	beq.n	8002854 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 face 	bl	8002dee <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002852:	e042      	b.n	80028da <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002854:	2140      	movs	r1, #64	; 0x40
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fde2 	bl	8003420 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800285c:	e03d      	b.n	80028da <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d028      	beq.n	80028ba <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800286e:	2b00      	cmp	r3, #0
 8002870:	d023      	beq.n	80028ba <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d119      	bne.n	80028b0 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800288a:	d025      	beq.n	80028d8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002894:	d108      	bne.n	80028a8 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028a4:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80028a6:	e017      	b.n	80028d8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 faa0 	bl	8002dee <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80028ae:	e013      	b.n	80028d8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80028b0:	2140      	movs	r1, #64	; 0x40
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fdb4 	bl	8003420 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80028b8:	e00e      	b.n	80028d8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00a      	beq.n	80028da <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fb25 	bl	8002f20 <I2C_ITMasterCplt>
 80028d6:	e000      	b.n	80028da <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80028d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3718      	adds	r7, #24
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80028f8:	4b8d      	ldr	r3, [pc, #564]	; (8002b30 <I2C_Mem_ISR_DMA+0x244>)
 80028fa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <I2C_Mem_ISR_DMA+0x1e>
 8002906:	2302      	movs	r3, #2
 8002908:	e10e      	b.n	8002b28 <I2C_Mem_ISR_DMA+0x23c>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	d016      	beq.n	800294a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002922:	2b00      	cmp	r3, #0
 8002924:	d011      	beq.n	800294a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2210      	movs	r2, #16
 800292c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f043 0204 	orr.w	r2, r3, #4
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800293a:	2120      	movs	r1, #32
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 fefb 	bl	8003738 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f000 fe83 	bl	800364e <I2C_Flush_TXDR>
 8002948:	e0e9      	b.n	8002b1e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00e      	beq.n	8002972 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002966:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f04f 32ff 	mov.w	r2, #4294967295
 800296e:	651a      	str	r2, [r3, #80]	; 0x50
 8002970:	e0d5      	b.n	8002b1e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b00      	cmp	r3, #0
 800297a:	d05f      	beq.n	8002a3c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002982:	2b00      	cmp	r3, #0
 8002984:	d05a      	beq.n	8002a3c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002986:	2101      	movs	r1, #1
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 ff59 	bl	8003840 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800298e:	2110      	movs	r1, #16
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fed1 	bl	8003738 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	2b00      	cmp	r3, #0
 800299e:	d048      	beq.n	8002a32 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	2bff      	cmp	r3, #255	; 0xff
 80029a8:	d910      	bls.n	80029cc <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	22ff      	movs	r2, #255	; 0xff
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b4:	b299      	uxth	r1, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	2300      	movs	r3, #0
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fe85 	bl	80036d4 <I2C_TransferConfig>
 80029ca:	e011      	b.n	80029f0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029da:	b299      	uxth	r1, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	2300      	movs	r3, #0
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fe72 	bl	80036d4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b22      	cmp	r3, #34	; 0x22
 8002a0c:	d108      	bne.n	8002a20 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a1c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a1e:	e07e      	b.n	8002b1e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a30:	e075      	b.n	8002b1e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fcf3 	bl	8003420 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a3a:	e070      	b.n	8002b1e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d05d      	beq.n	8002b02 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d058      	beq.n	8002b02 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a50:	2101      	movs	r1, #1
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fef4 	bl	8003840 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002a58:	2110      	movs	r1, #16
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fe6c 	bl	8003738 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b22      	cmp	r3, #34	; 0x22
 8002a6a:	d101      	bne.n	8002a70 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <I2C_Mem_ISR_DMA+0x248>)
 8002a6e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2bff      	cmp	r3, #255	; 0xff
 8002a78:	d910      	bls.n	8002a9c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	22ff      	movs	r2, #255	; 0xff
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	b299      	uxth	r1, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fe1d 	bl	80036d4 <I2C_TransferConfig>
 8002a9a:	e011      	b.n	8002ac0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aaa:	b299      	uxth	r1, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fe0a 	bl	80036d4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b22      	cmp	r3, #34	; 0x22
 8002adc:	d108      	bne.n	8002af0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aec:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aee:	e016      	b.n	8002b1e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002afe:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b00:	e00d      	b.n	8002b1e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fa01 	bl	8002f20 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	80002000 	.word	0x80002000
 8002b34:	80002400 	.word	0x80002400

08002b38 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <I2C_Slave_ISR_DMA+0x24>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e0c0      	b.n	8002cde <I2C_Slave_ISR_DMA+0x1a6>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	f003 0320 	and.w	r3, r3, #32
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fa98 	bl	80030b0 <I2C_ITSlaveCplt>
 8002b80:	e0a8      	b.n	8002cd4 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 8095 	beq.w	8002cb8 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 808f 	beq.w	8002cb8 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d104      	bne.n	8002bae <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d07d      	beq.n	8002caa <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00c      	beq.n	8002bf2 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d007      	beq.n	8002bf2 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d128      	bne.n	8002c4a <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b28      	cmp	r3, #40	; 0x28
 8002c02:	d108      	bne.n	8002c16 <I2C_Slave_ISR_DMA+0xde>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c0a:	d104      	bne.n	8002c16 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002c0c:	68b9      	ldr	r1, [r7, #8]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fbb2 	bl	8003378 <I2C_ITListenCplt>
 8002c14:	e048      	b.n	8002ca8 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b29      	cmp	r3, #41	; 0x29
 8002c20:	d10e      	bne.n	8002c40 <I2C_Slave_ISR_DMA+0x108>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c28:	d00a      	beq.n	8002c40 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2210      	movs	r2, #16
 8002c30:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fd0b 	bl	800364e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f000 f915 	bl	8002e68 <I2C_ITSlaveSeqCplt>
 8002c3e:	e033      	b.n	8002ca8 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2210      	movs	r2, #16
 8002c46:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002c48:	e034      	b.n	8002cb4 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2210      	movs	r2, #16
 8002c50:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f043 0204 	orr.w	r2, r3, #4
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c64:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <I2C_Slave_ISR_DMA+0x13c>
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c72:	d11f      	bne.n	8002cb4 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c74:	7dfb      	ldrb	r3, [r7, #23]
 8002c76:	2b21      	cmp	r3, #33	; 0x21
 8002c78:	d002      	beq.n	8002c80 <I2C_Slave_ISR_DMA+0x148>
 8002c7a:	7dfb      	ldrb	r3, [r7, #23]
 8002c7c:	2b29      	cmp	r3, #41	; 0x29
 8002c7e:	d103      	bne.n	8002c88 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2221      	movs	r2, #33	; 0x21
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
 8002c86:	e008      	b.n	8002c9a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b22      	cmp	r3, #34	; 0x22
 8002c8c:	d002      	beq.n	8002c94 <I2C_Slave_ISR_DMA+0x15c>
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b2a      	cmp	r3, #42	; 0x2a
 8002c92:	d102      	bne.n	8002c9a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2222      	movs	r2, #34	; 0x22
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fbbd 	bl	8003420 <I2C_ITError>
      if (treatdmanack == 1U)
 8002ca6:	e005      	b.n	8002cb4 <I2C_Slave_ISR_DMA+0x17c>
 8002ca8:	e004      	b.n	8002cb4 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2210      	movs	r2, #16
 8002cb0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cb2:	e00f      	b.n	8002cd4 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002cb4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cb6:	e00d      	b.n	8002cd4 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0308 	and.w	r3, r3, #8
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d008      	beq.n	8002cd4 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f809 	bl	8002ce6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cfc:	2b28      	cmp	r3, #40	; 0x28
 8002cfe:	d16a      	bne.n	8002dd6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	0c1b      	lsrs	r3, r3, #16
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d1e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d2c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002d3a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d138      	bne.n	8002db6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002d44:	897b      	ldrh	r3, [r7, #10]
 8002d46:	09db      	lsrs	r3, r3, #7
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	89bb      	ldrh	r3, [r7, #12]
 8002d4c:	4053      	eors	r3, r2
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f003 0306 	and.w	r3, r3, #6
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11c      	bne.n	8002d92 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d60:	1c5a      	adds	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d13b      	bne.n	8002de6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2208      	movs	r2, #8
 8002d7a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d84:	89ba      	ldrh	r2, [r7, #12]
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fa63 	bl	8002256 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d90:	e029      	b.n	8002de6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002d92:	893b      	ldrh	r3, [r7, #8]
 8002d94:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fd50 	bl	8003840 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002da8:	89ba      	ldrh	r2, [r7, #12]
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	4619      	mov	r1, r3
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7ff fa51 	bl	8002256 <HAL_I2C_AddrCallback>
}
 8002db4:	e017      	b.n	8002de6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002db6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fd40 	bl	8003840 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dc8:	89ba      	ldrh	r2, [r7, #12]
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	4619      	mov	r1, r3
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fa41 	bl	8002256 <HAL_I2C_AddrCallback>
}
 8002dd4:	e007      	b.n	8002de6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2208      	movs	r2, #8
 8002ddc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b21      	cmp	r3, #33	; 0x21
 8002e08:	d115      	bne.n	8002e36 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2211      	movs	r2, #17
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e1e:	2101      	movs	r1, #1
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fd0d 	bl	8003840 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff f9e9 	bl	8002206 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e34:	e014      	b.n	8002e60 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2212      	movs	r2, #18
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fcf7 	bl	8003840 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff f9dd 	bl	800221a <HAL_I2C_MasterRxCpltCallback>
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d008      	beq.n	8002e9c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e00c      	b.n	8002eb6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b29      	cmp	r3, #41	; 0x29
 8002ec0:	d112      	bne.n	8002ee8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2228      	movs	r2, #40	; 0x28
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2221      	movs	r2, #33	; 0x21
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fcb4 	bl	8003840 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff f9a4 	bl	800222e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ee6:	e017      	b.n	8002f18 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ef2:	d111      	bne.n	8002f18 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2228      	movs	r2, #40	; 0x28
 8002ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2222      	movs	r2, #34	; 0x22
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f02:	2102      	movs	r1, #2
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fc9b 	bl	8003840 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff f995 	bl	8002242 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2220      	movs	r2, #32
 8002f34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b21      	cmp	r3, #33	; 0x21
 8002f40:	d107      	bne.n	8002f52 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f42:	2101      	movs	r1, #1
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fc7b 	bl	8003840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2211      	movs	r2, #17
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f50:	e00c      	b.n	8002f6c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b22      	cmp	r3, #34	; 0x22
 8002f5c:	d106      	bne.n	8002f6c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f5e:	2102      	movs	r1, #2
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fc6d 	bl	8003840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2212      	movs	r2, #18
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6859      	ldr	r1, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	4b4c      	ldr	r3, [pc, #304]	; (80030a8 <I2C_ITMasterCplt+0x188>)
 8002f78:	400b      	ands	r3, r1
 8002f7a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a49      	ldr	r2, [pc, #292]	; (80030ac <I2C_ITMasterCplt+0x18c>)
 8002f86:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2210      	movs	r2, #16
 8002f98:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f043 0204 	orr.w	r2, r3, #4
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b60      	cmp	r3, #96	; 0x60
 8002fb0:	d10a      	bne.n	8002fc8 <I2C_ITMasterCplt+0xa8>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fb40 	bl	800364e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b60      	cmp	r3, #96	; 0x60
 8002fde:	d002      	beq.n	8002fe6 <I2C_ITMasterCplt+0xc6>
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fa17 	bl	8003420 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002ff2:	e054      	b.n	800309e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b21      	cmp	r3, #33	; 0x21
 8002ffe:	d124      	bne.n	800304a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d10b      	bne.n	8003032 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff f92b 	bl	8002286 <HAL_I2C_MemTxCpltCallback>
}
 8003030:	e035      	b.n	800309e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7ff f8df 	bl	8002206 <HAL_I2C_MasterTxCpltCallback>
}
 8003048:	e029      	b.n	800309e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b22      	cmp	r3, #34	; 0x22
 8003054:	d123      	bne.n	800309e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d10b      	bne.n	8003088 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff f90a 	bl	800229a <HAL_I2C_MemRxCpltCallback>
}
 8003086:	e00a      	b.n	800309e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff f8be 	bl	800221a <HAL_I2C_MasterRxCpltCallback>
}
 800309e:	bf00      	nop
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	fe00e800 	.word	0xfe00e800
 80030ac:	ffff0000 	.word	0xffff0000

080030b0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2220      	movs	r2, #32
 80030da:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030dc:	7afb      	ldrb	r3, [r7, #11]
 80030de:	2b21      	cmp	r3, #33	; 0x21
 80030e0:	d002      	beq.n	80030e8 <I2C_ITSlaveCplt+0x38>
 80030e2:	7afb      	ldrb	r3, [r7, #11]
 80030e4:	2b29      	cmp	r3, #41	; 0x29
 80030e6:	d108      	bne.n	80030fa <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80030e8:	f248 0101 	movw	r1, #32769	; 0x8001
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fba7 	bl	8003840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2221      	movs	r2, #33	; 0x21
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
 80030f8:	e019      	b.n	800312e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030fa:	7afb      	ldrb	r3, [r7, #11]
 80030fc:	2b22      	cmp	r3, #34	; 0x22
 80030fe:	d002      	beq.n	8003106 <I2C_ITSlaveCplt+0x56>
 8003100:	7afb      	ldrb	r3, [r7, #11]
 8003102:	2b2a      	cmp	r3, #42	; 0x2a
 8003104:	d108      	bne.n	8003118 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003106:	f248 0102 	movw	r1, #32770	; 0x8002
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fb98 	bl	8003840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2222      	movs	r2, #34	; 0x22
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
 8003116:	e00a      	b.n	800312e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003118:	7afb      	ldrb	r3, [r7, #11]
 800311a:	2b28      	cmp	r3, #40	; 0x28
 800311c:	d107      	bne.n	800312e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800311e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fb8c 	bl	8003840 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800313c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6859      	ldr	r1, [r3, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b89      	ldr	r3, [pc, #548]	; (8003370 <I2C_ITSlaveCplt+0x2c0>)
 800314a:	400b      	ands	r3, r1
 800314c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fa7d 	bl	800364e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d013      	beq.n	8003186 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800316c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01f      	beq.n	80031b6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003184:	e017      	b.n	80031b6 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d012      	beq.n	80031b6 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800319e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d006      	beq.n	80031b6 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0304 	bic.w	r3, r3, #4
 80031c6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00c      	beq.n	8003202 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003210:	f043 0204 	orr.w	r2, r3, #4
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d049      	beq.n	80032b6 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003228:	2b00      	cmp	r3, #0
 800322a:	d044      	beq.n	80032b6 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d128      	bne.n	8003288 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b28      	cmp	r3, #40	; 0x28
 8003240:	d108      	bne.n	8003254 <I2C_ITSlaveCplt+0x1a4>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003248:	d104      	bne.n	8003254 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800324a:	6979      	ldr	r1, [r7, #20]
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f893 	bl	8003378 <I2C_ITListenCplt>
 8003252:	e030      	b.n	80032b6 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b29      	cmp	r3, #41	; 0x29
 800325e:	d10e      	bne.n	800327e <I2C_ITSlaveCplt+0x1ce>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003266:	d00a      	beq.n	800327e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2210      	movs	r2, #16
 800326e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f9ec 	bl	800364e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff fdf6 	bl	8002e68 <I2C_ITSlaveSeqCplt>
 800327c:	e01b      	b.n	80032b6 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2210      	movs	r2, #16
 8003284:	61da      	str	r2, [r3, #28]
 8003286:	e016      	b.n	80032b6 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2210      	movs	r2, #16
 800328e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	f043 0204 	orr.w	r2, r3, #4
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <I2C_ITSlaveCplt+0x1fa>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a8:	d105      	bne.n	80032b6 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ae:	4619      	mov	r1, r3
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f8b5 	bl	8003420 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d0:	4619      	mov	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f8a4 	bl	8003420 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b28      	cmp	r3, #40	; 0x28
 80032e2:	d141      	bne.n	8003368 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80032e4:	6979      	ldr	r1, [r7, #20]
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f846 	bl	8003378 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032ec:	e03c      	b.n	8003368 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f6:	d014      	beq.n	8003322 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fdb5 	bl	8002e68 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a1c      	ldr	r2, [pc, #112]	; (8003374 <I2C_ITSlaveCplt+0x2c4>)
 8003302:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fe ffa9 	bl	8002272 <HAL_I2C_ListenCpltCallback>
}
 8003320:	e022      	b.n	8003368 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b22      	cmp	r3, #34	; 0x22
 800332c:	d10e      	bne.n	800334c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fe ff7c 	bl	8002242 <HAL_I2C_SlaveRxCpltCallback>
}
 800334a:	e00d      	b.n	8003368 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fe ff63 	bl	800222e <HAL_I2C_SlaveTxCpltCallback>
}
 8003368:	bf00      	nop
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	fe00e800 	.word	0xfe00e800
 8003374:	ffff0000 	.word	0xffff0000

08003378 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a25      	ldr	r2, [pc, #148]	; (800341c <I2C_ITListenCplt+0xa4>)
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2220      	movs	r2, #32
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d022      	beq.n	80033f4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d012      	beq.n	80033f4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ec:	f043 0204 	orr.w	r2, r3, #4
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033f4:	f248 0103 	movw	r1, #32771	; 0x8003
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 fa21 	bl	8003840 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2210      	movs	r2, #16
 8003404:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe ff2f 	bl	8002272 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003414:	bf00      	nop
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	ffff0000 	.word	0xffff0000

08003420 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003430:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a6d      	ldr	r2, [pc, #436]	; (80035f4 <I2C_ITError+0x1d4>)
 800343e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	2b28      	cmp	r3, #40	; 0x28
 8003456:	d005      	beq.n	8003464 <I2C_ITError+0x44>
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	2b29      	cmp	r3, #41	; 0x29
 800345c:	d002      	beq.n	8003464 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	2b2a      	cmp	r3, #42	; 0x2a
 8003462:	d10b      	bne.n	800347c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003464:	2103      	movs	r1, #3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f9ea 	bl	8003840 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2228      	movs	r2, #40	; 0x28
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a60      	ldr	r2, [pc, #384]	; (80035f8 <I2C_ITError+0x1d8>)
 8003478:	635a      	str	r2, [r3, #52]	; 0x34
 800347a:	e030      	b.n	80034de <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800347c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f9dd 	bl	8003840 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8e1 	bl	800364e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b60      	cmp	r3, #96	; 0x60
 8003496:	d01f      	beq.n	80034d8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	f003 0320 	and.w	r3, r3, #32
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	d114      	bne.n	80034d8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b10      	cmp	r3, #16
 80034ba:	d109      	bne.n	80034d0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2210      	movs	r2, #16
 80034c2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c8:	f043 0204 	orr.w	r2, r3, #4
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2220      	movs	r2, #32
 80034d6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d039      	beq.n	8003560 <I2C_ITError+0x140>
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b11      	cmp	r3, #17
 80034f0:	d002      	beq.n	80034f8 <I2C_ITError+0xd8>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b21      	cmp	r3, #33	; 0x21
 80034f6:	d133      	bne.n	8003560 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003506:	d107      	bne.n	8003518 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003516:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe f9cf 	bl	80018c0 <HAL_DMA_GetState>
 8003522:	4603      	mov	r3, r0
 8003524:	2b01      	cmp	r3, #1
 8003526:	d017      	beq.n	8003558 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	4a33      	ldr	r2, [pc, #204]	; (80035fc <I2C_ITError+0x1dc>)
 800352e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe f8a9 	bl	8001694 <HAL_DMA_Abort_IT>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d04d      	beq.n	80035e4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003552:	4610      	mov	r0, r2
 8003554:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003556:	e045      	b.n	80035e4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 f851 	bl	8003600 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800355e:	e041      	b.n	80035e4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	2b00      	cmp	r3, #0
 8003566:	d039      	beq.n	80035dc <I2C_ITError+0x1bc>
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b12      	cmp	r3, #18
 800356c:	d002      	beq.n	8003574 <I2C_ITError+0x154>
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b22      	cmp	r3, #34	; 0x22
 8003572:	d133      	bne.n	80035dc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800357e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003582:	d107      	bne.n	8003594 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003598:	4618      	mov	r0, r3
 800359a:	f7fe f991 	bl	80018c0 <HAL_DMA_GetState>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d017      	beq.n	80035d4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	4a14      	ldr	r2, [pc, #80]	; (80035fc <I2C_ITError+0x1dc>)
 80035aa:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe f86b 	bl	8001694 <HAL_DMA_Abort_IT>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d011      	beq.n	80035e8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035ce:	4610      	mov	r0, r2
 80035d0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035d2:	e009      	b.n	80035e8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f813 	bl	8003600 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035da:	e005      	b.n	80035e8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 f80f 	bl	8003600 <I2C_TreatErrorCallback>
  }
}
 80035e2:	e002      	b.n	80035ea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035e4:	bf00      	nop
 80035e6:	e000      	b.n	80035ea <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035e8:	bf00      	nop
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	ffff0000 	.word	0xffff0000
 80035f8:	08002525 	.word	0x08002525
 80035fc:	08003697 	.word	0x08003697

08003600 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b60      	cmp	r3, #96	; 0x60
 8003612:	d10e      	bne.n	8003632 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7fe fe49 	bl	80022c2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003630:	e009      	b.n	8003646 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7fe fe34 	bl	80022ae <HAL_I2C_ErrorCallback>
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b02      	cmp	r3, #2
 8003662:	d103      	bne.n	800366c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2200      	movs	r2, #0
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d007      	beq.n	800368a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f042 0201 	orr.w	r2, r2, #1
 8003688:	619a      	str	r2, [r3, #24]
  }
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	2200      	movs	r2, #0
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	2200      	movs	r2, #0
 80036c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f7ff ff9b 	bl	8003600 <I2C_TreatErrorCallback>
}
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	817b      	strh	r3, [r7, #10]
 80036e2:	4613      	mov	r3, r2
 80036e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036e6:	897b      	ldrh	r3, [r7, #10]
 80036e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036ec:	7a7b      	ldrb	r3, [r7, #9]
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003702:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	0d5b      	lsrs	r3, r3, #21
 800370e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <I2C_TransferConfig+0x60>)
 8003714:	430b      	orrs	r3, r1
 8003716:	43db      	mvns	r3, r3
 8003718:	ea02 0103 	and.w	r1, r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003726:	bf00      	nop
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	03ff63ff 	.word	0x03ff63ff

08003738 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374c:	4a39      	ldr	r2, [pc, #228]	; (8003834 <I2C_Enable_IRQ+0xfc>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d032      	beq.n	80037b8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003756:	4a38      	ldr	r2, [pc, #224]	; (8003838 <I2C_Enable_IRQ+0x100>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d02d      	beq.n	80037b8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003760:	4a36      	ldr	r2, [pc, #216]	; (800383c <I2C_Enable_IRQ+0x104>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d028      	beq.n	80037b8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003766:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800376a:	2b00      	cmp	r3, #0
 800376c:	da03      	bge.n	8003776 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003774:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003786:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003798:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800379a:	887b      	ldrh	r3, [r7, #2]
 800379c:	2b10      	cmp	r3, #16
 800379e:	d103      	bne.n	80037a8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80037a6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037a8:	887b      	ldrh	r3, [r7, #2]
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d133      	bne.n	8003816 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f043 0320 	orr.w	r3, r3, #32
 80037b4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037b6:	e02e      	b.n	8003816 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80037b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	da03      	bge.n	80037c8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80037c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80037c8:	887b      	ldrh	r3, [r7, #2]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80037d8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80037da:	887b      	ldrh	r3, [r7, #2]
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80037ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	2b10      	cmp	r3, #16
 80037f0:	d103      	bne.n	80037fa <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80037f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037fa:	887b      	ldrh	r3, [r7, #2]
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	d103      	bne.n	8003808 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003806:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d103      	bne.n	8003816 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003814:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6819      	ldr	r1, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	430a      	orrs	r2, r1
 8003824:	601a      	str	r2, [r3, #0]
}
 8003826:	bf00      	nop
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	08002717 	.word	0x08002717
 8003838:	08002b39 	.word	0x08002b39
 800383c:	080028ed 	.word	0x080028ed

08003840 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003850:	887b      	ldrh	r3, [r7, #2]
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00f      	beq.n	800387a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003860:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800386e:	2b28      	cmp	r3, #40	; 0x28
 8003870:	d003      	beq.n	800387a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003878:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00f      	beq.n	80038a4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800388a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003892:	b2db      	uxtb	r3, r3
 8003894:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003898:	2b28      	cmp	r3, #40	; 0x28
 800389a:	d003      	beq.n	80038a4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80038a2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80038a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	da03      	bge.n	80038b4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80038b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d103      	bne.n	80038c2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80038c2:	887b      	ldrh	r3, [r7, #2]
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d103      	bne.n	80038d0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f043 0320 	orr.w	r3, r3, #32
 80038ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80038d0:	887b      	ldrh	r3, [r7, #2]
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d103      	bne.n	80038de <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038dc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6819      	ldr	r1, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	43da      	mvns	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	400a      	ands	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	d138      	bne.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800391c:	2302      	movs	r3, #2
 800391e:	e032      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	; 0x24
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800394e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6819      	ldr	r1, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	e000      	b.n	8003986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003984:	2302      	movs	r3, #2
  }
}
 8003986:	4618      	mov	r0, r3
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003992:	b480      	push	{r7}
 8003994:	b085      	sub	sp, #20
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
 800399a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b20      	cmp	r3, #32
 80039a6:	d139      	bne.n	8003a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e033      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2224      	movs	r2, #36	; 0x24
 80039c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0201 	bic.w	r2, r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d141      	bne.n	8003abe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a3a:	4b4b      	ldr	r3, [pc, #300]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a46:	d131      	bne.n	8003aac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a48:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4e:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a58:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a60:	4a41      	ldr	r2, [pc, #260]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a68:	4b40      	ldr	r3, [pc, #256]	; (8003b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2232      	movs	r2, #50	; 0x32
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	4a3f      	ldr	r2, [pc, #252]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	0c9b      	lsrs	r3, r3, #18
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a7e:	e002      	b.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a86:	4b38      	ldr	r3, [pc, #224]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a92:	d102      	bne.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1f2      	bne.n	8003a80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a9a:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa6:	d158      	bne.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e057      	b.n	8003b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003aac:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab2:	4a2d      	ldr	r2, [pc, #180]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003abc:	e04d      	b.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac4:	d141      	bne.n	8003b4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ac6:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad2:	d131      	bne.n	8003b38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ada:	4a23      	ldr	r2, [pc, #140]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ae4:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aec:	4a1e      	ldr	r2, [pc, #120]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003af2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003af4:	4b1d      	ldr	r3, [pc, #116]	; (8003b6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2232      	movs	r2, #50	; 0x32
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	4a1c      	ldr	r2, [pc, #112]	; (8003b70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	0c9b      	lsrs	r3, r3, #18
 8003b06:	3301      	adds	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b0a:	e002      	b.n	8003b12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1e:	d102      	bne.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f2      	bne.n	8003b0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b26:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b32:	d112      	bne.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	e011      	b.n	8003b5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b38:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b48:	e007      	b.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b52:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	431bde83 	.word	0x431bde83

08003b74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003b78:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b82:	6093      	str	r3, [r2, #8]
}
 8003b84:	bf00      	nop
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40007000 	.word	0x40007000

08003b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e2fe      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d075      	beq.n	8003c9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb2:	4b97      	ldr	r3, [pc, #604]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bbc:	4b94      	ldr	r3, [pc, #592]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0303 	and.w	r3, r3, #3
 8003bc4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b0c      	cmp	r3, #12
 8003bca:	d102      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x3e>
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d002      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x44>
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	4b8d      	ldr	r3, [pc, #564]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05b      	beq.n	8003c9c <HAL_RCC_OscConfig+0x108>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d157      	bne.n	8003c9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e2d9      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCC_OscConfig+0x74>
 8003bfa:	4b85      	ldr	r3, [pc, #532]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a84      	ldr	r2, [pc, #528]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e01d      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x98>
 8003c12:	4b7f      	ldr	r3, [pc, #508]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7e      	ldr	r2, [pc, #504]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b7c      	ldr	r3, [pc, #496]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a7b      	ldr	r2, [pc, #492]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	e00b      	b.n	8003c44 <HAL_RCC_OscConfig+0xb0>
 8003c2c:	4b78      	ldr	r3, [pc, #480]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a77      	ldr	r2, [pc, #476]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	4b75      	ldr	r3, [pc, #468]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a74      	ldr	r2, [pc, #464]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d013      	beq.n	8003c74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4c:	f7fd fa68 	bl	8001120 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fd fa64 	bl	8001120 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e29e      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c66:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0xc0>
 8003c72:	e014      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd fa54 	bl	8001120 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c7c:	f7fd fa50 	bl	8001120 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b64      	cmp	r3, #100	; 0x64
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e28a      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8e:	4b60      	ldr	r3, [pc, #384]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1f0      	bne.n	8003c7c <HAL_RCC_OscConfig+0xe8>
 8003c9a:	e000      	b.n	8003c9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d075      	beq.n	8003d96 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003caa:	4b59      	ldr	r3, [pc, #356]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb4:	4b56      	ldr	r3, [pc, #344]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b0c      	cmp	r3, #12
 8003cc2:	d102      	bne.n	8003cca <HAL_RCC_OscConfig+0x136>
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d002      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x13c>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d11f      	bne.n	8003d10 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd0:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x154>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e25d      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce8:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	4946      	ldr	r1, [pc, #280]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cfc:	4b45      	ldr	r3, [pc, #276]	; (8003e14 <HAL_RCC_OscConfig+0x280>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fd f9c1 	bl	8001088 <HAL_InitTick>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d043      	beq.n	8003d94 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e249      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d023      	beq.n	8003d60 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d18:	4b3d      	ldr	r3, [pc, #244]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a3c      	ldr	r2, [pc, #240]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fd f9fc 	bl	8001120 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2c:	f7fd f9f8 	bl	8001120 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e232      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d3e:	4b34      	ldr	r3, [pc, #208]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4a:	4b31      	ldr	r3, [pc, #196]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	061b      	lsls	r3, r3, #24
 8003d58:	492d      	ldr	r1, [pc, #180]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
 8003d5e:	e01a      	b.n	8003d96 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d60:	4b2b      	ldr	r3, [pc, #172]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2a      	ldr	r2, [pc, #168]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003d66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fd f9d8 	bl	8001120 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d74:	f7fd f9d4 	bl	8001120 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e20e      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d86:	4b22      	ldr	r3, [pc, #136]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1e0>
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d041      	beq.n	8003e26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d01c      	beq.n	8003de4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003daa:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003dac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db0:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dba:	f7fd f9b1 	bl	8001120 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc2:	f7fd f9ad 	bl	8001120 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e1e7      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0ef      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x22e>
 8003de2:	e020      	b.n	8003e26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <HAL_RCC_OscConfig+0x27c>)
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df4:	f7fd f994 	bl	8001120 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dfa:	e00d      	b.n	8003e18 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dfc:	f7fd f990 	bl	8001120 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d906      	bls.n	8003e18 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e1ca      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e18:	4b8c      	ldr	r3, [pc, #560]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ea      	bne.n	8003dfc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80a6 	beq.w	8003f80 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e34:	2300      	movs	r3, #0
 8003e36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e38:	4b84      	ldr	r3, [pc, #528]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_OscConfig+0x2b4>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <HAL_RCC_OscConfig+0x2b6>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00d      	beq.n	8003e6a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	4b7f      	ldr	r3, [pc, #508]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e52:	4a7e      	ldr	r2, [pc, #504]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e58:	6593      	str	r3, [r2, #88]	; 0x58
 8003e5a:	4b7c      	ldr	r3, [pc, #496]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e66:	2301      	movs	r3, #1
 8003e68:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e6a:	4b79      	ldr	r3, [pc, #484]	; (8004050 <HAL_RCC_OscConfig+0x4bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d118      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e76:	4b76      	ldr	r3, [pc, #472]	; (8004050 <HAL_RCC_OscConfig+0x4bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a75      	ldr	r2, [pc, #468]	; (8004050 <HAL_RCC_OscConfig+0x4bc>)
 8003e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e82:	f7fd f94d 	bl	8001120 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8a:	f7fd f949 	bl	8001120 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e183      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9c:	4b6c      	ldr	r3, [pc, #432]	; (8004050 <HAL_RCC_OscConfig+0x4bc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d108      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x32e>
 8003eb0:	4b66      	ldr	r3, [pc, #408]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	4a65      	ldr	r2, [pc, #404]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ec0:	e024      	b.n	8003f0c <HAL_RCC_OscConfig+0x378>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b05      	cmp	r3, #5
 8003ec8:	d110      	bne.n	8003eec <HAL_RCC_OscConfig+0x358>
 8003eca:	4b60      	ldr	r3, [pc, #384]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	4a5e      	ldr	r2, [pc, #376]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003ed2:	f043 0304 	orr.w	r3, r3, #4
 8003ed6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eda:	4b5c      	ldr	r3, [pc, #368]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee0:	4a5a      	ldr	r2, [pc, #360]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eea:	e00f      	b.n	8003f0c <HAL_RCC_OscConfig+0x378>
 8003eec:	4b57      	ldr	r3, [pc, #348]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	4a56      	ldr	r2, [pc, #344]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003efc:	4b53      	ldr	r3, [pc, #332]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	4a52      	ldr	r2, [pc, #328]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003f04:	f023 0304 	bic.w	r3, r3, #4
 8003f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d016      	beq.n	8003f42 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fd f904 	bl	8001120 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1c:	f7fd f900 	bl	8001120 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e138      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f32:	4b46      	ldr	r3, [pc, #280]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ed      	beq.n	8003f1c <HAL_RCC_OscConfig+0x388>
 8003f40:	e015      	b.n	8003f6e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fd f8ed 	bl	8001120 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4a:	f7fd f8e9 	bl	8001120 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e121      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f60:	4b3a      	ldr	r3, [pc, #232]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1ed      	bne.n	8003f4a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f6e:	7ffb      	ldrb	r3, [r7, #31]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d105      	bne.n	8003f80 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f74:	4b35      	ldr	r3, [pc, #212]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f78:	4a34      	ldr	r2, [pc, #208]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d03c      	beq.n	8004006 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01c      	beq.n	8003fce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f94:	4b2d      	ldr	r3, [pc, #180]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003f96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f9a:	4a2c      	ldr	r2, [pc, #176]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003f9c:	f043 0301 	orr.w	r3, r3, #1
 8003fa0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa4:	f7fd f8bc 	bl	8001120 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fac:	f7fd f8b8 	bl	8001120 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e0f2      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fbe:	4b23      	ldr	r3, [pc, #140]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d0ef      	beq.n	8003fac <HAL_RCC_OscConfig+0x418>
 8003fcc:	e01b      	b.n	8004006 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fce:	4b1f      	ldr	r3, [pc, #124]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fd4:	4a1d      	ldr	r2, [pc, #116]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7fd f89f 	bl	8001120 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fe6:	f7fd f89b 	bl	8001120 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0d5      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ff8:	4b14      	ldr	r3, [pc, #80]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8003ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ef      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 80c9 	beq.w	80041a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b0c      	cmp	r3, #12
 800401a:	f000 8083 	beq.w	8004124 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69db      	ldr	r3, [r3, #28]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d15e      	bne.n	80040e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004026:	4b09      	ldr	r3, [pc, #36]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <HAL_RCC_OscConfig+0x4b8>)
 800402c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004032:	f7fd f875 	bl	8001120 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004038:	e00c      	b.n	8004054 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fd f871 	bl	8001120 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d905      	bls.n	8004054 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e0ab      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
 800404c:	40021000 	.word	0x40021000
 8004050:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004054:	4b55      	ldr	r3, [pc, #340]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ec      	bne.n	800403a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004060:	4b52      	ldr	r3, [pc, #328]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	4b52      	ldr	r3, [pc, #328]	; (80041b0 <HAL_RCC_OscConfig+0x61c>)
 8004066:	4013      	ands	r3, r2
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6a11      	ldr	r1, [r2, #32]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004070:	3a01      	subs	r2, #1
 8004072:	0112      	lsls	r2, r2, #4
 8004074:	4311      	orrs	r1, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800407a:	0212      	lsls	r2, r2, #8
 800407c:	4311      	orrs	r1, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004082:	0852      	lsrs	r2, r2, #1
 8004084:	3a01      	subs	r2, #1
 8004086:	0552      	lsls	r2, r2, #21
 8004088:	4311      	orrs	r1, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800408e:	0852      	lsrs	r2, r2, #1
 8004090:	3a01      	subs	r2, #1
 8004092:	0652      	lsls	r2, r2, #25
 8004094:	4311      	orrs	r1, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800409a:	06d2      	lsls	r2, r2, #27
 800409c:	430a      	orrs	r2, r1
 800409e:	4943      	ldr	r1, [pc, #268]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040a4:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a40      	ldr	r2, [pc, #256]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 80040aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040b0:	4b3e      	ldr	r3, [pc, #248]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4a3d      	ldr	r2, [pc, #244]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 80040b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040bc:	f7fd f830 	bl	8001120 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c4:	f7fd f82c 	bl	8001120 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e066      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d6:	4b35      	ldr	r3, [pc, #212]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0f0      	beq.n	80040c4 <HAL_RCC_OscConfig+0x530>
 80040e2:	e05e      	b.n	80041a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e4:	4b31      	ldr	r3, [pc, #196]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a30      	ldr	r2, [pc, #192]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 80040ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f0:	f7fd f816 	bl	8001120 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fd f812 	bl	8001120 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e04c      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410a:	4b28      	ldr	r3, [pc, #160]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004116:	4b25      	ldr	r3, [pc, #148]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	4924      	ldr	r1, [pc, #144]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 800411c:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <HAL_RCC_OscConfig+0x620>)
 800411e:	4013      	ands	r3, r2
 8004120:	60cb      	str	r3, [r1, #12]
 8004122:	e03e      	b.n	80041a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e039      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004130:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <HAL_RCC_OscConfig+0x618>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f003 0203 	and.w	r2, r3, #3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	429a      	cmp	r2, r3
 8004142:	d12c      	bne.n	800419e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	3b01      	subs	r3, #1
 8004150:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d123      	bne.n	800419e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004162:	429a      	cmp	r2, r3
 8004164:	d11b      	bne.n	800419e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004172:	429a      	cmp	r2, r3
 8004174:	d113      	bne.n	800419e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	3b01      	subs	r3, #1
 8004184:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d109      	bne.n	800419e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	3b01      	subs	r3, #1
 8004198:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d001      	beq.n	80041a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3720      	adds	r7, #32
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000
 80041b0:	019f800c 	.word	0x019f800c
 80041b4:	feeefffc 	.word	0xfeeefffc

080041b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e11e      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d0:	4b91      	ldr	r3, [pc, #580]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d910      	bls.n	8004200 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b8e      	ldr	r3, [pc, #568]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 020f 	bic.w	r2, r3, #15
 80041e6:	498c      	ldr	r1, [pc, #560]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b8a      	ldr	r3, [pc, #552]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e106      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b00      	cmp	r3, #0
 800420a:	d073      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	2b03      	cmp	r3, #3
 8004212:	d129      	bne.n	8004268 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004214:	4b81      	ldr	r3, [pc, #516]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e0f4      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004224:	f000 f99e 	bl	8004564 <RCC_GetSysClockFreqFromPLLSource>
 8004228:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4a7c      	ldr	r2, [pc, #496]	; (8004420 <HAL_RCC_ClockConfig+0x268>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d93f      	bls.n	80042b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004232:	4b7a      	ldr	r3, [pc, #488]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004246:	2b00      	cmp	r3, #0
 8004248:	d033      	beq.n	80042b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800424e:	2b00      	cmp	r3, #0
 8004250:	d12f      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004252:	4b72      	ldr	r3, [pc, #456]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800425a:	4a70      	ldr	r2, [pc, #448]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 800425c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004260:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	e024      	b.n	80042b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d107      	bne.n	8004280 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004270:	4b6a      	ldr	r3, [pc, #424]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d109      	bne.n	8004290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0c6      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004280:	4b66      	ldr	r3, [pc, #408]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0be      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004290:	f000 f8ce 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 8004294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4a61      	ldr	r2, [pc, #388]	; (8004420 <HAL_RCC_ClockConfig+0x268>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d909      	bls.n	80042b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800429e:	4b5f      	ldr	r3, [pc, #380]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042a6:	4a5d      	ldr	r2, [pc, #372]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80042a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b2:	4b5a      	ldr	r3, [pc, #360]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f023 0203 	bic.w	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4957      	ldr	r1, [pc, #348]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fc ff2c 	bl	8001120 <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042cc:	f7fc ff28 	bl	8001120 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e095      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	4b4e      	ldr	r3, [pc, #312]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 020c 	and.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1eb      	bne.n	80042cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d023      	beq.n	8004348 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800430c:	4b43      	ldr	r3, [pc, #268]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a42      	ldr	r2, [pc, #264]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004316:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0308 	and.w	r3, r3, #8
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004324:	4b3d      	ldr	r3, [pc, #244]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800432c:	4a3b      	ldr	r2, [pc, #236]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 800432e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004332:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004334:	4b39      	ldr	r3, [pc, #228]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	4936      	ldr	r1, [pc, #216]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
 8004346:	e008      	b.n	800435a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	2b80      	cmp	r3, #128	; 0x80
 800434c:	d105      	bne.n	800435a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800434e:	4b33      	ldr	r3, [pc, #204]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	4a32      	ldr	r2, [pc, #200]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 8004354:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004358:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800435a:	4b2f      	ldr	r3, [pc, #188]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d21d      	bcs.n	80043a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004368:	4b2b      	ldr	r3, [pc, #172]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 020f 	bic.w	r2, r3, #15
 8004370:	4929      	ldr	r1, [pc, #164]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004378:	f7fc fed2 	bl	8001120 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437e:	e00a      	b.n	8004396 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fc fece 	bl	8001120 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e03b      	b.n	800440e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b20      	ldr	r3, [pc, #128]	; (8004418 <HAL_RCC_ClockConfig+0x260>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1ed      	bne.n	8004380 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043b0:	4b1a      	ldr	r3, [pc, #104]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4917      	ldr	r1, [pc, #92]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d009      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043ce:	4b13      	ldr	r3, [pc, #76]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	490f      	ldr	r1, [pc, #60]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043e2:	f000 f825 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80043e6:	4602      	mov	r2, r0
 80043e8:	4b0c      	ldr	r3, [pc, #48]	; (800441c <HAL_RCC_ClockConfig+0x264>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	490c      	ldr	r1, [pc, #48]	; (8004424 <HAL_RCC_ClockConfig+0x26c>)
 80043f4:	5ccb      	ldrb	r3, [r1, r3]
 80043f6:	f003 031f 	and.w	r3, r3, #31
 80043fa:	fa22 f303 	lsr.w	r3, r2, r3
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <HAL_RCC_ClockConfig+0x270>)
 8004400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x274>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc fe3e 	bl	8001088 <HAL_InitTick>
 800440c:	4603      	mov	r3, r0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40022000 	.word	0x40022000
 800441c:	40021000 	.word	0x40021000
 8004420:	04c4b400 	.word	0x04c4b400
 8004424:	080064f0 	.word	0x080064f0
 8004428:	20000000 	.word	0x20000000
 800442c:	20000004 	.word	0x20000004

08004430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	b087      	sub	sp, #28
 8004434:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004436:	4b2c      	ldr	r3, [pc, #176]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b04      	cmp	r3, #4
 8004440:	d102      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004442:	4b2a      	ldr	r3, [pc, #168]	; (80044ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	e047      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004448:	4b27      	ldr	r3, [pc, #156]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b08      	cmp	r3, #8
 8004452:	d102      	bne.n	800445a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	e03e      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800445a:	4b23      	ldr	r3, [pc, #140]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b0c      	cmp	r3, #12
 8004464:	d136      	bne.n	80044d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004466:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	3301      	adds	r3, #1
 800447c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d10c      	bne.n	800449e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004484:	4a1a      	ldr	r2, [pc, #104]	; (80044f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	fbb2 f3f3 	udiv	r3, r2, r3
 800448c:	4a16      	ldr	r2, [pc, #88]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800448e:	68d2      	ldr	r2, [r2, #12]
 8004490:	0a12      	lsrs	r2, r2, #8
 8004492:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004496:	fb02 f303 	mul.w	r3, r2, r3
 800449a:	617b      	str	r3, [r7, #20]
      break;
 800449c:	e00c      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800449e:	4a13      	ldr	r2, [pc, #76]	; (80044ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044a8:	68d2      	ldr	r2, [r2, #12]
 80044aa:	0a12      	lsrs	r2, r2, #8
 80044ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80044b0:	fb02 f303 	mul.w	r3, r2, r3
 80044b4:	617b      	str	r3, [r7, #20]
      break;
 80044b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	0e5b      	lsrs	r3, r3, #25
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	3301      	adds	r3, #1
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e001      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044d8:	693b      	ldr	r3, [r7, #16]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	371c      	adds	r7, #28
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40021000 	.word	0x40021000
 80044ec:	00f42400 	.word	0x00f42400
 80044f0:	016e3600 	.word	0x016e3600

080044f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f8:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_RCC_GetHCLKFreq+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000000 	.word	0x20000000

0800450c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004510:	f7ff fff0 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4904      	ldr	r1, [pc, #16]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	08006500 	.word	0x08006500

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800453c:	f7ff ffda 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0adb      	lsrs	r3, r3, #11
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4904      	ldr	r1, [pc, #16]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	08006500 	.word	0x08006500

08004564 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800456a:	4b1e      	ldr	r3, [pc, #120]	; (80045e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	091b      	lsrs	r3, r3, #4
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	3301      	adds	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d10c      	bne.n	80045a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004588:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	4a14      	ldr	r2, [pc, #80]	; (80045e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004592:	68d2      	ldr	r2, [r2, #12]
 8004594:	0a12      	lsrs	r2, r2, #8
 8004596:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800459a:	fb02 f303 	mul.w	r3, r2, r3
 800459e:	617b      	str	r3, [r7, #20]
    break;
 80045a0:	e00c      	b.n	80045bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045a2:	4a12      	ldr	r2, [pc, #72]	; (80045ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045aa:	4a0e      	ldr	r2, [pc, #56]	; (80045e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045ac:	68d2      	ldr	r2, [r2, #12]
 80045ae:	0a12      	lsrs	r2, r2, #8
 80045b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045b4:	fb02 f303 	mul.w	r3, r2, r3
 80045b8:	617b      	str	r3, [r7, #20]
    break;
 80045ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045bc:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	0e5b      	lsrs	r3, r3, #25
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	3301      	adds	r3, #1
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045d6:	687b      	ldr	r3, [r7, #4]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	371c      	adds	r7, #28
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr
 80045e4:	40021000 	.word	0x40021000
 80045e8:	016e3600 	.word	0x016e3600
 80045ec:	00f42400 	.word	0x00f42400

080045f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045f8:	2300      	movs	r3, #0
 80045fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045fc:	2300      	movs	r3, #0
 80045fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8098 	beq.w	800473e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4b43      	ldr	r3, [pc, #268]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10d      	bne.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	4b40      	ldr	r3, [pc, #256]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	4a3f      	ldr	r2, [pc, #252]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004628:	6593      	str	r3, [r2, #88]	; 0x58
 800462a:	4b3d      	ldr	r3, [pc, #244]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800462c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004636:	2301      	movs	r3, #1
 8004638:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800463a:	4b3a      	ldr	r3, [pc, #232]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a39      	ldr	r2, [pc, #228]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004644:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004646:	f7fc fd6b 	bl	8001120 <HAL_GetTick>
 800464a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800464c:	e009      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fc fd67 	bl	8001120 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d902      	bls.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	74fb      	strb	r3, [r7, #19]
        break;
 8004660:	e005      	b.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004662:	4b30      	ldr	r3, [pc, #192]	; (8004724 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0ef      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800466e:	7cfb      	ldrb	r3, [r7, #19]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d159      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004674:	4b2a      	ldr	r3, [pc, #168]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01e      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	429a      	cmp	r2, r3
 800468e:	d019      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004690:	4b23      	ldr	r3, [pc, #140]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800469a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800469c:	4b20      	ldr	r3, [pc, #128]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ac:	4b1c      	ldr	r3, [pc, #112]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046bc:	4a18      	ldr	r2, [pc, #96]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d016      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ce:	f7fc fd27 	bl	8001120 <HAL_GetTick>
 80046d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046d4:	e00b      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046d6:	f7fc fd23 	bl	8001120 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d902      	bls.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	74fb      	strb	r3, [r7, #19]
            break;
 80046ec:	e006      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046ee:	4b0c      	ldr	r3, [pc, #48]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ec      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004702:	4b07      	ldr	r3, [pc, #28]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	4903      	ldr	r1, [pc, #12]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004718:	e008      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800471a:	7cfb      	ldrb	r3, [r7, #19]
 800471c:	74bb      	strb	r3, [r7, #18]
 800471e:	e005      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004720:	40021000 	.word	0x40021000
 8004724:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800472c:	7c7b      	ldrb	r3, [r7, #17]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004732:	4ba7      	ldr	r3, [pc, #668]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004736:	4aa6      	ldr	r2, [pc, #664]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800474a:	4ba1      	ldr	r3, [pc, #644]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004750:	f023 0203 	bic.w	r2, r3, #3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	499d      	ldr	r1, [pc, #628]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800476c:	4b98      	ldr	r3, [pc, #608]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f023 020c 	bic.w	r2, r3, #12
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	4995      	ldr	r1, [pc, #596]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0304 	and.w	r3, r3, #4
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800478e:	4b90      	ldr	r3, [pc, #576]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	498c      	ldr	r1, [pc, #560]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047b0:	4b87      	ldr	r3, [pc, #540]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	4984      	ldr	r1, [pc, #528]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047d2:	4b7f      	ldr	r3, [pc, #508]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	497b      	ldr	r1, [pc, #492]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047f4:	4b76      	ldr	r3, [pc, #472]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	4973      	ldr	r1, [pc, #460]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004816:	4b6e      	ldr	r3, [pc, #440]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	496a      	ldr	r1, [pc, #424]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004838:	4b65      	ldr	r3, [pc, #404]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	4962      	ldr	r1, [pc, #392]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800485a:	4b5d      	ldr	r3, [pc, #372]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004868:	4959      	ldr	r1, [pc, #356]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800487c:	4b54      	ldr	r3, [pc, #336]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488a:	4951      	ldr	r1, [pc, #324]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800489e:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	4948      	ldr	r1, [pc, #288]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d015      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048c0:	4b43      	ldr	r3, [pc, #268]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ce:	4940      	ldr	r1, [pc, #256]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048de:	d105      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e0:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4a3a      	ldr	r2, [pc, #232]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d015      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80048f8:	4b35      	ldr	r3, [pc, #212]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	4932      	ldr	r1, [pc, #200]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004916:	d105      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004918:	4b2d      	ldr	r3, [pc, #180]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a2c      	ldr	r2, [pc, #176]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004922:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004930:	4b27      	ldr	r3, [pc, #156]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	4924      	ldr	r1, [pc, #144]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800494e:	d105      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004950:	4b1f      	ldr	r3, [pc, #124]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	4a1e      	ldr	r2, [pc, #120]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004956:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800495a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d015      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004968:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004976:	4916      	ldr	r1, [pc, #88]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004978:	4313      	orrs	r3, r2
 800497a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004986:	d105      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004988:	4b11      	ldr	r3, [pc, #68]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	4a10      	ldr	r2, [pc, #64]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004992:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d019      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	4908      	ldr	r1, [pc, #32]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049be:	d109      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c0:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4a02      	ldr	r2, [pc, #8]	; (80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ca:	60d3      	str	r3, [r2, #12]
 80049cc:	e002      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d015      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049e0:	4b29      	ldr	r3, [pc, #164]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	4926      	ldr	r1, [pc, #152]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049fe:	d105      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a0a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d015      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a18:	4b1b      	ldr	r3, [pc, #108]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a26:	4918      	ldr	r1, [pc, #96]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a36:	d105      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a38:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a42:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d015      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a50:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5e:	490a      	ldr	r1, [pc, #40]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6e:	d105      	bne.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a04      	ldr	r2, [pc, #16]	; (8004a88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40021000 	.word	0x40021000

08004a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e042      	b.n	8004b24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d106      	bne.n	8004ab6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7fc f961 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2224      	movs	r2, #36	; 0x24
 8004aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 f848 	bl	8005b6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fd49 	bl	8005574 <UART_SetConfig>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e01b      	b.n	8004b24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f001 f8c7 	bl	8005cb0 <UART_CheckIdleState>
 8004b22:	4603      	mov	r3, r0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d17b      	bne.n	8004c3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <HAL_UART_Transmit+0x26>
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e074      	b.n	8004c40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2221      	movs	r2, #33	; 0x21
 8004b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b66:	f7fc fadb 	bl	8001120 <HAL_GetTick>
 8004b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b84:	d108      	bne.n	8004b98 <HAL_UART_Transmit+0x6c>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	61bb      	str	r3, [r7, #24]
 8004b96:	e003      	b.n	8004ba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ba0:	e030      	b.n	8004c04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f001 f929 	bl	8005e04 <UART_WaitOnFlagUntilTimeout>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e03d      	b.n	8004c40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	3302      	adds	r3, #2
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	e007      	b.n	8004bf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1c8      	bne.n	8004ba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2200      	movs	r2, #0
 8004c18:	2140      	movs	r1, #64	; 0x40
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f001 f8f2 	bl	8005e04 <UART_WaitOnFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2220      	movs	r2, #32
 8004c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e006      	b.n	8004c40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e000      	b.n	8004c40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004c3e:	2302      	movs	r3, #2
  }
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3720      	adds	r7, #32
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	; 0x28
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	f040 80b5 	bne.w	8004dce <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_UART_Receive+0x28>
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0ad      	b.n	8004dd0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2222      	movs	r2, #34	; 0x22
 8004c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c8a:	f7fc fa49 	bl	8001120 <HAL_GetTick>
 8004c8e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	88fa      	ldrh	r2, [r7, #6]
 8004c9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca8:	d10e      	bne.n	8004cc8 <HAL_UART_Receive+0x80>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d105      	bne.n	8004cbe <HAL_UART_Receive+0x76>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004cb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cbc:	e02d      	b.n	8004d1a <HAL_UART_Receive+0xd2>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	22ff      	movs	r2, #255	; 0xff
 8004cc2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cc6:	e028      	b.n	8004d1a <HAL_UART_Receive+0xd2>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <HAL_UART_Receive+0xa4>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <HAL_UART_Receive+0x9a>
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	22ff      	movs	r2, #255	; 0xff
 8004cdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ce0:	e01b      	b.n	8004d1a <HAL_UART_Receive+0xd2>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	227f      	movs	r2, #127	; 0x7f
 8004ce6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004cea:	e016      	b.n	8004d1a <HAL_UART_Receive+0xd2>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf4:	d10d      	bne.n	8004d12 <HAL_UART_Receive+0xca>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d104      	bne.n	8004d08 <HAL_UART_Receive+0xc0>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	227f      	movs	r2, #127	; 0x7f
 8004d02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d06:	e008      	b.n	8004d1a <HAL_UART_Receive+0xd2>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	223f      	movs	r2, #63	; 0x3f
 8004d0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004d10:	e003      	b.n	8004d1a <HAL_UART_Receive+0xd2>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d20:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d2a:	d108      	bne.n	8004d3e <HAL_UART_Receive+0xf6>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d104      	bne.n	8004d3e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	e003      	b.n	8004d46 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004d46:	e036      	b.n	8004db6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2120      	movs	r1, #32
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f001 f856 	bl	8005e04 <UART_WaitOnFlagUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e032      	b.n	8004dd0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10c      	bne.n	8004d8a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	8a7b      	ldrh	r3, [r7, #18]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	3302      	adds	r3, #2
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	e00c      	b.n	8004da4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	8a7b      	ldrh	r3, [r7, #18]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	4013      	ands	r3, r2
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3301      	adds	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1c2      	bne.n	8004d48 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e000      	b.n	8004dd0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004dce:	2302      	movs	r3, #2
  }
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3720      	adds	r7, #32
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	4613      	mov	r3, r2
 8004de4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dec:	2b20      	cmp	r3, #32
 8004dee:	d167      	bne.n	8004ec0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_UART_Transmit_DMA+0x24>
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e060      	b.n	8004ec2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	88fa      	ldrh	r2, [r7, #6]
 8004e0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	88fa      	ldrh	r2, [r7, #6]
 8004e12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2221      	movs	r2, #33	; 0x21
 8004e22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d028      	beq.n	8004e80 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e32:	4a26      	ldr	r2, [pc, #152]	; (8004ecc <HAL_UART_Transmit_DMA+0xf4>)
 8004e34:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3a:	4a25      	ldr	r2, [pc, #148]	; (8004ed0 <HAL_UART_Transmit_DMA+0xf8>)
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e42:	4a24      	ldr	r2, [pc, #144]	; (8004ed4 <HAL_UART_Transmit_DMA+0xfc>)
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e56:	4619      	mov	r1, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3328      	adds	r3, #40	; 0x28
 8004e5e:	461a      	mov	r2, r3
 8004e60:	88fb      	ldrh	r3, [r7, #6]
 8004e62:	f7fc fb43 	bl	80014ec <HAL_DMA_Start_IT>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2210      	movs	r2, #16
 8004e70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e020      	b.n	8004ec2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2240      	movs	r2, #64	; 0x40
 8004e86:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	613b      	str	r3, [r7, #16]
   return(result);
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	623a      	str	r2, [r7, #32]
 8004eaa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	69f9      	ldr	r1, [r7, #28]
 8004eae:	6a3a      	ldr	r2, [r7, #32]
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e5      	bne.n	8004e88 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	e000      	b.n	8004ec2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004ec0:	2302      	movs	r3, #2
  }
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3728      	adds	r7, #40	; 0x28
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	0800602d 	.word	0x0800602d
 8004ed0:	080060c7 	.word	0x080060c7
 8004ed4:	080060e3 	.word	0x080060e3

08004ed8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b0ba      	sub	sp, #232	; 0xe8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004efe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004f02:	f640 030f 	movw	r3, #2063	; 0x80f
 8004f06:	4013      	ands	r3, r2
 8004f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d11b      	bne.n	8004f4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d015      	beq.n	8004f4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d105      	bne.n	8004f38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d009      	beq.n	8004f4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 82e3 	beq.w	8005508 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	4798      	blx	r3
      }
      return;
 8004f4a:	e2dd      	b.n	8005508 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 8123 	beq.w	800519c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004f5a:	4b8d      	ldr	r3, [pc, #564]	; (8005190 <HAL_UART_IRQHandler+0x2b8>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f66:	4b8b      	ldr	r3, [pc, #556]	; (8005194 <HAL_UART_IRQHandler+0x2bc>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 8116 	beq.w	800519c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f74:	f003 0301 	and.w	r3, r3, #1
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d011      	beq.n	8004fa0 <HAL_UART_IRQHandler+0xc8>
 8004f7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00b      	beq.n	8004fa0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f96:	f043 0201 	orr.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d011      	beq.n	8004fd0 <HAL_UART_IRQHandler+0xf8>
 8004fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d00b      	beq.n	8004fd0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc6:	f043 0204 	orr.w	r2, r3, #4
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d011      	beq.n	8005000 <HAL_UART_IRQHandler+0x128>
 8004fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00b      	beq.n	8005000 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2204      	movs	r2, #4
 8004fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	f043 0202 	orr.w	r2, r3, #2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d017      	beq.n	800503c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800500c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005010:	f003 0320 	and.w	r3, r3, #32
 8005014:	2b00      	cmp	r3, #0
 8005016:	d105      	bne.n	8005024 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005018:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800501c:	4b5c      	ldr	r3, [pc, #368]	; (8005190 <HAL_UART_IRQHandler+0x2b8>)
 800501e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00b      	beq.n	800503c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2208      	movs	r2, #8
 800502a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005032:	f043 0208 	orr.w	r2, r3, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800503c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005044:	2b00      	cmp	r3, #0
 8005046:	d012      	beq.n	800506e <HAL_UART_IRQHandler+0x196>
 8005048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800504c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00c      	beq.n	800506e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800505c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005064:	f043 0220 	orr.w	r2, r3, #32
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8249 	beq.w	800550c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800507a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507e:	f003 0320 	and.w	r3, r3, #32
 8005082:	2b00      	cmp	r3, #0
 8005084:	d013      	beq.n	80050ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d105      	bne.n	800509e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d007      	beq.n	80050ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c2:	2b40      	cmp	r3, #64	; 0x40
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d054      	beq.n	800517c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 ff44 	bl	8005f60 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d146      	bne.n	8005174 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3308      	adds	r3, #8
 80050ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800511e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005122:	e841 2300 	strex	r3, r2, [r1]
 8005126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800512a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1d9      	bne.n	80050e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005138:	2b00      	cmp	r3, #0
 800513a:	d017      	beq.n	800516c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005142:	4a15      	ldr	r2, [pc, #84]	; (8005198 <HAL_UART_IRQHandler+0x2c0>)
 8005144:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800514c:	4618      	mov	r0, r3
 800514e:	f7fc faa1 	bl	8001694 <HAL_DMA_Abort_IT>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d019      	beq.n	800518c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005166:	4610      	mov	r0, r2
 8005168:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516a:	e00f      	b.n	800518c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f9eb 	bl	8005548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005172:	e00b      	b.n	800518c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f9e7 	bl	8005548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517a:	e007      	b.n	800518c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f9e3 	bl	8005548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800518a:	e1bf      	b.n	800550c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518c:	bf00      	nop
    return;
 800518e:	e1bd      	b.n	800550c <HAL_UART_IRQHandler+0x634>
 8005190:	10000001 	.word	0x10000001
 8005194:	04000120 	.word	0x04000120
 8005198:	08006163 	.word	0x08006163

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	f040 8153 	bne.w	800544c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051aa:	f003 0310 	and.w	r3, r3, #16
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 814c 	beq.w	800544c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8145 	beq.w	800544c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2210      	movs	r2, #16
 80051c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b40      	cmp	r3, #64	; 0x40
 80051d6:	f040 80bb 	bne.w	8005350 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 818f 	beq.w	8005510 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051fc:	429a      	cmp	r2, r3
 80051fe:	f080 8187 	bcs.w	8005510 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005208:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0320 	and.w	r3, r3, #32
 800521a:	2b00      	cmp	r3, #0
 800521c:	f040 8087 	bne.w	800532e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800522c:	e853 3f00 	ldrex	r3, [r3]
 8005230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	461a      	mov	r2, r3
 8005246:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800524a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800524e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005256:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800525a:	e841 2300 	strex	r3, r2, [r1]
 800525e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1da      	bne.n	8005220 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	3308      	adds	r3, #8
 8005270:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005274:	e853 3f00 	ldrex	r3, [r3]
 8005278:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800527a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800527c:	f023 0301 	bic.w	r3, r3, #1
 8005280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3308      	adds	r3, #8
 800528a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800528e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005292:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005296:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80052a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e1      	bne.n	800526a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3308      	adds	r3, #8
 80052c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80052ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80052cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052d2:	e841 2300 	strex	r3, r2, [r1]
 80052d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1e3      	bne.n	80052a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052fc:	f023 0310 	bic.w	r3, r3, #16
 8005300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800530e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005310:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800531c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e4      	bne.n	80052ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005328:	4618      	mov	r0, r3
 800532a:	f7fc f95a 	bl	80015e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005340:	b29b      	uxth	r3, r3
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	b29b      	uxth	r3, r3
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f907 	bl	800555c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800534e:	e0df      	b.n	8005510 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800535c:	b29b      	uxth	r3, r3
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800536a:	b29b      	uxth	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80d1 	beq.w	8005514 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005372:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 80cc 	beq.w	8005514 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800539e:	647b      	str	r3, [r7, #68]	; 0x44
 80053a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80053a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80053ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e4      	bne.n	800537c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	623b      	str	r3, [r7, #32]
   return(result);
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c8:	f023 0301 	bic.w	r3, r3, #1
 80053cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	3308      	adds	r3, #8
 80053d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053da:	633a      	str	r2, [r7, #48]	; 0x30
 80053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053e2:	e841 2300 	strex	r3, r2, [r1]
 80053e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1e1      	bne.n	80053b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0310 	bic.w	r3, r3, #16
 8005416:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005428:	69b9      	ldr	r1, [r7, #24]
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	e841 2300 	strex	r3, r2, [r1]
 8005430:	617b      	str	r3, [r7, #20]
   return(result);
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1e4      	bne.n	8005402 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800543e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f889 	bl	800555c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800544a:	e063      	b.n	8005514 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800544c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00e      	beq.n	8005476 <HAL_UART_IRQHandler+0x59e>
 8005458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800545c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800546c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 feb8 	bl	80061e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005474:	e051      	b.n	800551a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	d014      	beq.n	80054ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d105      	bne.n	800549a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800548e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d008      	beq.n	80054ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d03a      	beq.n	8005518 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	4798      	blx	r3
    }
    return;
 80054aa:	e035      	b.n	8005518 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d009      	beq.n	80054cc <HAL_UART_IRQHandler+0x5f4>
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fe62 	bl	800618e <UART_EndTransmit_IT>
    return;
 80054ca:	e026      	b.n	800551a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80054cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <HAL_UART_IRQHandler+0x614>
 80054d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fe91 	bl	800620c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054ea:	e016      	b.n	800551a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80054ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d010      	beq.n	800551a <HAL_UART_IRQHandler+0x642>
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	da0c      	bge.n	800551a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 fe79 	bl	80061f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005506:	e008      	b.n	800551a <HAL_UART_IRQHandler+0x642>
      return;
 8005508:	bf00      	nop
 800550a:	e006      	b.n	800551a <HAL_UART_IRQHandler+0x642>
    return;
 800550c:	bf00      	nop
 800550e:	e004      	b.n	800551a <HAL_UART_IRQHandler+0x642>
      return;
 8005510:	bf00      	nop
 8005512:	e002      	b.n	800551a <HAL_UART_IRQHandler+0x642>
      return;
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <HAL_UART_IRQHandler+0x642>
    return;
 8005518:	bf00      	nop
  }
}
 800551a:	37e8      	adds	r7, #232	; 0xe8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005578:	b08c      	sub	sp, #48	; 0x30
 800557a:	af00      	add	r7, sp, #0
 800557c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	431a      	orrs	r2, r3
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	431a      	orrs	r2, r3
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	4313      	orrs	r3, r2
 800559a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4baa      	ldr	r3, [pc, #680]	; (800584c <UART_SetConfig+0x2d8>)
 80055a4:	4013      	ands	r3, r2
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055ac:	430b      	orrs	r3, r1
 80055ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a9f      	ldr	r2, [pc, #636]	; (8005850 <UART_SetConfig+0x2dc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d004      	beq.n	80055e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055dc:	4313      	orrs	r3, r2
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80055ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	6812      	ldr	r2, [r2, #0]
 80055f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055f4:	430b      	orrs	r3, r1
 80055f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	f023 010f 	bic.w	r1, r3, #15
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a90      	ldr	r2, [pc, #576]	; (8005854 <UART_SetConfig+0x2e0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d125      	bne.n	8005664 <UART_SetConfig+0xf0>
 8005618:	4b8f      	ldr	r3, [pc, #572]	; (8005858 <UART_SetConfig+0x2e4>)
 800561a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b03      	cmp	r3, #3
 8005624:	d81a      	bhi.n	800565c <UART_SetConfig+0xe8>
 8005626:	a201      	add	r2, pc, #4	; (adr r2, 800562c <UART_SetConfig+0xb8>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	0800563d 	.word	0x0800563d
 8005630:	0800564d 	.word	0x0800564d
 8005634:	08005645 	.word	0x08005645
 8005638:	08005655 	.word	0x08005655
 800563c:	2301      	movs	r3, #1
 800563e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005642:	e116      	b.n	8005872 <UART_SetConfig+0x2fe>
 8005644:	2302      	movs	r3, #2
 8005646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800564a:	e112      	b.n	8005872 <UART_SetConfig+0x2fe>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005652:	e10e      	b.n	8005872 <UART_SetConfig+0x2fe>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800565a:	e10a      	b.n	8005872 <UART_SetConfig+0x2fe>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005662:	e106      	b.n	8005872 <UART_SetConfig+0x2fe>
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a7c      	ldr	r2, [pc, #496]	; (800585c <UART_SetConfig+0x2e8>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d138      	bne.n	80056e0 <UART_SetConfig+0x16c>
 800566e:	4b7a      	ldr	r3, [pc, #488]	; (8005858 <UART_SetConfig+0x2e4>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005674:	f003 030c 	and.w	r3, r3, #12
 8005678:	2b0c      	cmp	r3, #12
 800567a:	d82d      	bhi.n	80056d8 <UART_SetConfig+0x164>
 800567c:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <UART_SetConfig+0x110>)
 800567e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005682:	bf00      	nop
 8005684:	080056b9 	.word	0x080056b9
 8005688:	080056d9 	.word	0x080056d9
 800568c:	080056d9 	.word	0x080056d9
 8005690:	080056d9 	.word	0x080056d9
 8005694:	080056c9 	.word	0x080056c9
 8005698:	080056d9 	.word	0x080056d9
 800569c:	080056d9 	.word	0x080056d9
 80056a0:	080056d9 	.word	0x080056d9
 80056a4:	080056c1 	.word	0x080056c1
 80056a8:	080056d9 	.word	0x080056d9
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	080056d1 	.word	0x080056d1
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056be:	e0d8      	b.n	8005872 <UART_SetConfig+0x2fe>
 80056c0:	2302      	movs	r3, #2
 80056c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c6:	e0d4      	b.n	8005872 <UART_SetConfig+0x2fe>
 80056c8:	2304      	movs	r3, #4
 80056ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ce:	e0d0      	b.n	8005872 <UART_SetConfig+0x2fe>
 80056d0:	2308      	movs	r3, #8
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d6:	e0cc      	b.n	8005872 <UART_SetConfig+0x2fe>
 80056d8:	2310      	movs	r3, #16
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056de:	e0c8      	b.n	8005872 <UART_SetConfig+0x2fe>
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a5e      	ldr	r2, [pc, #376]	; (8005860 <UART_SetConfig+0x2ec>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d125      	bne.n	8005736 <UART_SetConfig+0x1c2>
 80056ea:	4b5b      	ldr	r3, [pc, #364]	; (8005858 <UART_SetConfig+0x2e4>)
 80056ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056f4:	2b30      	cmp	r3, #48	; 0x30
 80056f6:	d016      	beq.n	8005726 <UART_SetConfig+0x1b2>
 80056f8:	2b30      	cmp	r3, #48	; 0x30
 80056fa:	d818      	bhi.n	800572e <UART_SetConfig+0x1ba>
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	d00a      	beq.n	8005716 <UART_SetConfig+0x1a2>
 8005700:	2b20      	cmp	r3, #32
 8005702:	d814      	bhi.n	800572e <UART_SetConfig+0x1ba>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d002      	beq.n	800570e <UART_SetConfig+0x19a>
 8005708:	2b10      	cmp	r3, #16
 800570a:	d008      	beq.n	800571e <UART_SetConfig+0x1aa>
 800570c:	e00f      	b.n	800572e <UART_SetConfig+0x1ba>
 800570e:	2300      	movs	r3, #0
 8005710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005714:	e0ad      	b.n	8005872 <UART_SetConfig+0x2fe>
 8005716:	2302      	movs	r3, #2
 8005718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800571c:	e0a9      	b.n	8005872 <UART_SetConfig+0x2fe>
 800571e:	2304      	movs	r3, #4
 8005720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005724:	e0a5      	b.n	8005872 <UART_SetConfig+0x2fe>
 8005726:	2308      	movs	r3, #8
 8005728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800572c:	e0a1      	b.n	8005872 <UART_SetConfig+0x2fe>
 800572e:	2310      	movs	r3, #16
 8005730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005734:	e09d      	b.n	8005872 <UART_SetConfig+0x2fe>
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a4a      	ldr	r2, [pc, #296]	; (8005864 <UART_SetConfig+0x2f0>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d125      	bne.n	800578c <UART_SetConfig+0x218>
 8005740:	4b45      	ldr	r3, [pc, #276]	; (8005858 <UART_SetConfig+0x2e4>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800574a:	2bc0      	cmp	r3, #192	; 0xc0
 800574c:	d016      	beq.n	800577c <UART_SetConfig+0x208>
 800574e:	2bc0      	cmp	r3, #192	; 0xc0
 8005750:	d818      	bhi.n	8005784 <UART_SetConfig+0x210>
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d00a      	beq.n	800576c <UART_SetConfig+0x1f8>
 8005756:	2b80      	cmp	r3, #128	; 0x80
 8005758:	d814      	bhi.n	8005784 <UART_SetConfig+0x210>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <UART_SetConfig+0x1f0>
 800575e:	2b40      	cmp	r3, #64	; 0x40
 8005760:	d008      	beq.n	8005774 <UART_SetConfig+0x200>
 8005762:	e00f      	b.n	8005784 <UART_SetConfig+0x210>
 8005764:	2300      	movs	r3, #0
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800576a:	e082      	b.n	8005872 <UART_SetConfig+0x2fe>
 800576c:	2302      	movs	r3, #2
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005772:	e07e      	b.n	8005872 <UART_SetConfig+0x2fe>
 8005774:	2304      	movs	r3, #4
 8005776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800577a:	e07a      	b.n	8005872 <UART_SetConfig+0x2fe>
 800577c:	2308      	movs	r3, #8
 800577e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005782:	e076      	b.n	8005872 <UART_SetConfig+0x2fe>
 8005784:	2310      	movs	r3, #16
 8005786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800578a:	e072      	b.n	8005872 <UART_SetConfig+0x2fe>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a35      	ldr	r2, [pc, #212]	; (8005868 <UART_SetConfig+0x2f4>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d12a      	bne.n	80057ec <UART_SetConfig+0x278>
 8005796:	4b30      	ldr	r3, [pc, #192]	; (8005858 <UART_SetConfig+0x2e4>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a4:	d01a      	beq.n	80057dc <UART_SetConfig+0x268>
 80057a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057aa:	d81b      	bhi.n	80057e4 <UART_SetConfig+0x270>
 80057ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b0:	d00c      	beq.n	80057cc <UART_SetConfig+0x258>
 80057b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b6:	d815      	bhi.n	80057e4 <UART_SetConfig+0x270>
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <UART_SetConfig+0x250>
 80057bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057c0:	d008      	beq.n	80057d4 <UART_SetConfig+0x260>
 80057c2:	e00f      	b.n	80057e4 <UART_SetConfig+0x270>
 80057c4:	2300      	movs	r3, #0
 80057c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ca:	e052      	b.n	8005872 <UART_SetConfig+0x2fe>
 80057cc:	2302      	movs	r3, #2
 80057ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057d2:	e04e      	b.n	8005872 <UART_SetConfig+0x2fe>
 80057d4:	2304      	movs	r3, #4
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057da:	e04a      	b.n	8005872 <UART_SetConfig+0x2fe>
 80057dc:	2308      	movs	r3, #8
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e2:	e046      	b.n	8005872 <UART_SetConfig+0x2fe>
 80057e4:	2310      	movs	r3, #16
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ea:	e042      	b.n	8005872 <UART_SetConfig+0x2fe>
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a17      	ldr	r2, [pc, #92]	; (8005850 <UART_SetConfig+0x2dc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d13a      	bne.n	800586c <UART_SetConfig+0x2f8>
 80057f6:	4b18      	ldr	r3, [pc, #96]	; (8005858 <UART_SetConfig+0x2e4>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005800:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005804:	d01a      	beq.n	800583c <UART_SetConfig+0x2c8>
 8005806:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800580a:	d81b      	bhi.n	8005844 <UART_SetConfig+0x2d0>
 800580c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005810:	d00c      	beq.n	800582c <UART_SetConfig+0x2b8>
 8005812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005816:	d815      	bhi.n	8005844 <UART_SetConfig+0x2d0>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <UART_SetConfig+0x2b0>
 800581c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005820:	d008      	beq.n	8005834 <UART_SetConfig+0x2c0>
 8005822:	e00f      	b.n	8005844 <UART_SetConfig+0x2d0>
 8005824:	2300      	movs	r3, #0
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582a:	e022      	b.n	8005872 <UART_SetConfig+0x2fe>
 800582c:	2302      	movs	r3, #2
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005832:	e01e      	b.n	8005872 <UART_SetConfig+0x2fe>
 8005834:	2304      	movs	r3, #4
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800583a:	e01a      	b.n	8005872 <UART_SetConfig+0x2fe>
 800583c:	2308      	movs	r3, #8
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005842:	e016      	b.n	8005872 <UART_SetConfig+0x2fe>
 8005844:	2310      	movs	r3, #16
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800584a:	e012      	b.n	8005872 <UART_SetConfig+0x2fe>
 800584c:	cfff69f3 	.word	0xcfff69f3
 8005850:	40008000 	.word	0x40008000
 8005854:	40013800 	.word	0x40013800
 8005858:	40021000 	.word	0x40021000
 800585c:	40004400 	.word	0x40004400
 8005860:	40004800 	.word	0x40004800
 8005864:	40004c00 	.word	0x40004c00
 8005868:	40005000 	.word	0x40005000
 800586c:	2310      	movs	r3, #16
 800586e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4aae      	ldr	r2, [pc, #696]	; (8005b30 <UART_SetConfig+0x5bc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	f040 8097 	bne.w	80059ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800587e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005882:	2b08      	cmp	r3, #8
 8005884:	d823      	bhi.n	80058ce <UART_SetConfig+0x35a>
 8005886:	a201      	add	r2, pc, #4	; (adr r2, 800588c <UART_SetConfig+0x318>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058b1 	.word	0x080058b1
 8005890:	080058cf 	.word	0x080058cf
 8005894:	080058b9 	.word	0x080058b9
 8005898:	080058cf 	.word	0x080058cf
 800589c:	080058bf 	.word	0x080058bf
 80058a0:	080058cf 	.word	0x080058cf
 80058a4:	080058cf 	.word	0x080058cf
 80058a8:	080058cf 	.word	0x080058cf
 80058ac:	080058c7 	.word	0x080058c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b0:	f7fe fe2c 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 80058b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058b6:	e010      	b.n	80058da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058b8:	4b9e      	ldr	r3, [pc, #632]	; (8005b34 <UART_SetConfig+0x5c0>)
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058bc:	e00d      	b.n	80058da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058be:	f7fe fdb7 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 80058c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80058c4:	e009      	b.n	80058da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80058cc:	e005      	b.n	80058da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8130 	beq.w	8005b42 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	4a94      	ldr	r2, [pc, #592]	; (8005b38 <UART_SetConfig+0x5c4>)
 80058e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058ec:	461a      	mov	r2, r3
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	685a      	ldr	r2, [r3, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	4413      	add	r3, r2
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	429a      	cmp	r2, r3
 8005904:	d305      	bcc.n	8005912 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	429a      	cmp	r2, r3
 8005910:	d903      	bls.n	800591a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005918:	e113      	b.n	8005b42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	2200      	movs	r2, #0
 800591e:	60bb      	str	r3, [r7, #8]
 8005920:	60fa      	str	r2, [r7, #12]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	4a84      	ldr	r2, [pc, #528]	; (8005b38 <UART_SetConfig+0x5c4>)
 8005928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800592c:	b29b      	uxth	r3, r3
 800592e:	2200      	movs	r2, #0
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005938:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800593c:	f7fa fc6c 	bl	8000218 <__aeabi_uldivmod>
 8005940:	4602      	mov	r2, r0
 8005942:	460b      	mov	r3, r1
 8005944:	4610      	mov	r0, r2
 8005946:	4619      	mov	r1, r3
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	020b      	lsls	r3, r1, #8
 8005952:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005956:	0202      	lsls	r2, r0, #8
 8005958:	6979      	ldr	r1, [r7, #20]
 800595a:	6849      	ldr	r1, [r1, #4]
 800595c:	0849      	lsrs	r1, r1, #1
 800595e:	2000      	movs	r0, #0
 8005960:	460c      	mov	r4, r1
 8005962:	4605      	mov	r5, r0
 8005964:	eb12 0804 	adds.w	r8, r2, r4
 8005968:	eb43 0905 	adc.w	r9, r3, r5
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	469a      	mov	sl, r3
 8005974:	4693      	mov	fp, r2
 8005976:	4652      	mov	r2, sl
 8005978:	465b      	mov	r3, fp
 800597a:	4640      	mov	r0, r8
 800597c:	4649      	mov	r1, r9
 800597e:	f7fa fc4b 	bl	8000218 <__aeabi_uldivmod>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4613      	mov	r3, r2
 8005988:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005990:	d308      	bcc.n	80059a4 <UART_SetConfig+0x430>
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005998:	d204      	bcs.n	80059a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6a3a      	ldr	r2, [r7, #32]
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	e0ce      	b.n	8005b42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80059aa:	e0ca      	b.n	8005b42 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059b4:	d166      	bne.n	8005a84 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80059b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d827      	bhi.n	8005a0e <UART_SetConfig+0x49a>
 80059be:	a201      	add	r2, pc, #4	; (adr r2, 80059c4 <UART_SetConfig+0x450>)
 80059c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	080059f1 	.word	0x080059f1
 80059cc:	080059f9 	.word	0x080059f9
 80059d0:	08005a0f 	.word	0x08005a0f
 80059d4:	080059ff 	.word	0x080059ff
 80059d8:	08005a0f 	.word	0x08005a0f
 80059dc:	08005a0f 	.word	0x08005a0f
 80059e0:	08005a0f 	.word	0x08005a0f
 80059e4:	08005a07 	.word	0x08005a07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fe fd90 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 80059ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059ee:	e014      	b.n	8005a1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059f0:	f7fe fda2 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 80059f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80059f6:	e010      	b.n	8005a1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059f8:	4b4e      	ldr	r3, [pc, #312]	; (8005b34 <UART_SetConfig+0x5c0>)
 80059fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80059fc:	e00d      	b.n	8005a1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059fe:	f7fe fd17 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 8005a02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a04:	e009      	b.n	8005a1a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a0c:	e005      	b.n	8005a1a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8090 	beq.w	8005b42 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	4a44      	ldr	r2, [pc, #272]	; (8005b38 <UART_SetConfig+0x5c4>)
 8005a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a34:	005a      	lsls	r2, r3, #1
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	085b      	lsrs	r3, r3, #1
 8005a3c:	441a      	add	r2, r3
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	2b0f      	cmp	r3, #15
 8005a4c:	d916      	bls.n	8005a7c <UART_SetConfig+0x508>
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a54:	d212      	bcs.n	8005a7c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	f023 030f 	bic.w	r3, r3, #15
 8005a5e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	085b      	lsrs	r3, r3, #1
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	8bfb      	ldrh	r3, [r7, #30]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	8bfa      	ldrh	r2, [r7, #30]
 8005a78:	60da      	str	r2, [r3, #12]
 8005a7a:	e062      	b.n	8005b42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a82:	e05e      	b.n	8005b42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d828      	bhi.n	8005ade <UART_SetConfig+0x56a>
 8005a8c:	a201      	add	r2, pc, #4	; (adr r2, 8005a94 <UART_SetConfig+0x520>)
 8005a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a92:	bf00      	nop
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005ac1 	.word	0x08005ac1
 8005a9c:	08005ac9 	.word	0x08005ac9
 8005aa0:	08005adf 	.word	0x08005adf
 8005aa4:	08005acf 	.word	0x08005acf
 8005aa8:	08005adf 	.word	0x08005adf
 8005aac:	08005adf 	.word	0x08005adf
 8005ab0:	08005adf 	.word	0x08005adf
 8005ab4:	08005ad7 	.word	0x08005ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab8:	f7fe fd28 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8005abc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005abe:	e014      	b.n	8005aea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ac0:	f7fe fd3a 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8005ac4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ac6:	e010      	b.n	8005aea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ac8:	4b1a      	ldr	r3, [pc, #104]	; (8005b34 <UART_SetConfig+0x5c0>)
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005acc:	e00d      	b.n	8005aea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ace:	f7fe fcaf 	bl	8004430 <HAL_RCC_GetSysClockFreq>
 8005ad2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ad4:	e009      	b.n	8005aea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005adc:	e005      	b.n	8005aea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ae8:	bf00      	nop
    }

    if (pclk != 0U)
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d028      	beq.n	8005b42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	4a10      	ldr	r2, [pc, #64]	; (8005b38 <UART_SetConfig+0x5c4>)
 8005af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005afa:	461a      	mov	r2, r3
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	085b      	lsrs	r3, r3, #1
 8005b08:	441a      	add	r2, r3
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	2b0f      	cmp	r3, #15
 8005b18:	d910      	bls.n	8005b3c <UART_SetConfig+0x5c8>
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b20:	d20c      	bcs.n	8005b3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60da      	str	r2, [r3, #12]
 8005b2c:	e009      	b.n	8005b42 <UART_SetConfig+0x5ce>
 8005b2e:	bf00      	nop
 8005b30:	40008000 	.word	0x40008000
 8005b34:	00f42400 	.word	0x00f42400
 8005b38:	08006508 	.word	0x08006508
      }
      else
      {
        ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2200      	movs	r2, #0
 8005b56:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005b5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3730      	adds	r7, #48	; 0x30
 8005b66:	46bd      	mov	sp, r7
 8005b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	430a      	orrs	r2, r1
 8005b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	f003 0302 	and.w	r3, r3, #2
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	f003 0304 	and.w	r3, r3, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01a      	beq.n	8005c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c6a:	d10a      	bne.n	8005c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	430a      	orrs	r2, r1
 8005c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	605a      	str	r2, [r3, #4]
  }
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b098      	sub	sp, #96	; 0x60
 8005cb4:	af02      	add	r7, sp, #8
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cc0:	f7fb fa2e 	bl	8001120 <HAL_GetTick>
 8005cc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0308 	and.w	r3, r3, #8
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	d12f      	bne.n	8005d34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f88e 	bl	8005e04 <UART_WaitOnFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d022      	beq.n	8005d34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d02:	653b      	str	r3, [r7, #80]	; 0x50
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e6      	bne.n	8005cee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d30:	2303      	movs	r3, #3
 8005d32:	e063      	b.n	8005dfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d149      	bne.n	8005dd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f857 	bl	8005e04 <UART_WaitOnFlagUntilTimeout>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d03c      	beq.n	8005dd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	623b      	str	r3, [r7, #32]
   return(result);
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d7a:	633b      	str	r3, [r7, #48]	; 0x30
 8005d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e6      	bne.n	8005d5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3308      	adds	r3, #8
 8005d94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dae:	61fa      	str	r2, [r7, #28]
 8005db0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db2:	69b9      	ldr	r1, [r7, #24]
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	617b      	str	r3, [r7, #20]
   return(result);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e5      	bne.n	8005d8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e012      	b.n	8005dfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3758      	adds	r7, #88	; 0x58
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e14:	e04f      	b.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e1c:	d04b      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1e:	f7fb f97f 	bl	8001120 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d302      	bcc.n	8005e34 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d101      	bne.n	8005e38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e04e      	b.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0304 	and.w	r3, r3, #4
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d037      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b80      	cmp	r3, #128	; 0x80
 8005e4a:	d034      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d031      	beq.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	f003 0308 	and.w	r3, r3, #8
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d110      	bne.n	8005e82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2208      	movs	r2, #8
 8005e66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 f879 	bl	8005f60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2208      	movs	r2, #8
 8005e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e029      	b.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e90:	d111      	bne.n	8005eb6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 f85f 	bl	8005f60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e00f      	b.n	8005ed6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69da      	ldr	r2, [r3, #28]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2301      	moveq	r3, #1
 8005ec8:	2300      	movne	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	461a      	mov	r2, r3
 8005ece:	79fb      	ldrb	r3, [r7, #7]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d0a0      	beq.n	8005e16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b08f      	sub	sp, #60	; 0x3c
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	e853 3f00 	ldrex	r3, [r3]
 8005ef2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005efa:	637b      	str	r3, [r7, #52]	; 0x34
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	461a      	mov	r2, r3
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f06:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f0c:	e841 2300 	strex	r3, r2, [r1]
 8005f10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1e6      	bne.n	8005ee6 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f38:	61ba      	str	r2, [r7, #24]
 8005f3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6979      	ldr	r1, [r7, #20]
 8005f3e:	69ba      	ldr	r2, [r7, #24]
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	613b      	str	r3, [r7, #16]
   return(result);
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e5      	bne.n	8005f18 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8005f54:	bf00      	nop
 8005f56:	373c      	adds	r7, #60	; 0x3c
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b095      	sub	sp, #84	; 0x54
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	461a      	mov	r2, r3
 8005f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f86:	643b      	str	r3, [r7, #64]	; 0x40
 8005f88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e6      	bne.n	8005f68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3308      	adds	r3, #8
 8005fbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e3      	bne.n	8005f9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d118      	bne.n	800600c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f023 0310 	bic.w	r3, r3, #16
 8005fee:	647b      	str	r3, [r7, #68]	; 0x44
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffc:	6979      	ldr	r1, [r7, #20]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	e841 2300 	strex	r3, r2, [r1]
 8006004:	613b      	str	r3, [r7, #16]
   return(result);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1e6      	bne.n	8005fda <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006020:	bf00      	nop
 8006022:	3754      	adds	r7, #84	; 0x54
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b090      	sub	sp, #64	; 0x40
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006038:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0320 	and.w	r3, r3, #32
 8006044:	2b00      	cmp	r3, #0
 8006046:	d137      	bne.n	80060b8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604a:	2200      	movs	r2, #0
 800604c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	3308      	adds	r3, #8
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	e853 3f00 	ldrex	r3, [r3]
 800605e:	623b      	str	r3, [r7, #32]
   return(result);
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006066:	63bb      	str	r3, [r7, #56]	; 0x38
 8006068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3308      	adds	r3, #8
 800606e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006070:	633a      	str	r2, [r7, #48]	; 0x30
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006074:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006078:	e841 2300 	strex	r3, r2, [r1]
 800607c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	2b00      	cmp	r3, #0
 8006082:	d1e5      	bne.n	8006050 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	e853 3f00 	ldrex	r3, [r3]
 8006090:	60fb      	str	r3, [r7, #12]
   return(result);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
 800609a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	69b9      	ldr	r1, [r7, #24]
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	617b      	str	r3, [r7, #20]
   return(result);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e6      	bne.n	8006084 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060b6:	e002      	b.n	80060be <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80060b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80060ba:	f7ff fa31 	bl	8005520 <HAL_UART_TxCpltCallback>
}
 80060be:	bf00      	nop
 80060c0:	3740      	adds	r7, #64	; 0x40
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7ff fa2d 	bl	8005534 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060da:	bf00      	nop
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610a:	2b80      	cmp	r3, #128	; 0x80
 800610c:	d109      	bne.n	8006122 <UART_DMAError+0x40>
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b21      	cmp	r3, #33	; 0x21
 8006112:	d106      	bne.n	8006122 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2200      	movs	r2, #0
 8006118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800611c:	6978      	ldr	r0, [r7, #20]
 800611e:	f7ff fede 	bl	8005ede <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b40      	cmp	r3, #64	; 0x40
 800612e:	d109      	bne.n	8006144 <UART_DMAError+0x62>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b22      	cmp	r3, #34	; 0x22
 8006134:	d106      	bne.n	8006144 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800613e:	6978      	ldr	r0, [r7, #20]
 8006140:	f7ff ff0e 	bl	8005f60 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614a:	f043 0210 	orr.w	r2, r3, #16
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006154:	6978      	ldr	r0, [r7, #20]
 8006156:	f7ff f9f7 	bl	8005548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800615a:	bf00      	nop
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff f9e1 	bl	8005548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b088      	sub	sp, #32
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	e853 3f00 	ldrex	r3, [r3]
 80061a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061aa:	61fb      	str	r3, [r7, #28]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	61bb      	str	r3, [r7, #24]
 80061b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b8:	6979      	ldr	r1, [r7, #20]
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	e841 2300 	strex	r3, r2, [r1]
 80061c0:	613b      	str	r3, [r7, #16]
   return(result);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1e6      	bne.n	8006196 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f7ff f9a2 	bl	8005520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061dc:	bf00      	nop
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_UARTEx_DisableFifoMode+0x16>
 8006232:	2302      	movs	r3, #2
 8006234:	e027      	b.n	8006286 <HAL_UARTEx_DisableFifoMode+0x66>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2224      	movs	r2, #36	; 0x24
 8006242:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0201 	bic.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006264:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2220      	movs	r2, #32
 8006278:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d101      	bne.n	80062aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062a6:	2302      	movs	r3, #2
 80062a8:	e02d      	b.n	8006306 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2224      	movs	r2, #36	; 0x24
 80062b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f850 	bl	800638c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006322:	2302      	movs	r3, #2
 8006324:	e02d      	b.n	8006382 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2224      	movs	r2, #36	; 0x24
 8006332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	683a      	ldr	r2, [r7, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f812 	bl	800638c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006398:	2b00      	cmp	r3, #0
 800639a:	d108      	bne.n	80063ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063ac:	e031      	b.n	8006412 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063ae:	2308      	movs	r3, #8
 80063b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063b2:	2308      	movs	r3, #8
 80063b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	0e5b      	lsrs	r3, r3, #25
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	0f5b      	lsrs	r3, r3, #29
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	7b3a      	ldrb	r2, [r7, #12]
 80063da:	4911      	ldr	r1, [pc, #68]	; (8006420 <UARTEx_SetNbDataToProcess+0x94>)
 80063dc:	5c8a      	ldrb	r2, [r1, r2]
 80063de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063e2:	7b3a      	ldrb	r2, [r7, #12]
 80063e4:	490f      	ldr	r1, [pc, #60]	; (8006424 <UARTEx_SetNbDataToProcess+0x98>)
 80063e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
 80063f6:	7b7a      	ldrb	r2, [r7, #13]
 80063f8:	4909      	ldr	r1, [pc, #36]	; (8006420 <UARTEx_SetNbDataToProcess+0x94>)
 80063fa:	5c8a      	ldrb	r2, [r1, r2]
 80063fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006400:	7b7a      	ldrb	r2, [r7, #13]
 8006402:	4908      	ldr	r1, [pc, #32]	; (8006424 <UARTEx_SetNbDataToProcess+0x98>)
 8006404:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006406:	fb93 f3f2 	sdiv	r3, r3, r2
 800640a:	b29a      	uxth	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	08006520 	.word	0x08006520
 8006424:	08006528 	.word	0x08006528

08006428 <memset>:
 8006428:	4402      	add	r2, r0
 800642a:	4603      	mov	r3, r0
 800642c:	4293      	cmp	r3, r2
 800642e:	d100      	bne.n	8006432 <memset+0xa>
 8006430:	4770      	bx	lr
 8006432:	f803 1b01 	strb.w	r1, [r3], #1
 8006436:	e7f9      	b.n	800642c <memset+0x4>

08006438 <__libc_init_array>:
 8006438:	b570      	push	{r4, r5, r6, lr}
 800643a:	4d0d      	ldr	r5, [pc, #52]	; (8006470 <__libc_init_array+0x38>)
 800643c:	4c0d      	ldr	r4, [pc, #52]	; (8006474 <__libc_init_array+0x3c>)
 800643e:	1b64      	subs	r4, r4, r5
 8006440:	10a4      	asrs	r4, r4, #2
 8006442:	2600      	movs	r6, #0
 8006444:	42a6      	cmp	r6, r4
 8006446:	d109      	bne.n	800645c <__libc_init_array+0x24>
 8006448:	4d0b      	ldr	r5, [pc, #44]	; (8006478 <__libc_init_array+0x40>)
 800644a:	4c0c      	ldr	r4, [pc, #48]	; (800647c <__libc_init_array+0x44>)
 800644c:	f000 f818 	bl	8006480 <_init>
 8006450:	1b64      	subs	r4, r4, r5
 8006452:	10a4      	asrs	r4, r4, #2
 8006454:	2600      	movs	r6, #0
 8006456:	42a6      	cmp	r6, r4
 8006458:	d105      	bne.n	8006466 <__libc_init_array+0x2e>
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006460:	4798      	blx	r3
 8006462:	3601      	adds	r6, #1
 8006464:	e7ee      	b.n	8006444 <__libc_init_array+0xc>
 8006466:	f855 3b04 	ldr.w	r3, [r5], #4
 800646a:	4798      	blx	r3
 800646c:	3601      	adds	r6, #1
 800646e:	e7f2      	b.n	8006456 <__libc_init_array+0x1e>
 8006470:	08006538 	.word	0x08006538
 8006474:	08006538 	.word	0x08006538
 8006478:	08006538 	.word	0x08006538
 800647c:	0800653c 	.word	0x0800653c

08006480 <_init>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	bf00      	nop
 8006484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006486:	bc08      	pop	{r3}
 8006488:	469e      	mov	lr, r3
 800648a:	4770      	bx	lr

0800648c <_fini>:
 800648c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648e:	bf00      	nop
 8006490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006492:	bc08      	pop	{r3}
 8006494:	469e      	mov	lr, r3
 8006496:	4770      	bx	lr
