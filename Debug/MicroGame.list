
MicroGame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080064ac  080064ac  000074ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006544  08006544  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006544  08006544  00007544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800654c  0800654c  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800654c  0800654c  0000754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006554  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000000c  08006560  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08006560  000082a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010dcd  00000000  00000000  0000803c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223b  00000000  00000000  00018e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0001b048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a41  00000000  00000000  0001bd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002498a  00000000  00000000  0001c7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011183  00000000  00000000  0004113b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8b39  00000000  00000000  000522be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013adf7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  0013ae3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0013e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006494 	.word	0x08006494

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006494 	.word	0x08006494

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b09c      	sub	sp, #112	@ 0x70
 800050c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fdac 	bl	800106a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f9c1 	bl	8000898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fad7 	bl	8000ac8 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 fa93 	bl	8000a44 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 fa47 	bl	80009b0 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000522:	f000 fa05 	bl	8000930 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t newline[] = "\r\n";
 8000526:	4a64      	ldr	r2, [pc, #400]	@ (80006b8 <main+0x1b0>)
 8000528:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800052c:	6812      	ldr	r2, [r2, #0]
 800052e:	4611      	mov	r1, r2
 8000530:	8019      	strh	r1, [r3, #0]
 8000532:	3302      	adds	r3, #2
 8000534:	0c12      	lsrs	r2, r2, #16
 8000536:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&hlpuart1, newline, sizeof(newline) - 1, 10);
 8000538:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800053c:	230a      	movs	r3, #10
 800053e:	2202      	movs	r2, #2
 8000540:	485e      	ldr	r0, [pc, #376]	@ (80006bc <main+0x1b4>)
 8000542:	f004 fafd 	bl	8004b40 <HAL_UART_Transmit>

  uint8_t text[] = "Enter Difficulty from 1 - 3 \r\n";
 8000546:	4b5e      	ldr	r3, [pc, #376]	@ (80006c0 <main+0x1b8>)
 8000548:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800054c:	461d      	mov	r5, r3
 800054e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000552:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000556:	c407      	stmia	r4!, {r0, r1, r2}
 8000558:	8023      	strh	r3, [r4, #0]
 800055a:	3402      	adds	r4, #2
 800055c:	0c1b      	lsrs	r3, r3, #16
 800055e:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&hlpuart1, text, 28, 10);
 8000560:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000564:	230a      	movs	r3, #10
 8000566:	221c      	movs	r2, #28
 8000568:	4854      	ldr	r0, [pc, #336]	@ (80006bc <main+0x1b4>)
 800056a:	f004 fae9 	bl	8004b40 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (State == 0)
 800056e:	4b55      	ldr	r3, [pc, #340]	@ (80006c4 <main+0x1bc>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d103      	bne.n	800057e <main+0x76>
	  {
		  State = 1;
 8000576:	4b53      	ldr	r3, [pc, #332]	@ (80006c4 <main+0x1bc>)
 8000578:	2201      	movs	r2, #1
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e111      	b.n	80007a2 <main+0x29a>
	  }
	  else if (State == 1)
 800057e:	4b51      	ldr	r3, [pc, #324]	@ (80006c4 <main+0x1bc>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d13d      	bne.n	8000602 <main+0xfa>
	  {
		  Read[4] = '\0';
 8000586:	4b50      	ldr	r3, [pc, #320]	@ (80006c8 <main+0x1c0>)
 8000588:	2200      	movs	r2, #0
 800058a:	711a      	strb	r2, [r3, #4]
		  HAL_UART_Receive(&hlpuart1, Read, 4,10);
 800058c:	230a      	movs	r3, #10
 800058e:	2204      	movs	r2, #4
 8000590:	494d      	ldr	r1, [pc, #308]	@ (80006c8 <main+0x1c0>)
 8000592:	484a      	ldr	r0, [pc, #296]	@ (80006bc <main+0x1b4>)
 8000594:	f004 fb62 	bl	8004c5c <HAL_UART_Receive>

		  uint8_t data = Read[0];
 8000598:	4b4b      	ldr	r3, [pc, #300]	@ (80006c8 <main+0x1c0>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

		  if (data == 49)
 80005a0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80005a4:	2b31      	cmp	r3, #49	@ 0x31
 80005a6:	d10b      	bne.n	80005c0 <main+0xb8>
		  {
			  Diff = 100;
 80005a8:	4b48      	ldr	r3, [pc, #288]	@ (80006cc <main+0x1c4>)
 80005aa:	2264      	movs	r2, #100	@ 0x64
 80005ac:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005ae:	4b45      	ldr	r3, [pc, #276]	@ (80006c4 <main+0x1bc>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	701a      	strb	r2, [r3, #0]
			  memset(Read, 0, sizeof(Read));
 80005b4:	2204      	movs	r2, #4
 80005b6:	2100      	movs	r1, #0
 80005b8:	4843      	ldr	r0, [pc, #268]	@ (80006c8 <main+0x1c0>)
 80005ba:	f005 ff3f 	bl	800643c <memset>
 80005be:	e0f0      	b.n	80007a2 <main+0x29a>
		  }
		  else if (data == 50)
 80005c0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80005c4:	2b32      	cmp	r3, #50	@ 0x32
 80005c6:	d10b      	bne.n	80005e0 <main+0xd8>
		  {
			  Diff = 50;
 80005c8:	4b40      	ldr	r3, [pc, #256]	@ (80006cc <main+0x1c4>)
 80005ca:	2232      	movs	r2, #50	@ 0x32
 80005cc:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005ce:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <main+0x1bc>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	701a      	strb	r2, [r3, #0]
			  memset(Read, 0, sizeof(Read));
 80005d4:	2204      	movs	r2, #4
 80005d6:	2100      	movs	r1, #0
 80005d8:	483b      	ldr	r0, [pc, #236]	@ (80006c8 <main+0x1c0>)
 80005da:	f005 ff2f 	bl	800643c <memset>
 80005de:	e0e0      	b.n	80007a2 <main+0x29a>
		  }
		  else if (data == 51)
 80005e0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80005e4:	2b33      	cmp	r3, #51	@ 0x33
 80005e6:	f040 80dc 	bne.w	80007a2 <main+0x29a>
		  {
			  Diff = 10;
 80005ea:	4b38      	ldr	r3, [pc, #224]	@ (80006cc <main+0x1c4>)
 80005ec:	220a      	movs	r2, #10
 80005ee:	701a      	strb	r2, [r3, #0]
			  State = 2;
 80005f0:	4b34      	ldr	r3, [pc, #208]	@ (80006c4 <main+0x1bc>)
 80005f2:	2202      	movs	r2, #2
 80005f4:	701a      	strb	r2, [r3, #0]
			  memset(Read, 0, sizeof(Read));
 80005f6:	2204      	movs	r2, #4
 80005f8:	2100      	movs	r1, #0
 80005fa:	4833      	ldr	r0, [pc, #204]	@ (80006c8 <main+0x1c0>)
 80005fc:	f005 ff1e 	bl	800643c <memset>
 8000600:	e0cf      	b.n	80007a2 <main+0x29a>
		  }

	  }
	  else if (State == 2)
 8000602:	4b30      	ldr	r3, [pc, #192]	@ (80006c4 <main+0x1bc>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b02      	cmp	r3, #2
 8000608:	f040 80cb 	bne.w	80007a2 <main+0x29a>
	  {
		  for (int i = 1; i < 10; i++)
 800060c:	2301      	movs	r3, #1
 800060e:	667b      	str	r3, [r7, #100]	@ 0x64
 8000610:	e0c3      	b.n	800079a <main+0x292>
		  {
			  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == RESET && stop == 0)
 8000612:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000616:	482e      	ldr	r0, [pc, #184]	@ (80006d0 <main+0x1c8>)
 8000618:	f001 fb8c 	bl	8001d34 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d107      	bne.n	8000632 <main+0x12a>
 8000622:	4b2c      	ldr	r3, [pc, #176]	@ (80006d4 <main+0x1cc>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d103      	bne.n	8000632 <main+0x12a>
			  {
				  stop = 1;
 800062a:	4b2a      	ldr	r3, [pc, #168]	@ (80006d4 <main+0x1cc>)
 800062c:	2201      	movs	r2, #1
 800062e:	701a      	strb	r2, [r3, #0]
 8000630:	e0b0      	b.n	8000794 <main+0x28c>
			  }

			  else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == SET && stop == 1)
 8000632:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000636:	4826      	ldr	r0, [pc, #152]	@ (80006d0 <main+0x1c8>)
 8000638:	f001 fb7c 	bl	8001d34 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	d114      	bne.n	800066c <main+0x164>
 8000642:	4b24      	ldr	r3, [pc, #144]	@ (80006d4 <main+0x1cc>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d110      	bne.n	800066c <main+0x164>
			  {
				  slot_mem[index] = slot;
 800064a:	4b23      	ldr	r3, [pc, #140]	@ (80006d8 <main+0x1d0>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	461a      	mov	r2, r3
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <main+0x1d4>)
 8000652:	7819      	ldrb	r1, [r3, #0]
 8000654:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <main+0x1d8>)
 8000656:	5499      	strb	r1, [r3, r2]
				  stop = 0;
 8000658:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <main+0x1cc>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
				  index++;
 800065e:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <main+0x1d0>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	3301      	adds	r3, #1
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b1c      	ldr	r3, [pc, #112]	@ (80006d8 <main+0x1d0>)
 8000668:	701a      	strb	r2, [r3, #0]
 800066a:	e093      	b.n	8000794 <main+0x28c>
			  }
			  else if (index == 3)
 800066c:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <main+0x1d0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b03      	cmp	r3, #3
 8000672:	d103      	bne.n	800067c <main+0x174>
			  {
				  State = 3;
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <main+0x1bc>)
 8000676:	2203      	movs	r2, #3
 8000678:	701a      	strb	r2, [r3, #0]
 800067a:	e08b      	b.n	8000794 <main+0x28c>
			  }
			  else
			  {
				  if (index == 0)
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <main+0x1d0>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d10c      	bne.n	800069e <main+0x196>
				  {
					  slot_mem[0] = i;
 8000684:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <main+0x1d8>)
 800068a:	701a      	strb	r2, [r3, #0]
					  slot_mem[1] = i;
 800068c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <main+0x1d8>)
 8000692:	705a      	strb	r2, [r3, #1]
					  slot_mem[2] = i;
 8000694:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <main+0x1d8>)
 800069a:	709a      	strb	r2, [r3, #2]
 800069c:	e02a      	b.n	80006f4 <main+0x1ec>
				  }
				  else if (index == 1)
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <main+0x1d0>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d11e      	bne.n	80006e4 <main+0x1dc>
				  {
					  slot_mem[1] = i;
 80006a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <main+0x1d8>)
 80006ac:	705a      	strb	r2, [r3, #1]
					  slot_mem[2] = i;
 80006ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <main+0x1d8>)
 80006b4:	709a      	strb	r2, [r3, #2]
 80006b6:	e01d      	b.n	80006f4 <main+0x1ec>
 80006b8:	080064ac 	.word	0x080064ac
 80006bc:	2000013c 	.word	0x2000013c
 80006c0:	080064b0 	.word	0x080064b0
 80006c4:	20000294 	.word	0x20000294
 80006c8:	20000290 	.word	0x20000290
 80006cc:	20000295 	.word	0x20000295
 80006d0:	48000800 	.word	0x48000800
 80006d4:	20000296 	.word	0x20000296
 80006d8:	20000297 	.word	0x20000297
 80006dc:	2000029f 	.word	0x2000029f
 80006e0:	200002a0 	.word	0x200002a0
				  }
				  else if (index == 2)
 80006e4:	4b60      	ldr	r3, [pc, #384]	@ (8000868 <main+0x360>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d103      	bne.n	80006f4 <main+0x1ec>
				  {
					  slot_mem[2] = i;
 80006ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	4b5e      	ldr	r3, [pc, #376]	@ (800086c <main+0x364>)
 80006f2:	709a      	strb	r2, [r3, #2]
				  }

				  slot = i;
 80006f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b5d      	ldr	r3, [pc, #372]	@ (8000870 <main+0x368>)
 80006fa:	701a      	strb	r2, [r3, #0]
				  uint8_t data;
				  data = slot_mem[0] + '0';
 80006fc:	4b5b      	ldr	r3, [pc, #364]	@ (800086c <main+0x364>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	3330      	adds	r3, #48	@ 0x30
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				  HAL_UART_Transmit(&hlpuart1, &data, sizeof(data), 10);
 8000708:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 800070c:	230a      	movs	r3, #10
 800070e:	2201      	movs	r2, #1
 8000710:	4858      	ldr	r0, [pc, #352]	@ (8000874 <main+0x36c>)
 8000712:	f004 fa15 	bl	8004b40 <HAL_UART_Transmit>
				  uint8_t tab[] = "\t";
 8000716:	2309      	movs	r3, #9
 8000718:	87bb      	strh	r3, [r7, #60]	@ 0x3c
				  HAL_UART_Transmit(&hlpuart1, tab, 1, 10);
 800071a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800071e:	230a      	movs	r3, #10
 8000720:	2201      	movs	r2, #1
 8000722:	4854      	ldr	r0, [pc, #336]	@ (8000874 <main+0x36c>)
 8000724:	f004 fa0c 	bl	8004b40 <HAL_UART_Transmit>

				  data = slot_mem[1] + '0';
 8000728:	4b50      	ldr	r3, [pc, #320]	@ (800086c <main+0x364>)
 800072a:	785b      	ldrb	r3, [r3, #1]
 800072c:	3330      	adds	r3, #48	@ 0x30
 800072e:	b2db      	uxtb	r3, r3
 8000730:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				  HAL_UART_Transmit(&hlpuart1, &data, sizeof(data), 10);
 8000734:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8000738:	230a      	movs	r3, #10
 800073a:	2201      	movs	r2, #1
 800073c:	484d      	ldr	r0, [pc, #308]	@ (8000874 <main+0x36c>)
 800073e:	f004 f9ff 	bl	8004b40 <HAL_UART_Transmit>
				  HAL_UART_Transmit(&hlpuart1, tab, 1, 10);
 8000742:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000746:	230a      	movs	r3, #10
 8000748:	2201      	movs	r2, #1
 800074a:	484a      	ldr	r0, [pc, #296]	@ (8000874 <main+0x36c>)
 800074c:	f004 f9f8 	bl	8004b40 <HAL_UART_Transmit>

				  data = slot_mem[2] + '0';
 8000750:	4b46      	ldr	r3, [pc, #280]	@ (800086c <main+0x364>)
 8000752:	789b      	ldrb	r3, [r3, #2]
 8000754:	3330      	adds	r3, #48	@ 0x30
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				  HAL_UART_Transmit(&hlpuart1, &data, sizeof(data), 10);
 800075c:	f107 013f 	add.w	r1, r7, #63	@ 0x3f
 8000760:	230a      	movs	r3, #10
 8000762:	2201      	movs	r2, #1
 8000764:	4843      	ldr	r0, [pc, #268]	@ (8000874 <main+0x36c>)
 8000766:	f004 f9eb 	bl	8004b40 <HAL_UART_Transmit>

				  uint8_t newline[] = "\r\n";
 800076a:	4a43      	ldr	r2, [pc, #268]	@ (8000878 <main+0x370>)
 800076c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	4611      	mov	r1, r2
 8000774:	8019      	strh	r1, [r3, #0]
 8000776:	3302      	adds	r3, #2
 8000778:	0c12      	lsrs	r2, r2, #16
 800077a:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit(&hlpuart1, newline, sizeof(newline) - 1, 10);
 800077c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000780:	230a      	movs	r3, #10
 8000782:	2202      	movs	r2, #2
 8000784:	483b      	ldr	r0, [pc, #236]	@ (8000874 <main+0x36c>)
 8000786:	f004 f9db 	bl	8004b40 <HAL_UART_Transmit>
				  HAL_Delay(Diff);
 800078a:	4b3c      	ldr	r3, [pc, #240]	@ (800087c <main+0x374>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fcdc 	bl	800114c <HAL_Delay>
		  for (int i = 1; i < 10; i++)
 8000794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000796:	3301      	adds	r3, #1
 8000798:	667b      	str	r3, [r7, #100]	@ 0x64
 800079a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800079c:	2b09      	cmp	r3, #9
 800079e:	f77f af38 	ble.w	8000612 <main+0x10a>
			  }
		  }
	  }

	  if (index == 3 && State == 3)
 80007a2:	4b31      	ldr	r3, [pc, #196]	@ (8000868 <main+0x360>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d12c      	bne.n	8000804 <main+0x2fc>
 80007aa:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <main+0x378>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d128      	bne.n	8000804 <main+0x2fc>
	  {
		  if (hi2c1.State == HAL_I2C_STATE_READY)
 80007b2:	4b34      	ldr	r3, [pc, #208]	@ (8000884 <main+0x37c>)
 80007b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b20      	cmp	r3, #32
 80007bc:	d109      	bne.n	80007d2 <main+0x2ca>
		  {
			  HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT, slot_mem, 3);
 80007be:	2303      	movs	r3, #3
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	4b2a      	ldr	r3, [pc, #168]	@ (800086c <main+0x364>)
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	2302      	movs	r3, #2
 80007c8:	222c      	movs	r2, #44	@ 0x2c
 80007ca:	21a0      	movs	r1, #160	@ 0xa0
 80007cc:	482d      	ldr	r0, [pc, #180]	@ (8000884 <main+0x37c>)
 80007ce:	f001 fb9f 	bl	8001f10 <HAL_I2C_Mem_Write_IT>
		  }

		  HAL_Delay(50);
 80007d2:	2032      	movs	r0, #50	@ 0x32
 80007d4:	f000 fcba 	bl	800114c <HAL_Delay>

		  if (hi2c1.State == HAL_I2C_STATE_READY)
 80007d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000884 <main+0x37c>)
 80007da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b20      	cmp	r3, #32
 80007e2:	d109      	bne.n	80007f8 <main+0x2f0>
		  {
			  HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT, memRead, 3);
 80007e4:	2303      	movs	r3, #3
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <main+0x380>)
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2302      	movs	r3, #2
 80007ee:	222c      	movs	r2, #44	@ 0x2c
 80007f0:	21a0      	movs	r1, #160	@ 0xa0
 80007f2:	4824      	ldr	r0, [pc, #144]	@ (8000884 <main+0x37c>)
 80007f4:	f001 fc16 	bl	8002024 <HAL_I2C_Mem_Read_IT>
	  	  }

	  	  index = 0;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <main+0x360>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
	  	  Check = 1;
 80007fe:	4b23      	ldr	r3, [pc, #140]	@ (800088c <main+0x384>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
  	  }

	  if (Check == 1)
 8000804:	4b21      	ldr	r3, [pc, #132]	@ (800088c <main+0x384>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	f47f aeb0 	bne.w	800056e <main+0x66>
	  {
		  if (slot_mem[0] == slot_mem[1] && slot_mem[0] == slot_mem[2])
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <main+0x364>)
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <main+0x364>)
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	429a      	cmp	r2, r3
 8000818:	d113      	bne.n	8000842 <main+0x33a>
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <main+0x364>)
 800081c:	781a      	ldrb	r2, [r3, #0]
 800081e:	4b13      	ldr	r3, [pc, #76]	@ (800086c <main+0x364>)
 8000820:	789b      	ldrb	r3, [r3, #2]
 8000822:	429a      	cmp	r2, r3
 8000824:	d10d      	bne.n	8000842 <main+0x33a>
		  {
			  uint8_t text[] = "You're Winner!!";
 8000826:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <main+0x388>)
 8000828:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800082c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800082e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  HAL_UART_Transmit_DMA(&hlpuart1, text, sizeof(text));
 8000832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000836:	2210      	movs	r2, #16
 8000838:	4619      	mov	r1, r3
 800083a:	480e      	ldr	r0, [pc, #56]	@ (8000874 <main+0x36c>)
 800083c:	f004 fad6 	bl	8004dec <HAL_UART_Transmit_DMA>
		  {
 8000840:	e00e      	b.n	8000860 <main+0x358>
		  }
		  else
		  {
			  uint8_t text[] = "Try Again!! -- Press Reset Button";
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <main+0x38c>)
 8000844:	1d3c      	adds	r4, r7, #4
 8000846:	461d      	mov	r5, r3
 8000848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000850:	682b      	ldr	r3, [r5, #0]
 8000852:	8023      	strh	r3, [r4, #0]
			  HAL_UART_Transmit_DMA(&hlpuart1, text, sizeof(text));
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2222      	movs	r2, #34	@ 0x22
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <main+0x36c>)
 800085c:	f004 fac6 	bl	8004dec <HAL_UART_Transmit_DMA>
		  }
		  Check = 0;
 8000860:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <main+0x384>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	  if (State == 0)
 8000866:	e682      	b.n	800056e <main+0x66>
 8000868:	20000297 	.word	0x20000297
 800086c:	200002a0 	.word	0x200002a0
 8000870:	2000029f 	.word	0x2000029f
 8000874:	2000013c 	.word	0x2000013c
 8000878:	080064ac 	.word	0x080064ac
 800087c:	20000295 	.word	0x20000295
 8000880:	20000294 	.word	0x20000294
 8000884:	20000028 	.word	0x20000028
 8000888:	2000029c 	.word	0x2000029c
 800088c:	20000298 	.word	0x20000298
 8000890:	080064d0 	.word	0x080064d0
 8000894:	080064e0 	.word	0x080064e0

08000898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b094      	sub	sp, #80	@ 0x50
 800089c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089e:	f107 0318 	add.w	r3, r7, #24
 80008a2:	2238      	movs	r2, #56	@ 0x38
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f005 fdc8 	bl	800643c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f003 f8c0 	bl	8003a40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ca:	2340      	movs	r3, #64	@ 0x40
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d2:	2302      	movs	r3, #2
 80008d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008d6:	2304      	movs	r3, #4
 80008d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008da:	2355      	movs	r3, #85	@ 0x55
 80008dc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008de:	2302      	movs	r3, #2
 80008e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ea:	f107 0318 	add.w	r3, r7, #24
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 f95a 	bl	8003ba8 <HAL_RCC_OscConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008fa:	f000 f953 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fe:	230f      	movs	r3, #15
 8000900:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000902:	2303      	movs	r3, #3
 8000904:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2104      	movs	r1, #4
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fc58 	bl	80041cc <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000922:	f000 f93f 	bl	8000ba4 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	@ 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000934:	4b1b      	ldr	r3, [pc, #108]	@ (80009a4 <MX_I2C1_Init+0x74>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	@ (80009a8 <MX_I2C1_Init+0x78>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800093a:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <MX_I2C1_Init+0x74>)
 800093c:	4a1b      	ldr	r2, [pc, #108]	@ (80009ac <MX_I2C1_Init+0x7c>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000940:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	@ (80009a4 <MX_I2C1_Init+0x74>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	@ (80009a4 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000952:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000958:	4b12      	ldr	r3, [pc, #72]	@ (80009a4 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_I2C1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096a:	480e      	ldr	r0, [pc, #56]	@ (80009a4 <MX_I2C1_Init+0x74>)
 800096c:	f001 fa35 	bl	8001dda <HAL_I2C_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000976:	f000 f915 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097a:	2100      	movs	r1, #0
 800097c:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <MX_I2C1_Init+0x74>)
 800097e:	f002 ffc7 	bl	8003910 <HAL_I2CEx_ConfigAnalogFilter>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 f90c 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_I2C1_Init+0x74>)
 8000990:	f003 f809 	bl	80039a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 f903 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000028 	.word	0x20000028
 80009a8:	40005400 	.word	0x40005400
 80009ac:	30a0a7fb 	.word	0x30a0a7fb

080009b0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009b4:	4b21      	ldr	r3, [pc, #132]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009b6:	4a22      	ldr	r2, [pc, #136]	@ (8000a40 <MX_LPUART1_UART_Init+0x90>)
 80009b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 80009ba:	4b20      	ldr	r3, [pc, #128]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009bc:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80009c0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b1e      	ldr	r3, [pc, #120]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b1b      	ldr	r3, [pc, #108]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b19      	ldr	r3, [pc, #100]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b18      	ldr	r3, [pc, #96]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e0:	4b16      	ldr	r3, [pc, #88]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e6:	4b15      	ldr	r3, [pc, #84]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ec:	4b13      	ldr	r3, [pc, #76]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009f2:	4812      	ldr	r0, [pc, #72]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 80009f4:	f004 f854 	bl	8004aa0 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009fe:	f000 f8d1 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a02:	2100      	movs	r1, #0
 8000a04:	480d      	ldr	r0, [pc, #52]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 8000a06:	f005 fc4e 	bl	80062a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a10:	f000 f8c8 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4809      	ldr	r0, [pc, #36]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 8000a18:	f005 fc83 	bl	8006322 <HAL_UARTEx_SetRxFifoThreshold>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a22:	f000 f8bf 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <MX_LPUART1_UART_Init+0x8c>)
 8000a28:	f005 fc04 	bl	8006234 <HAL_UARTEx_DisableFifoMode>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a32:	f000 f8b7 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000013c 	.word	0x2000013c
 8000a40:	40008000 	.word	0x40008000

08000a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <MX_DMA_Init+0x80>)
 8000a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a4e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac4 <MX_DMA_Init+0x80>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a56:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac4 <MX_DMA_Init+0x80>)
 8000a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <MX_DMA_Init+0x80>)
 8000a64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a66:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <MX_DMA_Init+0x80>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <MX_DMA_Init+0x80>)
 8000a70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	200b      	movs	r0, #11
 8000a80:	f000 fc61 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a84:	200b      	movs	r0, #11
 8000a86:	f000 fc78 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	200c      	movs	r0, #12
 8000a90:	f000 fc59 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000a94:	200c      	movs	r0, #12
 8000a96:	f000 fc70 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	200d      	movs	r0, #13
 8000aa0:	f000 fc51 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000aa4:	200d      	movs	r0, #13
 8000aa6:	f000 fc68 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	200e      	movs	r0, #14
 8000ab0:	f000 fc49 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ab4:	200e      	movs	r0, #14
 8000ab6:	f000 fc60 	bl	800137a <HAL_NVIC_EnableIRQ>

}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a2e      	ldr	r2, [pc, #184]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b2c      	ldr	r3, [pc, #176]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000af6:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a28      	ldr	r2, [pc, #160]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000afc:	f043 0320 	orr.w	r3, r3, #32
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0320 	and.w	r3, r3, #32
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4a22      	ldr	r2, [pc, #136]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_GPIO_Init+0xd4>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2120      	movs	r1, #32
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b46:	f001 f90d 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480f      	ldr	r0, [pc, #60]	@ (8000ba0 <MX_GPIO_Init+0xd8>)
 8000b62:	f000 ff65 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b66:	2320      	movs	r3, #32
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b80:	f000 ff56 	bl	8001a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2028      	movs	r0, #40	@ 0x28
 8000b8a:	f000 fbdc 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b8e:	2028      	movs	r0, #40	@ 0x28
 8000b90:	f000 fbf3 	bl	800137a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	@ 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	48000800 	.word	0x48000800

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <Error_Handler+0x8>

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <HAL_MspInit+0x44>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bba:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf4 <HAL_MspInit+0x44>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <HAL_MspInit+0x44>)
 8000bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <HAL_MspInit+0x44>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd2:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <HAL_MspInit+0x44>)
 8000bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_MspInit+0x44>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000be6:	f002 ffcf 	bl	8003b88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09e      	sub	sp, #120	@ 0x78
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	2254      	movs	r2, #84	@ 0x54
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f005 fc0f 	bl	800643c <memset>
  if(hi2c->Instance==I2C1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a50      	ldr	r2, [pc, #320]	@ (8000d64 <HAL_I2C_MspInit+0x16c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	f040 8099 	bne.w	8000d5c <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c2a:	2340      	movs	r3, #64	@ 0x40
 8000c2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	4618      	mov	r0, r3
 8000c38:	f003 fce4 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000c42:	f7ff ffaf 	bl	8000ba4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b48      	ldr	r3, [pc, #288]	@ (8000d68 <HAL_I2C_MspInit+0x170>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	4a47      	ldr	r2, [pc, #284]	@ (8000d68 <HAL_I2C_MspInit+0x170>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c52:	4b45      	ldr	r3, [pc, #276]	@ (8000d68 <HAL_I2C_MspInit+0x170>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c62:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c64:	2312      	movs	r3, #18
 8000c66:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c70:	2304      	movs	r3, #4
 8000c72:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c78:	4619      	mov	r1, r3
 8000c7a:	483c      	ldr	r0, [pc, #240]	@ (8000d6c <HAL_I2C_MspInit+0x174>)
 8000c7c:	f000 fed8 	bl	8001a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <HAL_I2C_MspInit+0x170>)
 8000c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c84:	4a38      	ldr	r2, [pc, #224]	@ (8000d68 <HAL_I2C_MspInit+0x170>)
 8000c86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c8c:	4b36      	ldr	r3, [pc, #216]	@ (8000d68 <HAL_I2C_MspInit+0x170>)
 8000c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000c98:	4b35      	ldr	r3, [pc, #212]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000c9a:	4a36      	ldr	r2, [pc, #216]	@ (8000d74 <HAL_I2C_MspInit+0x17c>)
 8000c9c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000c9e:	4b34      	ldr	r3, [pc, #208]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000ca0:	2210      	movs	r2, #16
 8000ca2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca4:	4b32      	ldr	r3, [pc, #200]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000caa:	4b31      	ldr	r3, [pc, #196]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000cb2:	2280      	movs	r2, #128	@ 0x80
 8000cb4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb6:	4b2e      	ldr	r3, [pc, #184]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc8:	4b29      	ldr	r3, [pc, #164]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000cce:	4828      	ldr	r0, [pc, #160]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000cd0:	f000 fb6e 	bl	80013b0 <HAL_DMA_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8000cda:	f7ff ff63 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4a23      	ldr	r2, [pc, #140]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ce4:	4a22      	ldr	r2, [pc, #136]	@ (8000d70 <HAL_I2C_MspInit+0x178>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000cea:	4b23      	ldr	r3, [pc, #140]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000cec:	4a23      	ldr	r2, [pc, #140]	@ (8000d7c <HAL_I2C_MspInit+0x184>)
 8000cee:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000cf0:	4b21      	ldr	r3, [pc, #132]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000cf2:	2211      	movs	r2, #17
 8000cf4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cf6:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000d04:	2280      	movs	r2, #128	@ 0x80
 8000d06:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000d14:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000d20:	4815      	ldr	r0, [pc, #84]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000d22:	f000 fb45 	bl	80013b0 <HAL_DMA_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8000d2c:	f7ff ff3a 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a11      	ldr	r2, [pc, #68]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000d34:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d36:	4a10      	ldr	r2, [pc, #64]	@ (8000d78 <HAL_I2C_MspInit+0x180>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	201f      	movs	r0, #31
 8000d42:	f000 fb00 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d46:	201f      	movs	r0, #31
 8000d48:	f000 fb17 	bl	800137a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2020      	movs	r0, #32
 8000d52:	f000 faf8 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d56:	2020      	movs	r0, #32
 8000d58:	f000 fb0f 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d5c:	bf00      	nop
 8000d5e:	3778      	adds	r7, #120	@ 0x78
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40005400 	.word	0x40005400
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	2000007c 	.word	0x2000007c
 8000d74:	40020008 	.word	0x40020008
 8000d78:	200000dc 	.word	0x200000dc
 8000d7c:	4002001c 	.word	0x4002001c

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09e      	sub	sp, #120	@ 0x78
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	2254      	movs	r2, #84	@ 0x54
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f005 fb4b 	bl	800643c <memset>
  if(huart->Instance==LPUART1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a4d      	ldr	r2, [pc, #308]	@ (8000ee0 <HAL_UART_MspInit+0x160>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	f040 8092 	bne.w	8000ed6 <HAL_UART_MspInit+0x156>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000db2:	2320      	movs	r3, #32
 8000db4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dba:	f107 0310 	add.w	r3, r7, #16
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 fc20 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dca:	f7ff feeb 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000dce:	4b45      	ldr	r3, [pc, #276]	@ (8000ee4 <HAL_UART_MspInit+0x164>)
 8000dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dd2:	4a44      	ldr	r2, [pc, #272]	@ (8000ee4 <HAL_UART_MspInit+0x164>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000dda:	4b42      	ldr	r3, [pc, #264]	@ (8000ee4 <HAL_UART_MspInit+0x164>)
 8000ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ee4 <HAL_UART_MspInit+0x164>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dea:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee4 <HAL_UART_MspInit+0x164>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ee4 <HAL_UART_MspInit+0x164>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000dfe:	230c      	movs	r3, #12
 8000e00:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e0e:	230c      	movs	r3, #12
 8000e10:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1c:	f000 fe08 	bl	8001a30 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000e20:	4b31      	ldr	r3, [pc, #196]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e22:	4a32      	ldr	r2, [pc, #200]	@ (8000eec <HAL_UART_MspInit+0x16c>)
 8000e24:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000e26:	4b30      	ldr	r3, [pc, #192]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e28:	2222      	movs	r2, #34	@ 0x22
 8000e2a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e32:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e3a:	2280      	movs	r2, #128	@ 0x80
 8000e3c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e44:	4b28      	ldr	r3, [pc, #160]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8000e4a:	4b27      	ldr	r3, [pc, #156]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e50:	4b25      	ldr	r3, [pc, #148]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000e56:	4824      	ldr	r0, [pc, #144]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e58:	f000 faaa 	bl	80013b0 <HAL_DMA_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000e62:	f7ff fe9f 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee8 <HAL_UART_MspInit+0x168>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000e76:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef4 <HAL_UART_MspInit+0x174>)
 8000e78:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000e7c:	2223      	movs	r2, #35	@ 0x23
 8000e7e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000e82:	2210      	movs	r2, #16
 8000e84:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000e8e:	2280      	movs	r2, #128	@ 0x80
 8000e90:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e92:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000eaa:	4811      	ldr	r0, [pc, #68]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000eac:	f000 fa80 	bl	80013b0 <HAL_DMA_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000eb6:	f7ff fe75 	bl	8000ba4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000ebe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef0 <HAL_UART_MspInit+0x170>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	205b      	movs	r0, #91	@ 0x5b
 8000ecc:	f000 fa3b 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000ed0:	205b      	movs	r0, #91	@ 0x5b
 8000ed2:	f000 fa52 	bl	800137a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3778      	adds	r7, #120	@ 0x78
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40008000 	.word	0x40008000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	200001d0 	.word	0x200001d0
 8000eec:	40020030 	.word	0x40020030
 8000ef0:	20000230 	.word	0x20000230
 8000ef4:	40020044 	.word	0x40020044

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4e:	f000 f8df 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000f5c:	4802      	ldr	r0, [pc, #8]	@ (8000f68 <DMA1_Channel1_IRQHandler+0x10>)
 8000f5e:	f000 fc0a 	bl	8001776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000007c 	.word	0x2000007c

08000f6c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <DMA1_Channel2_IRQHandler+0x10>)
 8000f72:	f000 fc00 	bl	8001776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000dc 	.word	0x200000dc

08000f80 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000f84:	4802      	ldr	r0, [pc, #8]	@ (8000f90 <DMA1_Channel3_IRQHandler+0x10>)
 8000f86:	f000 fbf6 	bl	8001776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200001d0 	.word	0x200001d0

08000f94 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000f98:	4802      	ldr	r0, [pc, #8]	@ (8000fa4 <DMA1_Channel4_IRQHandler+0x10>)
 8000f9a:	f000 fbec 	bl	8001776 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000230 	.word	0x20000230

08000fa8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fac:	4802      	ldr	r0, [pc, #8]	@ (8000fb8 <I2C1_EV_IRQHandler+0x10>)
 8000fae:	f001 f8bf 	bl	8002130 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000028 	.word	0x20000028

08000fbc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <I2C1_ER_IRQHandler+0x10>)
 8000fc2:	f001 f8cf 	bl	8002164 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000028 	.word	0x20000028

08000fd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000fd8:	f000 fedc 	bl	8001d94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <LPUART1_IRQHandler+0x10>)
 8000fe6:	f003 ff81 	bl	8004eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000013c 	.word	0x2000013c

08000ff4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <SystemInit+0x20>)
 8000ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ffe:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <SystemInit+0x20>)
 8001000:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001004:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001018:	480d      	ldr	r0, [pc, #52]	@ (8001050 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800101a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800101c:	f7ff ffea 	bl	8000ff4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LoopForever+0x6>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <LoopForever+0xe>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	@ (8001064 <LoopForever+0x16>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f005 fa01 	bl	800644c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800104a:	f7ff fa5d 	bl	8000508 <main>

0800104e <LoopForever>:

LoopForever:
    b LoopForever
 800104e:	e7fe      	b.n	800104e <LoopForever>
  ldr   r0, =_estack
 8001050:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800105c:	08006554 	.word	0x08006554
  ldr r2, =_sbss
 8001060:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001064:	200002a8 	.word	0x200002a8

08001068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC1_2_IRQHandler>

0800106a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001074:	2003      	movs	r0, #3
 8001076:	f000 f95b 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800107a:	2000      	movs	r0, #0
 800107c:	f000 f80e 	bl	800109c <HAL_InitTick>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d002      	beq.n	800108c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	71fb      	strb	r3, [r7, #7]
 800108a:	e001      	b.n	8001090 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800108c:	f7ff fd90 	bl	8000bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001090:	79fb      	ldrb	r3, [r7, #7]

}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_InitTick+0x68>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d022      	beq.n	80010f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010b0:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <HAL_InitTick+0x6c>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <HAL_InitTick+0x68>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80010bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80010c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f000 f966 	bl	8001396 <HAL_SYSTICK_Config>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10f      	bne.n	80010f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	d809      	bhi.n	80010ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d6:	2200      	movs	r2, #0
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	f04f 30ff 	mov.w	r0, #4294967295
 80010de:	f000 f932 	bl	8001346 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e2:	4a0a      	ldr	r2, [pc, #40]	@ (800110c <HAL_InitTick+0x70>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e007      	b.n	80010fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	e004      	b.n	80010fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	73fb      	strb	r3, [r7, #15]
 80010f4:	e001      	b.n	80010fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000008 	.word	0x20000008
 8001108:	20000000 	.word	0x20000000
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_IncTick+0x1c>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b05      	ldr	r3, [pc, #20]	@ (8001130 <HAL_IncTick+0x20>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4413      	add	r3, r2
 800111e:	4a03      	ldr	r2, [pc, #12]	@ (800112c <HAL_IncTick+0x1c>)
 8001120:	6013      	str	r3, [r2, #0]
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	200002a4 	.word	0x200002a4
 8001130:	20000008 	.word	0x20000008

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	@ (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200002a4 	.word	0x200002a4

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d004      	beq.n	8001170 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b09      	ldr	r3, [pc, #36]	@ (800118c <HAL_Delay+0x40>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001170:	bf00      	nop
 8001172:	f7ff ffdf 	bl	8001134 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	429a      	cmp	r2, r3
 8001180:	d8f7      	bhi.n	8001172 <HAL_Delay+0x26>
  {
  }
}
 8001182:	bf00      	nop
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c2:	4a04      	ldr	r2, [pc, #16]	@ (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	60d3      	str	r3, [r2, #12]
}
 80011c8:	bf00      	nop
 80011ca:	3714      	adds	r7, #20
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	@ (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	@ (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	@ (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	@ 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	@ 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001354:	f7ff ff40 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 8001358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	68b9      	ldr	r1, [r7, #8]
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff ff90 	bl	8001284 <NVIC_EncodePriority>
 8001364:	4602      	mov	r2, r0
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff5f 	bl	8001230 <__NVIC_SetPriority>
}
 8001372:	bf00      	nop
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	4603      	mov	r3, r0
 8001382:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff33 	bl	80011f4 <__NVIC_EnableIRQ>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ffa4 	bl	80012ec <SysTick_Config>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e08d      	b.n	80014de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b47      	ldr	r3, [pc, #284]	@ (80014e8 <HAL_DMA_Init+0x138>)
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d80f      	bhi.n	80013ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b45      	ldr	r3, [pc, #276]	@ (80014ec <HAL_DMA_Init+0x13c>)
 80013d6:	4413      	add	r3, r2
 80013d8:	4a45      	ldr	r2, [pc, #276]	@ (80014f0 <HAL_DMA_Init+0x140>)
 80013da:	fba2 2303 	umull	r2, r3, r2, r3
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	009a      	lsls	r2, r3, #2
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a42      	ldr	r2, [pc, #264]	@ (80014f4 <HAL_DMA_Init+0x144>)
 80013ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80013ec:	e00e      	b.n	800140c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b40      	ldr	r3, [pc, #256]	@ (80014f8 <HAL_DMA_Init+0x148>)
 80013f6:	4413      	add	r3, r2
 80013f8:	4a3d      	ldr	r2, [pc, #244]	@ (80014f0 <HAL_DMA_Init+0x140>)
 80013fa:	fba2 2303 	umull	r2, r3, r2, r3
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	009a      	lsls	r2, r3, #2
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a3c      	ldr	r2, [pc, #240]	@ (80014fc <HAL_DMA_Init+0x14c>)
 800140a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001426:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001430:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fa84 	bl	800196c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800146c:	d102      	bne.n	8001474 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001488:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d010      	beq.n	80014b4 <HAL_DMA_Init+0x104>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b04      	cmp	r3, #4
 8001498:	d80c      	bhi.n	80014b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 faa4 	bl	80019e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	e008      	b.n	80014c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40020407 	.word	0x40020407
 80014ec:	bffdfff8 	.word	0xbffdfff8
 80014f0:	cccccccd 	.word	0xcccccccd
 80014f4:	40020000 	.word	0x40020000
 80014f8:	bffdfbf8 	.word	0xbffdfbf8
 80014fc:	40020400 	.word	0x40020400

08001500 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_DMA_Start_IT+0x20>
 800151c:	2302      	movs	r3, #2
 800151e:	e066      	b.n	80015ee <HAL_DMA_Start_IT+0xee>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b01      	cmp	r3, #1
 8001532:	d155      	bne.n	80015e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2202      	movs	r2, #2
 8001538:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0201 	bic.w	r2, r2, #1
 8001550:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	68b9      	ldr	r1, [r7, #8]
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 f9c9 	bl	80018f0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f042 020e 	orr.w	r2, r2, #14
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e00f      	b.n	8001598 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0204 	bic.w	r2, r2, #4
 8001586:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 020a 	orr.w	r2, r2, #10
 8001596:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d007      	beq.n	80015ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f042 0201 	orr.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e005      	b.n	80015ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015e8:	2302      	movs	r3, #2
 80015ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b085      	sub	sp, #20
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d005      	beq.n	800161a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2204      	movs	r2, #4
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e037      	b.n	800168a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 020e 	bic.w	r2, r2, #14
 8001628:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001634:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001638:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0201 	bic.w	r2, r2, #1
 8001648:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f003 021f 	and.w	r2, r3, #31
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	2101      	movs	r1, #1
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001666:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00c      	beq.n	800168a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800167e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001688:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b0:	2300      	movs	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d00d      	beq.n	80016dc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2204      	movs	r2, #4
 80016c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
 80016da:	e047      	b.n	800176c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 020e 	bic.w	r2, r2, #14
 80016ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001706:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800170a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001710:	f003 021f 	and.w	r2, r3, #31
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	2101      	movs	r1, #1
 800171a:	fa01 f202 	lsl.w	r2, r1, r2
 800171e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001728:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00c      	beq.n	800174c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001740:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800174a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	4798      	blx	r3
    }
  }
  return status;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	2204      	movs	r2, #4
 8001798:	409a      	lsls	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d026      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x7a>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d021      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0320 	and.w	r3, r3, #32
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d107      	bne.n	80017ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0204 	bic.w	r2, r2, #4
 80017c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f003 021f 	and.w	r2, r3, #31
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	2104      	movs	r1, #4
 80017d8:	fa01 f202 	lsl.w	r2, r1, r2
 80017dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d071      	beq.n	80018ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017ee:	e06c      	b.n	80018ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f4:	f003 031f 	and.w	r3, r3, #31
 80017f8:	2202      	movs	r2, #2
 80017fa:	409a      	lsls	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4013      	ands	r3, r2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d02e      	beq.n	8001862 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d029      	beq.n	8001862 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10b      	bne.n	8001834 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 020a 	bic.w	r2, r2, #10
 800182a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2201      	movs	r2, #1
 8001830:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	2102      	movs	r1, #2
 8001842:	fa01 f202 	lsl.w	r2, r1, r2
 8001846:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001854:	2b00      	cmp	r3, #0
 8001856:	d038      	beq.n	80018ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001860:	e033      	b.n	80018ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f003 031f 	and.w	r3, r3, #31
 800186a:	2208      	movs	r2, #8
 800186c:	409a      	lsls	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d02a      	beq.n	80018cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f003 0308 	and.w	r3, r3, #8
 800187c:	2b00      	cmp	r3, #0
 800187e:	d025      	beq.n	80018cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 020e 	bic.w	r2, r2, #14
 800188e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001894:	f003 021f 	and.w	r2, r3, #31
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	2101      	movs	r1, #1
 800189e:	fa01 f202 	lsl.w	r2, r1, r2
 80018a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d004      	beq.n	80018cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018ca:	bf00      	nop
 80018cc:	bf00      	nop
}
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018e2:	b2db      	uxtb	r3, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001906:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800190c:	2b00      	cmp	r3, #0
 800190e:	d004      	beq.n	800191a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001918:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f003 021f 	and.w	r2, r3, #31
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f202 	lsl.w	r2, r1, r2
 800192c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b10      	cmp	r3, #16
 800193c:	d108      	bne.n	8001950 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800194e:	e007      	b.n	8001960 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	60da      	str	r2, [r3, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800196c:	b480      	push	{r7}
 800196e:	b087      	sub	sp, #28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800197c:	429a      	cmp	r2, r3
 800197e:	d802      	bhi.n	8001986 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001980:	4b15      	ldr	r3, [pc, #84]	@ (80019d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e001      	b.n	800198a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001988:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	b2db      	uxtb	r3, r3
 8001994:	3b08      	subs	r3, #8
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	091b      	lsrs	r3, r3, #4
 800199e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	009a      	lsls	r2, r3, #2
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4413      	add	r3, r2
 80019ac:	461a      	mov	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a0b      	ldr	r2, [pc, #44]	@ (80019e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019b6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	2201      	movs	r2, #1
 80019c0:	409a      	lsls	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40020407 	.word	0x40020407
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020820 	.word	0x40020820
 80019e0:	cccccccd 	.word	0xcccccccd
 80019e4:	40020880 	.word	0x40020880

080019e8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	461a      	mov	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a0a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f003 031f 	and.w	r3, r3, #31
 8001a14:	2201      	movs	r2, #1
 8001a16:	409a      	lsls	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	1000823f 	.word	0x1000823f
 8001a2c:	40020940 	.word	0x40020940

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a3e:	e15a      	b.n	8001cf6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 814c 	beq.w	8001cf0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d005      	beq.n	8001a70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d130      	bne.n	8001ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f003 0201 	and.w	r2, r3, #1
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d017      	beq.n	8001b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d123      	bne.n	8001b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	08da      	lsrs	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	6939      	ldr	r1, [r7, #16]
 8001b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0203 	and.w	r2, r3, #3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80a6 	beq.w	8001cf0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8001d14 <HAL_GPIO_Init+0x2e4>)
 8001ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8001d14 <HAL_GPIO_Init+0x2e4>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bb0:	4b58      	ldr	r3, [pc, #352]	@ (8001d14 <HAL_GPIO_Init+0x2e4>)
 8001bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bbc:	4a56      	ldr	r2, [pc, #344]	@ (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	3302      	adds	r3, #2
 8001bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001be6:	d01f      	beq.n	8001c28 <HAL_GPIO_Init+0x1f8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4a4c      	ldr	r2, [pc, #304]	@ (8001d1c <HAL_GPIO_Init+0x2ec>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d019      	beq.n	8001c24 <HAL_GPIO_Init+0x1f4>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a4b      	ldr	r2, [pc, #300]	@ (8001d20 <HAL_GPIO_Init+0x2f0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d013      	beq.n	8001c20 <HAL_GPIO_Init+0x1f0>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a4a      	ldr	r2, [pc, #296]	@ (8001d24 <HAL_GPIO_Init+0x2f4>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d00d      	beq.n	8001c1c <HAL_GPIO_Init+0x1ec>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a49      	ldr	r2, [pc, #292]	@ (8001d28 <HAL_GPIO_Init+0x2f8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <HAL_GPIO_Init+0x1e8>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a48      	ldr	r2, [pc, #288]	@ (8001d2c <HAL_GPIO_Init+0x2fc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_GPIO_Init+0x1e4>
 8001c10:	2305      	movs	r3, #5
 8001c12:	e00a      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c14:	2306      	movs	r3, #6
 8001c16:	e008      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c18:	2304      	movs	r3, #4
 8001c1a:	e006      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e004      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c20:	2302      	movs	r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_GPIO_Init+0x1fa>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	f002 0203 	and.w	r2, r2, #3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	4093      	lsls	r3, r2
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3a:	4937      	ldr	r1, [pc, #220]	@ (8001d18 <HAL_GPIO_Init+0x2e8>)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	089b      	lsrs	r3, r3, #2
 8001c40:	3302      	adds	r3, #2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c48:	4b39      	ldr	r3, [pc, #228]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c6c:	4a30      	ldr	r2, [pc, #192]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c72:	4b2f      	ldr	r3, [pc, #188]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c96:	4a26      	ldr	r2, [pc, #152]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c9c:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cea:	4a11      	ldr	r2, [pc, #68]	@ (8001d30 <HAL_GPIO_Init+0x300>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f47f ae9d 	bne.w	8001a40 <HAL_GPIO_Init+0x10>
  }
}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	371c      	adds	r7, #28
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40010000 	.word	0x40010000
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	48000800 	.word	0x48000800
 8001d24:	48000c00 	.word	0x48000c00
 8001d28:	48001000 	.word	0x48001000
 8001d2c:	48001400 	.word	0x48001400
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	887b      	ldrh	r3, [r7, #2]
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
 8001d50:	e001      	b.n	8001d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d82:	887a      	ldrh	r2, [r7, #2]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d9e:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001daa:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001db0:	88fb      	ldrh	r3, [r7, #6]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f806 	bl	8001dc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e08d      	b.n	8001f08 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d106      	bne.n	8001e06 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7fe fef9 	bl	8000bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2224      	movs	r2, #36	@ 0x24
 8001e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d107      	bne.n	8001e54 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	e006      	b.n	8001e62 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001e60:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d108      	bne.n	8001e7c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	e007      	b.n	8001e8c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e9e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001eae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69d9      	ldr	r1, [r3, #28]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af02      	add	r7, sp, #8
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	817b      	strh	r3, [r7, #10]
 8001f22:	460b      	mov	r3, r1
 8001f24:	813b      	strh	r3, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b20      	cmp	r3, #32
 8001f34:	d16a      	bne.n	800200c <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_I2C_Mem_Write_IT+0x32>
 8001f3c:	8bbb      	ldrh	r3, [r7, #28]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f48:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e05f      	b.n	800200e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e055      	b.n	800200e <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_I2C_Mem_Write_IT+0x60>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e04e      	b.n	800200e <HAL_I2C_Mem_Write_IT+0xfe>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2221      	movs	r2, #33	@ 0x21
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2240      	movs	r2, #64	@ 0x40
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8bba      	ldrh	r2, [r7, #28]
 8001f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8002018 <HAL_I2C_Mem_Write_IT+0x108>)
 8001fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800201c <HAL_I2C_Mem_Write_IT+0x10c>)
 8001faa:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8001fac:	897a      	ldrh	r2, [r7, #10]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d109      	bne.n	8001fcc <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fb8:	893b      	ldrh	r3, [r7, #8]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fca:	e00b      	b.n	8001fe4 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fcc:	893b      	ldrh	r3, [r7, #8]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8001fda:	893b      	ldrh	r3, [r7, #8]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	8979      	ldrh	r1, [r7, #10]
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_I2C_Mem_Write_IT+0x110>)
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f001 fb78 	bl	80036e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002000:	2101      	movs	r1, #1
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f001 fba2 	bl	800374c <I2C_Enable_IRQ>

    return HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	e000      	b.n	800200e <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800200c:	2302      	movs	r3, #2
  }
}
 800200e:	4618      	mov	r0, r3
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	ffff0000 	.word	0xffff0000
 800201c:	080022ed 	.word	0x080022ed
 8002020:	80002000 	.word	0x80002000

08002024 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af02      	add	r7, sp, #8
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	4608      	mov	r0, r1
 800202e:	4611      	mov	r1, r2
 8002030:	461a      	mov	r2, r3
 8002032:	4603      	mov	r3, r0
 8002034:	817b      	strh	r3, [r7, #10]
 8002036:	460b      	mov	r3, r1
 8002038:	813b      	strh	r3, [r7, #8]
 800203a:	4613      	mov	r3, r2
 800203c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b20      	cmp	r3, #32
 8002048:	d166      	bne.n	8002118 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_I2C_Mem_Read_IT+0x32>
 8002050:	8bbb      	ldrh	r3, [r7, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e05b      	b.n	800211a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800206c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002070:	d101      	bne.n	8002076 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002072:	2302      	movs	r3, #2
 8002074:	e051      	b.n	800211a <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_I2C_Mem_Read_IT+0x60>
 8002080:	2302      	movs	r3, #2
 8002082:	e04a      	b.n	800211a <HAL_I2C_Mem_Read_IT+0xf6>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2222      	movs	r2, #34	@ 0x22
 8002090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2240      	movs	r2, #64	@ 0x40
 8002098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8bba      	ldrh	r2, [r7, #28]
 80020ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002124 <HAL_I2C_Mem_Read_IT+0x100>)
 80020b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002128 <HAL_I2C_Mem_Read_IT+0x104>)
 80020b8:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80020ba:	897a      	ldrh	r2, [r7, #10]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d109      	bne.n	80020da <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020c6:	893b      	ldrh	r3, [r7, #8]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f04f 32ff 	mov.w	r2, #4294967295
 80020d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80020d8:	e00b      	b.n	80020f2 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020da:	893b      	ldrh	r3, [r7, #8]
 80020dc:	0a1b      	lsrs	r3, r3, #8
 80020de:	b29b      	uxth	r3, r3
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80020e8:	893b      	ldrh	r3, [r7, #8]
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	461a      	mov	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	8979      	ldrh	r1, [r7, #10]
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <HAL_I2C_Mem_Read_IT+0x108>)
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	2300      	movs	r3, #0
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f001 faf2 	bl	80036e8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800210c:	2101      	movs	r1, #1
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f001 fb1c 	bl	800374c <I2C_Enable_IRQ>

    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002118:	2302      	movs	r3, #2
  }
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	ffff0000 	.word	0xffff0000
 8002128:	080022ed 	.word	0x080022ed
 800212c:	80002000 	.word	0x80002000

08002130 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
  }
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00f      	beq.n	80021a6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00f      	beq.n	80021d0 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f043 0208 	orr.w	r2, r3, #8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00f      	beq.n	80021fa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00a      	beq.n	80021fa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e8:	f043 0202 	orr.w	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 030b 	and.w	r3, r3, #11
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800220a:	68f9      	ldr	r1, [r7, #12]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f001 f911 	bl	8003434 <I2C_ITError>
  }
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	70fb      	strb	r3, [r7, #3]
 8002276:	4613      	mov	r3, r2
 8002278:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80022f8:	4b8d      	ldr	r3, [pc, #564]	@ (8002530 <I2C_Mem_ISR_IT+0x244>)
 80022fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <I2C_Mem_ISR_IT+0x22>
 800230a:	2302      	movs	r3, #2
 800230c:	e10c      	b.n	8002528 <I2C_Mem_ISR_IT+0x23c>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	d012      	beq.n	8002346 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00d      	beq.n	8002346 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2210      	movs	r2, #16
 8002330:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f043 0204 	orr.w	r2, r3, #4
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f001 f98f 	bl	8003662 <I2C_Flush_TXDR>
 8002344:	e0dd      	b.n	8002502 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d022      	beq.n	8002396 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002356:	2b00      	cmp	r3, #0
 8002358:	d01d      	beq.n	8002396 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	f023 0304 	bic.w	r3, r3, #4
 8002360:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002394:	e0b5      	b.n	8002502 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d02c      	beq.n	80023fa <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d027      	beq.n	80023fa <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b2:	d118      	bne.n	80023e6 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80023e4:	e08d      	b.n	8002502 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f04f 32ff 	mov.w	r2, #4294967295
 80023f6:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 80023f8:	e083      	b.n	8002502 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002400:	2b00      	cmp	r3, #0
 8002402:	d03c      	beq.n	800247e <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800240a:	2b00      	cmp	r3, #0
 800240c:	d037      	beq.n	800247e <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d02c      	beq.n	8002472 <I2C_Mem_ISR_IT+0x186>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241c:	2b00      	cmp	r3, #0
 800241e:	d128      	bne.n	8002472 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2bff      	cmp	r3, #255	@ 0xff
 8002428:	d910      	bls.n	800244c <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	22ff      	movs	r2, #255	@ 0xff
 800242e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002434:	b299      	uxth	r1, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800243a:	b2da      	uxtb	r2, r3
 800243c:	2300      	movs	r3, #0
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f001 f94f 	bl	80036e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800244a:	e017      	b.n	800247c <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	b299      	uxth	r1, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002460:	b2da      	uxtb	r2, r3
 8002462:	2300      	movs	r3, #0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f001 f93c 	bl	80036e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002470:	e004      	b.n	800247c <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002472:	2140      	movs	r1, #64	@ 0x40
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 ffdd 	bl	8003434 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800247a:	e042      	b.n	8002502 <I2C_Mem_ISR_IT+0x216>
 800247c:	e041      	b.n	8002502 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d03c      	beq.n	8002502 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800248e:	2b00      	cmp	r3, #0
 8002490:	d037      	beq.n	8002502 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002492:	2101      	movs	r1, #1
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f001 f9dd 	bl	8003854 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800249a:	2102      	movs	r1, #2
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f001 f955 	bl	800374c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b22      	cmp	r3, #34	@ 0x22
 80024ac:	d101      	bne.n	80024b2 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 80024ae:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <I2C_Mem_ISR_IT+0x248>)
 80024b0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2bff      	cmp	r3, #255	@ 0xff
 80024ba:	d910      	bls.n	80024de <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	22ff      	movs	r2, #255	@ 0xff
 80024c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c6:	b299      	uxth	r1, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f001 f906 	bl	80036e8 <I2C_TransferConfig>
 80024dc:	e011      	b.n	8002502 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ec:	b299      	uxth	r1, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f001 f8f3 	bl	80036e8 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002516:	6939      	ldr	r1, [r7, #16]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fd0b 	bl	8002f34 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	80002000 	.word	0x80002000
 8002534:	80002400 	.word	0x80002400

08002538 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <I2C_Slave_ISR_IT+0x24>
 8002558:	2302      	movs	r3, #2
 800255a:	e0e2      	b.n	8002722 <I2C_Slave_ISR_IT+0x1ea>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f003 0320 	and.w	r3, r3, #32
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002578:	6939      	ldr	r1, [r7, #16]
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fda2 	bl	80030c4 <I2C_ITSlaveCplt>
 8002580:	e0ca      	b.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d04b      	beq.n	8002624 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002592:	2b00      	cmp	r3, #0
 8002594:	d046      	beq.n	8002624 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d128      	bne.n	80025f2 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b28      	cmp	r3, #40	@ 0x28
 80025aa:	d108      	bne.n	80025be <I2C_Slave_ISR_IT+0x86>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025b2:	d104      	bne.n	80025be <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80025b4:	6939      	ldr	r1, [r7, #16]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fee8 	bl	800338c <I2C_ITListenCplt>
 80025bc:	e031      	b.n	8002622 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b29      	cmp	r3, #41	@ 0x29
 80025c8:	d10e      	bne.n	80025e8 <I2C_Slave_ISR_IT+0xb0>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80025d0:	d00a      	beq.n	80025e8 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2210      	movs	r2, #16
 80025d8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f001 f841 	bl	8003662 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fc4b 	bl	8002e7c <I2C_ITSlaveSeqCplt>
 80025e6:	e01c      	b.n	8002622 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2210      	movs	r2, #16
 80025ee:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80025f0:	e08f      	b.n	8002712 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2210      	movs	r2, #16
 80025f8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fe:	f043 0204 	orr.w	r2, r3, #4
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <I2C_Slave_ISR_IT+0xdc>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002612:	d17e      	bne.n	8002712 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002618:	4619      	mov	r1, r3
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 ff0a 	bl	8003434 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002620:	e077      	b.n	8002712 <I2C_Slave_ISR_IT+0x1da>
 8002622:	e076      	b.n	8002712 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	d02f      	beq.n	800268e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002634:	2b00      	cmp	r3, #0
 8002636:	d02a      	beq.n	800268e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d018      	beq.n	8002674 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d14b      	bne.n	8002716 <I2C_Slave_ISR_IT+0x1de>
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002684:	d047      	beq.n	8002716 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fbf8 	bl	8002e7c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800268c:	e043      	b.n	8002716 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d009      	beq.n	80026ac <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d004      	beq.n	80026ac <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80026a2:	6939      	ldr	r1, [r7, #16]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 fb28 	bl	8002cfa <I2C_ITAddrCplt>
 80026aa:	e035      	b.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d030      	beq.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02b      	beq.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ce:	781a      	ldrb	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80026fa:	e00d      	b.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002702:	d002      	beq.n	800270a <I2C_Slave_ISR_IT+0x1d2>
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d106      	bne.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 fbb6 	bl	8002e7c <I2C_ITSlaveSeqCplt>
 8002710:	e002      	b.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002712:	bf00      	nop
 8002714:	e000      	b.n	8002718 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002716:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b088      	sub	sp, #32
 800272e:	af02      	add	r7, sp, #8
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <I2C_Master_ISR_DMA+0x1a>
 8002740:	2302      	movs	r3, #2
 8002742:	e0d9      	b.n	80028f8 <I2C_Master_ISR_DMA+0x1ce>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800275c:	2b00      	cmp	r3, #0
 800275e:	d011      	beq.n	8002784 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2210      	movs	r2, #16
 8002766:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276c:	f043 0204 	orr.w	r2, r3, #4
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002774:	2120      	movs	r1, #32
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 ffe8 	bl	800374c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 ff70 	bl	8003662 <I2C_Flush_TXDR>
 8002782:	e0b4      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800278a:	2b00      	cmp	r3, #0
 800278c:	d071      	beq.n	8002872 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002794:	2b00      	cmp	r3, #0
 8002796:	d06c      	beq.n	8002872 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027a6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d04e      	beq.n	8002850 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027be:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2bff      	cmp	r3, #255	@ 0xff
 80027c8:	d906      	bls.n	80027d8 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	22ff      	movs	r2, #255	@ 0xff
 80027ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80027d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e010      	b.n	80027fa <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80027ea:	d003      	beq.n	80027f4 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e002      	b.n	80027fa <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80027f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	8a79      	ldrh	r1, [r7, #18]
 8002802:	2300      	movs	r3, #0
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f000 ff6d 	bl	80036e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b22      	cmp	r3, #34	@ 0x22
 800282a:	d108      	bne.n	800283e <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800283a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800283c:	e057      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800284c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800284e:	e04e      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800285e:	d003      	beq.n	8002868 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f000 face 	bl	8002e02 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002866:	e042      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002868:	2140      	movs	r1, #64	@ 0x40
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fde2 	bl	8003434 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002870:	e03d      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002878:	2b00      	cmp	r3, #0
 800287a:	d028      	beq.n	80028ce <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002882:	2b00      	cmp	r3, #0
 8002884:	d023      	beq.n	80028ce <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d119      	bne.n	80028c4 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800289a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800289e:	d025      	beq.n	80028ec <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80028a8:	d108      	bne.n	80028bc <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b8:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80028ba:	e017      	b.n	80028ec <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 faa0 	bl	8002e02 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80028c2:	e013      	b.n	80028ec <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80028c4:	2140      	movs	r1, #64	@ 0x40
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fdb4 	bl	8003434 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80028cc:	e00e      	b.n	80028ec <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80028e2:	68b9      	ldr	r1, [r7, #8]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 fb25 	bl	8002f34 <I2C_ITMasterCplt>
 80028ea:	e000      	b.n	80028ee <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80028ec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800290c:	4b8d      	ldr	r3, [pc, #564]	@ (8002b44 <I2C_Mem_ISR_DMA+0x244>)
 800290e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <I2C_Mem_ISR_DMA+0x1e>
 800291a:	2302      	movs	r3, #2
 800291c:	e10e      	b.n	8002b3c <I2C_Mem_ISR_DMA+0x23c>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	2b00      	cmp	r3, #0
 800292e:	d016      	beq.n	800295e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002936:	2b00      	cmp	r3, #0
 8002938:	d011      	beq.n	800295e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2210      	movs	r2, #16
 8002940:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f043 0204 	orr.w	r2, r3, #4
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800294e:	2120      	movs	r1, #32
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 fefb 	bl	800374c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fe83 	bl	8003662 <I2C_Flush_TXDR>
 800295c:	e0e9      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800297a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f04f 32ff 	mov.w	r2, #4294967295
 8002982:	651a      	str	r2, [r3, #80]	@ 0x50
 8002984:	e0d5      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05f      	beq.n	8002a50 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002996:	2b00      	cmp	r3, #0
 8002998:	d05a      	beq.n	8002a50 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800299a:	2101      	movs	r1, #1
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 ff59 	bl	8003854 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80029a2:	2110      	movs	r1, #16
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fed1 	bl	800374c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d048      	beq.n	8002a46 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2bff      	cmp	r3, #255	@ 0xff
 80029bc:	d910      	bls.n	80029e0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	22ff      	movs	r2, #255	@ 0xff
 80029c2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c8:	b299      	uxth	r1, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	2300      	movs	r3, #0
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fe85 	bl	80036e8 <I2C_TransferConfig>
 80029de:	e011      	b.n	8002a04 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ee:	b299      	uxth	r1, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	2300      	movs	r3, #0
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fe72 	bl	80036e8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b22      	cmp	r3, #34	@ 0x22
 8002a20:	d108      	bne.n	8002a34 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a30:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a32:	e07e      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a42:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002a44:	e075      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a46:	2140      	movs	r1, #64	@ 0x40
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 fcf3 	bl	8003434 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002a4e:	e070      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d05d      	beq.n	8002b16 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d058      	beq.n	8002b16 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a64:	2101      	movs	r1, #1
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fef4 	bl	8003854 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002a6c:	2110      	movs	r1, #16
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fe6c 	bl	800374c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2b22      	cmp	r3, #34	@ 0x22
 8002a7e:	d101      	bne.n	8002a84 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8002a80:	4b31      	ldr	r3, [pc, #196]	@ (8002b48 <I2C_Mem_ISR_DMA+0x248>)
 8002a82:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2bff      	cmp	r3, #255	@ 0xff
 8002a8c:	d910      	bls.n	8002ab0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	22ff      	movs	r2, #255	@ 0xff
 8002a92:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a98:	b299      	uxth	r1, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fe1d 	bl	80036e8 <I2C_TransferConfig>
 8002aae:	e011      	b.n	8002ad4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002abe:	b299      	uxth	r1, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fe0a 	bl	80036e8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b22      	cmp	r3, #34	@ 0x22
 8002af0:	d108      	bne.n	8002b04 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b00:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b02:	e016      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b12:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b14:	e00d      	b.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fa01 	bl	8002f34 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	80002000 	.word	0x80002000
 8002b48:	80002400 	.word	0x80002400

08002b4c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b088      	sub	sp, #32
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <I2C_Slave_ISR_DMA+0x24>
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	e0c0      	b.n	8002cf2 <I2C_Slave_ISR_DMA+0x1a6>
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 fa98 	bl	80030c4 <I2C_ITSlaveCplt>
 8002b94:	e0a8      	b.n	8002ce8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8095 	beq.w	8002ccc <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 808f 	beq.w	8002ccc <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d104      	bne.n	8002bc2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d07d      	beq.n	8002cbe <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00c      	beq.n	8002be4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8002be0:	2301      	movs	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00c      	beq.n	8002c06 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8002c02:	2301      	movs	r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d128      	bne.n	8002c5e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b28      	cmp	r3, #40	@ 0x28
 8002c16:	d108      	bne.n	8002c2a <I2C_Slave_ISR_DMA+0xde>
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c1e:	d104      	bne.n	8002c2a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 fbb2 	bl	800338c <I2C_ITListenCplt>
 8002c28:	e048      	b.n	8002cbc <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b29      	cmp	r3, #41	@ 0x29
 8002c34:	d10e      	bne.n	8002c54 <I2C_Slave_ISR_DMA+0x108>
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c3c:	d00a      	beq.n	8002c54 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2210      	movs	r2, #16
 8002c44:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fd0b 	bl	8003662 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f915 	bl	8002e7c <I2C_ITSlaveSeqCplt>
 8002c52:	e033      	b.n	8002cbc <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002c5c:	e034      	b.n	8002cc8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2210      	movs	r2, #16
 8002c64:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c78:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <I2C_Slave_ISR_DMA+0x13c>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c86:	d11f      	bne.n	8002cc8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c88:	7dfb      	ldrb	r3, [r7, #23]
 8002c8a:	2b21      	cmp	r3, #33	@ 0x21
 8002c8c:	d002      	beq.n	8002c94 <I2C_Slave_ISR_DMA+0x148>
 8002c8e:	7dfb      	ldrb	r3, [r7, #23]
 8002c90:	2b29      	cmp	r3, #41	@ 0x29
 8002c92:	d103      	bne.n	8002c9c <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2221      	movs	r2, #33	@ 0x21
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c9a:	e008      	b.n	8002cae <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c9c:	7dfb      	ldrb	r3, [r7, #23]
 8002c9e:	2b22      	cmp	r3, #34	@ 0x22
 8002ca0:	d002      	beq.n	8002ca8 <I2C_Slave_ISR_DMA+0x15c>
 8002ca2:	7dfb      	ldrb	r3, [r7, #23]
 8002ca4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ca6:	d102      	bne.n	8002cae <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2222      	movs	r2, #34	@ 0x22
 8002cac:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fbbd 	bl	8003434 <I2C_ITError>
      if (treatdmanack == 1U)
 8002cba:	e005      	b.n	8002cc8 <I2C_Slave_ISR_DMA+0x17c>
 8002cbc:	e004      	b.n	8002cc8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cc6:	e00f      	b.n	8002ce8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8002cc8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002cca:	e00d      	b.n	8002ce8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d008      	beq.n	8002ce8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f809 	bl	8002cfa <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3720      	adds	r7, #32
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d10:	2b28      	cmp	r3, #40	@ 0x28
 8002d12:	d16a      	bne.n	8002dea <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	0c1b      	lsrs	r3, r3, #16
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d32:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d40:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002d4e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d138      	bne.n	8002dca <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	09db      	lsrs	r3, r3, #7
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	89bb      	ldrh	r3, [r7, #12]
 8002d60:	4053      	eors	r3, r2
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f003 0306 	and.w	r3, r3, #6
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11c      	bne.n	8002da6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d6c:	897b      	ldrh	r3, [r7, #10]
 8002d6e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d13b      	bne.n	8002dfa <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2208      	movs	r2, #8
 8002d8e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d98:	89ba      	ldrh	r2, [r7, #12]
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff fa63 	bl	800226a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002da4:	e029      	b.n	8002dfa <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002da6:	893b      	ldrh	r3, [r7, #8]
 8002da8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002daa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fd50 	bl	8003854 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002dbc:	89ba      	ldrh	r2, [r7, #12]
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fa51 	bl	800226a <HAL_I2C_AddrCallback>
}
 8002dc8:	e017      	b.n	8002dfa <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002dca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fd40 	bl	8003854 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ddc:	89ba      	ldrh	r2, [r7, #12]
 8002dde:	7bfb      	ldrb	r3, [r7, #15]
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fa41 	bl	800226a <HAL_I2C_AddrCallback>
}
 8002de8:	e007      	b.n	8002dfa <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2208      	movs	r2, #8
 8002df0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002dfa:	bf00      	nop
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b21      	cmp	r3, #33	@ 0x21
 8002e1c:	d115      	bne.n	8002e4a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2211      	movs	r2, #17
 8002e2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e32:	2101      	movs	r1, #1
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fd0d 	bl	8003854 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7ff f9e9 	bl	800221a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e48:	e014      	b.n	8002e74 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2212      	movs	r2, #18
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e5e:	2102      	movs	r1, #2
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fcf7 	bl	8003854 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff f9dd 	bl	800222e <HAL_I2C_MasterRxCpltCallback>
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002eac:	601a      	str	r2, [r3, #0]
 8002eae:	e00c      	b.n	8002eca <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d007      	beq.n	8002eca <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b29      	cmp	r3, #41	@ 0x29
 8002ed4:	d112      	bne.n	8002efc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2228      	movs	r2, #40	@ 0x28
 8002eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2221      	movs	r2, #33	@ 0x21
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fcb4 	bl	8003854 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff f9a4 	bl	8002242 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002efa:	e017      	b.n	8002f2c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f06:	d111      	bne.n	8002f2c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2228      	movs	r2, #40	@ 0x28
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2222      	movs	r2, #34	@ 0x22
 8002f14:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f16:	2102      	movs	r1, #2
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fc9b 	bl	8003854 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff f995 	bl	8002256 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2220      	movs	r2, #32
 8002f48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b21      	cmp	r3, #33	@ 0x21
 8002f54:	d107      	bne.n	8002f66 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002f56:	2101      	movs	r1, #1
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 fc7b 	bl	8003854 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2211      	movs	r2, #17
 8002f62:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f64:	e00c      	b.n	8002f80 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b22      	cmp	r3, #34	@ 0x22
 8002f70:	d106      	bne.n	8002f80 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002f72:	2102      	movs	r1, #2
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fc6d 	bl	8003854 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2212      	movs	r2, #18
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80030bc <I2C_ITMasterCplt+0x188>)
 8002f8c:	400b      	ands	r3, r1
 8002f8e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a49      	ldr	r2, [pc, #292]	@ (80030c0 <I2C_ITMasterCplt+0x18c>)
 8002f9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2210      	movs	r2, #16
 8002fac:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	f043 0204 	orr.w	r2, r3, #4
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b60      	cmp	r3, #96	@ 0x60
 8002fc4:	d10a      	bne.n	8002fdc <I2C_ITMasterCplt+0xa8>
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002fda:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fb40 	bl	8003662 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b60      	cmp	r3, #96	@ 0x60
 8002ff2:	d002      	beq.n	8002ffa <I2C_ITMasterCplt+0xc6>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d006      	beq.n	8003008 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fa17 	bl	8003434 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003006:	e054      	b.n	80030b2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b21      	cmp	r3, #33	@ 0x21
 8003012:	d124      	bne.n	800305e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b40      	cmp	r3, #64	@ 0x40
 800302c:	d10b      	bne.n	8003046 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff f92b 	bl	800229a <HAL_I2C_MemTxCpltCallback>
}
 8003044:	e035      	b.n	80030b2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7ff f8df 	bl	800221a <HAL_I2C_MasterTxCpltCallback>
}
 800305c:	e029      	b.n	80030b2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b22      	cmp	r3, #34	@ 0x22
 8003068:	d123      	bne.n	80030b2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b40      	cmp	r3, #64	@ 0x40
 8003082:	d10b      	bne.n	800309c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff f90a 	bl	80022ae <HAL_I2C_MemRxCpltCallback>
}
 800309a:	e00a      	b.n	80030b2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff f8be 	bl	800222e <HAL_I2C_MasterRxCpltCallback>
}
 80030b2:	bf00      	nop
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	fe00e800 	.word	0xfe00e800
 80030c0:	ffff0000 	.word	0xffff0000

080030c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030de:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030e6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2220      	movs	r2, #32
 80030ee:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030f0:	7afb      	ldrb	r3, [r7, #11]
 80030f2:	2b21      	cmp	r3, #33	@ 0x21
 80030f4:	d002      	beq.n	80030fc <I2C_ITSlaveCplt+0x38>
 80030f6:	7afb      	ldrb	r3, [r7, #11]
 80030f8:	2b29      	cmp	r3, #41	@ 0x29
 80030fa:	d108      	bne.n	800310e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80030fc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fba7 	bl	8003854 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2221      	movs	r2, #33	@ 0x21
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
 800310c:	e019      	b.n	8003142 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800310e:	7afb      	ldrb	r3, [r7, #11]
 8003110:	2b22      	cmp	r3, #34	@ 0x22
 8003112:	d002      	beq.n	800311a <I2C_ITSlaveCplt+0x56>
 8003114:	7afb      	ldrb	r3, [r7, #11]
 8003116:	2b2a      	cmp	r3, #42	@ 0x2a
 8003118:	d108      	bne.n	800312c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800311a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fb98 	bl	8003854 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2222      	movs	r2, #34	@ 0x22
 8003128:	631a      	str	r2, [r3, #48]	@ 0x30
 800312a:	e00a      	b.n	8003142 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800312c:	7afb      	ldrb	r3, [r7, #11]
 800312e:	2b28      	cmp	r3, #40	@ 0x28
 8003130:	d107      	bne.n	8003142 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003132:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fb8c 	bl	8003854 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003150:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b89      	ldr	r3, [pc, #548]	@ (8003384 <I2C_ITSlaveCplt+0x2c0>)
 800315e:	400b      	ands	r3, r1
 8003160:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fa7d 	bl	8003662 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003180:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01f      	beq.n	80031ca <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	b29a      	uxth	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003198:	e017      	b.n	80031ca <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 0304 	and.w	r3, r3, #4
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0304 	bic.w	r3, r3, #4
 80031da:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003224:	f043 0204 	orr.w	r2, r3, #4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0310 	and.w	r3, r3, #16
 8003232:	2b00      	cmp	r3, #0
 8003234:	d049      	beq.n	80032ca <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800323c:	2b00      	cmp	r3, #0
 800323e:	d044      	beq.n	80032ca <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d128      	bne.n	800329c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b28      	cmp	r3, #40	@ 0x28
 8003254:	d108      	bne.n	8003268 <I2C_ITSlaveCplt+0x1a4>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800325c:	d104      	bne.n	8003268 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800325e:	6979      	ldr	r1, [r7, #20]
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f893 	bl	800338c <I2C_ITListenCplt>
 8003266:	e030      	b.n	80032ca <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b29      	cmp	r3, #41	@ 0x29
 8003272:	d10e      	bne.n	8003292 <I2C_ITSlaveCplt+0x1ce>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800327a:	d00a      	beq.n	8003292 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2210      	movs	r2, #16
 8003282:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f9ec 	bl	8003662 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff fdf6 	bl	8002e7c <I2C_ITSlaveSeqCplt>
 8003290:	e01b      	b.n	80032ca <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2210      	movs	r2, #16
 8003298:	61da      	str	r2, [r3, #28]
 800329a:	e016      	b.n	80032ca <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2210      	movs	r2, #16
 80032a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a8:	f043 0204 	orr.w	r2, r3, #4
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <I2C_ITSlaveCplt+0x1fa>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032bc:	d105      	bne.n	80032ca <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	4619      	mov	r1, r3
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f000 f8b5 	bl	8003434 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d010      	beq.n	8003302 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f8a4 	bl	8003434 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b28      	cmp	r3, #40	@ 0x28
 80032f6:	d141      	bne.n	800337c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f846 	bl	800338c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003300:	e03c      	b.n	800337c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003306:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800330a:	d014      	beq.n	8003336 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff fdb5 	bl	8002e7c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a1c      	ldr	r2, [pc, #112]	@ (8003388 <I2C_ITSlaveCplt+0x2c4>)
 8003316:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7fe ffa9 	bl	8002286 <HAL_I2C_ListenCpltCallback>
}
 8003334:	e022      	b.n	800337c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b22      	cmp	r3, #34	@ 0x22
 8003340:	d10e      	bne.n	8003360 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7fe ff7c 	bl	8002256 <HAL_I2C_SlaveRxCpltCallback>
}
 800335e:	e00d      	b.n	800337c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe ff63 	bl	8002242 <HAL_I2C_SlaveTxCpltCallback>
}
 800337c:	bf00      	nop
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	fe00e800 	.word	0xfe00e800
 8003388:	ffff0000 	.word	0xffff0000

0800338c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a25      	ldr	r2, [pc, #148]	@ (8003430 <I2C_ITListenCplt+0xa4>)
 800339a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2220      	movs	r2, #32
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d022      	beq.n	8003408 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003400:	f043 0204 	orr.w	r2, r3, #4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003408:	f248 0103 	movw	r1, #32771	@ 0x8003
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 fa21 	bl	8003854 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2210      	movs	r2, #16
 8003418:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fe ff2f 	bl	8002286 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003428:	bf00      	nop
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	ffff0000 	.word	0xffff0000

08003434 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003444:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a6d      	ldr	r2, [pc, #436]	@ (8003608 <I2C_ITError+0x1d4>)
 8003452:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	431a      	orrs	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003466:	7bfb      	ldrb	r3, [r7, #15]
 8003468:	2b28      	cmp	r3, #40	@ 0x28
 800346a:	d005      	beq.n	8003478 <I2C_ITError+0x44>
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	2b29      	cmp	r3, #41	@ 0x29
 8003470:	d002      	beq.n	8003478 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b2a      	cmp	r3, #42	@ 0x2a
 8003476:	d10b      	bne.n	8003490 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003478:	2103      	movs	r1, #3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f9ea 	bl	8003854 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2228      	movs	r2, #40	@ 0x28
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a60      	ldr	r2, [pc, #384]	@ (800360c <I2C_ITError+0x1d8>)
 800348c:	635a      	str	r2, [r3, #52]	@ 0x34
 800348e:	e030      	b.n	80034f2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003490:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f9dd 	bl	8003854 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8e1 	bl	8003662 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b60      	cmp	r3, #96	@ 0x60
 80034aa:	d01f      	beq.n	80034ec <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b20      	cmp	r3, #32
 80034c0:	d114      	bne.n	80034ec <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d109      	bne.n	80034e4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2210      	movs	r2, #16
 80034d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034dc:	f043 0204 	orr.w	r2, r3, #4
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2220      	movs	r2, #32
 80034ea:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d039      	beq.n	8003574 <I2C_ITError+0x140>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b11      	cmp	r3, #17
 8003504:	d002      	beq.n	800350c <I2C_ITError+0xd8>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b21      	cmp	r3, #33	@ 0x21
 800350a:	d133      	bne.n	8003574 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003516:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800351a:	d107      	bne.n	800352c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800352a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003530:	4618      	mov	r0, r3
 8003532:	f7fe f9cf 	bl	80018d4 <HAL_DMA_GetState>
 8003536:	4603      	mov	r3, r0
 8003538:	2b01      	cmp	r3, #1
 800353a:	d017      	beq.n	800356c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	4a33      	ldr	r2, [pc, #204]	@ (8003610 <I2C_ITError+0x1dc>)
 8003542:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003550:	4618      	mov	r0, r3
 8003552:	f7fe f8a9 	bl	80016a8 <HAL_DMA_Abort_IT>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d04d      	beq.n	80035f8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003566:	4610      	mov	r0, r2
 8003568:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800356a:	e045      	b.n	80035f8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f851 	bl	8003614 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003572:	e041      	b.n	80035f8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	2b00      	cmp	r3, #0
 800357a:	d039      	beq.n	80035f0 <I2C_ITError+0x1bc>
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b12      	cmp	r3, #18
 8003580:	d002      	beq.n	8003588 <I2C_ITError+0x154>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b22      	cmp	r3, #34	@ 0x22
 8003586:	d133      	bne.n	80035f0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003596:	d107      	bne.n	80035a8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035a6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe f991 	bl	80018d4 <HAL_DMA_GetState>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d017      	beq.n	80035e8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035bc:	4a14      	ldr	r2, [pc, #80]	@ (8003610 <I2C_ITError+0x1dc>)
 80035be:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7fe f86b 	bl	80016a8 <HAL_DMA_Abort_IT>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d011      	beq.n	80035fc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035e2:	4610      	mov	r0, r2
 80035e4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035e6:	e009      	b.n	80035fc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f813 	bl	8003614 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035ee:	e005      	b.n	80035fc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f80f 	bl	8003614 <I2C_TreatErrorCallback>
  }
}
 80035f6:	e002      	b.n	80035fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035f8:	bf00      	nop
 80035fa:	e000      	b.n	80035fe <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035fc:	bf00      	nop
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	ffff0000 	.word	0xffff0000
 800360c:	08002539 	.word	0x08002539
 8003610:	080036ab 	.word	0x080036ab

08003614 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b60      	cmp	r3, #96	@ 0x60
 8003626:	d10e      	bne.n	8003646 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fe fe49 	bl	80022d6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003644:	e009      	b.n	800365a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7fe fe34 	bl	80022c2 <HAL_I2C_ErrorCallback>
}
 800365a:	bf00      	nop
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b02      	cmp	r3, #2
 8003676:	d103      	bne.n	8003680 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2200      	movs	r2, #0
 800367e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d007      	beq.n	800369e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699a      	ldr	r2, [r3, #24]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	619a      	str	r2, [r3, #24]
  }
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b084      	sub	sp, #16
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c4:	2200      	movs	r2, #0
 80036c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d4:	2200      	movs	r2, #0
 80036d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff ff9b 	bl	8003614 <I2C_TreatErrorCallback>
}
 80036de:	bf00      	nop
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	4613      	mov	r3, r2
 80036f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003700:	7a7b      	ldrb	r3, [r7, #9]
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003708:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	4313      	orrs	r3, r2
 8003712:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003716:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	0d5b      	lsrs	r3, r3, #21
 8003722:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003726:	4b08      	ldr	r3, [pc, #32]	@ (8003748 <I2C_TransferConfig+0x60>)
 8003728:	430b      	orrs	r3, r1
 800372a:	43db      	mvns	r3, r3
 800372c:	ea02 0103 	and.w	r1, r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	03ff63ff 	.word	0x03ff63ff

0800374c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003760:	4a39      	ldr	r2, [pc, #228]	@ (8003848 <I2C_Enable_IRQ+0xfc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d032      	beq.n	80037cc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800376a:	4a38      	ldr	r2, [pc, #224]	@ (800384c <I2C_Enable_IRQ+0x100>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d02d      	beq.n	80037cc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003774:	4a36      	ldr	r2, [pc, #216]	@ (8003850 <I2C_Enable_IRQ+0x104>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d028      	beq.n	80037cc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800377a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800377e:	2b00      	cmp	r3, #0
 8003780:	da03      	bge.n	800378a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003788:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800378a:	887b      	ldrh	r3, [r7, #2]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800379a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800379c:	887b      	ldrh	r3, [r7, #2]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80037ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	2b10      	cmp	r3, #16
 80037b2:	d103      	bne.n	80037bc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80037ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037bc:	887b      	ldrh	r3, [r7, #2]
 80037be:	2b20      	cmp	r3, #32
 80037c0:	d133      	bne.n	800382a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f043 0320 	orr.w	r3, r3, #32
 80037c8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037ca:	e02e      	b.n	800382a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80037cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	da03      	bge.n	80037dc <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80037da:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80037dc:	887b      	ldrh	r3, [r7, #2]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80037ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80037ee:	887b      	ldrh	r3, [r7, #2]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80037fe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	2b10      	cmp	r3, #16
 8003804:	d103      	bne.n	800380e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800380c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	2b20      	cmp	r3, #32
 8003812:	d103      	bne.n	800381c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800381a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800381c:	887b      	ldrh	r3, [r7, #2]
 800381e:	2b40      	cmp	r3, #64	@ 0x40
 8003820:	d103      	bne.n	800382a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003828:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6819      	ldr	r1, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	430a      	orrs	r2, r1
 8003838:	601a      	str	r2, [r3, #0]
}
 800383a:	bf00      	nop
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	0800272b 	.word	0x0800272b
 800384c:	08002b4d 	.word	0x08002b4d
 8003850:	08002901 	.word	0x08002901

08003854 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003864:	887b      	ldrh	r3, [r7, #2]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00f      	beq.n	800388e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003874:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800387c:	b2db      	uxtb	r3, r3
 800387e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003882:	2b28      	cmp	r3, #40	@ 0x28
 8003884:	d003      	beq.n	800388e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800388c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800388e:	887b      	ldrh	r3, [r7, #2]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00f      	beq.n	80038b8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800389e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038ac:	2b28      	cmp	r3, #40	@ 0x28
 80038ae:	d003      	beq.n	80038b8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80038b6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80038b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da03      	bge.n	80038c8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80038c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80038c8:	887b      	ldrh	r3, [r7, #2]
 80038ca:	2b10      	cmp	r3, #16
 80038cc:	d103      	bne.n	80038d6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80038d4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d103      	bne.n	80038e4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f043 0320 	orr.w	r3, r3, #32
 80038e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80038e4:	887b      	ldrh	r3, [r7, #2]
 80038e6:	2b40      	cmp	r3, #64	@ 0x40
 80038e8:	d103      	bne.n	80038f2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	43da      	mvns	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	400a      	ands	r2, r1
 8003902:	601a      	str	r2, [r3, #0]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b20      	cmp	r3, #32
 8003924:	d138      	bne.n	8003998 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003930:	2302      	movs	r3, #2
 8003932:	e032      	b.n	800399a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2224      	movs	r2, #36	@ 0x24
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0201 	bic.w	r2, r2, #1
 8003952:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003962:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6819      	ldr	r1, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	e000      	b.n	800399a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003998:	2302      	movs	r3, #2
  }
}
 800399a:	4618      	mov	r0, r3
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b085      	sub	sp, #20
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d139      	bne.n	8003a30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e033      	b.n	8003a32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2224      	movs	r2, #36	@ 0x24
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 0201 	bic.w	r2, r2, #1
 80039e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0201 	orr.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d141      	bne.n	8003ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a5a:	d131      	bne.n	8003ac0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003a5c:	4b47      	ldr	r3, [pc, #284]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a62:	4a46      	ldr	r2, [pc, #280]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a6c:	4b43      	ldr	r3, [pc, #268]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a74:	4a41      	ldr	r2, [pc, #260]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a7c:	4b40      	ldr	r3, [pc, #256]	@ (8003b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2232      	movs	r2, #50	@ 0x32
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	4a3f      	ldr	r2, [pc, #252]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003a88:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8c:	0c9b      	lsrs	r3, r3, #18
 8003a8e:	3301      	adds	r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a92:	e002      	b.n	8003a9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a9a:	4b38      	ldr	r3, [pc, #224]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa6:	d102      	bne.n	8003aae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d1f2      	bne.n	8003a94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003aae:	4b33      	ldr	r3, [pc, #204]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aba:	d158      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e057      	b.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ac0:	4b2e      	ldr	r3, [pc, #184]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac6:	4a2d      	ldr	r2, [pc, #180]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003acc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ad0:	e04d      	b.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad8:	d141      	bne.n	8003b5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ada:	4b28      	ldr	r3, [pc, #160]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae6:	d131      	bne.n	8003b4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ae8:	4b24      	ldr	r3, [pc, #144]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003aee:	4a23      	ldr	r2, [pc, #140]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003af4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af8:	4b20      	ldr	r3, [pc, #128]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b00:	4a1e      	ldr	r2, [pc, #120]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b08:	4b1d      	ldr	r3, [pc, #116]	@ (8003b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	2232      	movs	r2, #50	@ 0x32
 8003b0e:	fb02 f303 	mul.w	r3, r2, r3
 8003b12:	4a1c      	ldr	r2, [pc, #112]	@ (8003b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	0c9b      	lsrs	r3, r3, #18
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1e:	e002      	b.n	8003b26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b26:	4b15      	ldr	r3, [pc, #84]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b32:	d102      	bne.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f2      	bne.n	8003b20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b3a:	4b10      	ldr	r3, [pc, #64]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b46:	d112      	bne.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e011      	b.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b52:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003b5c:	e007      	b.n	8003b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b5e:	4b07      	ldr	r3, [pc, #28]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b66:	4a05      	ldr	r2, [pc, #20]	@ (8003b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40007000 	.word	0x40007000
 8003b80:	20000000 	.word	0x20000000
 8003b84:	431bde83 	.word	0x431bde83

08003b88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003b8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ba4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	4a04      	ldr	r2, [pc, #16]	@ (8003ba4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b96:	6093      	str	r3, [r2, #8]
}
 8003b98:	bf00      	nop
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40007000 	.word	0x40007000

08003ba8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e2fe      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d075      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bc6:	4b97      	ldr	r3, [pc, #604]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd0:	4b94      	ldr	r3, [pc, #592]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	d102      	bne.n	8003be6 <HAL_RCC_OscConfig+0x3e>
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d002      	beq.n	8003bec <HAL_RCC_OscConfig+0x44>
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d10b      	bne.n	8003c04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bec:	4b8d      	ldr	r3, [pc, #564]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d05b      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x108>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d157      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e2d9      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c0c:	d106      	bne.n	8003c1c <HAL_RCC_OscConfig+0x74>
 8003c0e:	4b85      	ldr	r3, [pc, #532]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a84      	ldr	r2, [pc, #528]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e01d      	b.n	8003c58 <HAL_RCC_OscConfig+0xb0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c24:	d10c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x98>
 8003c26:	4b7f      	ldr	r3, [pc, #508]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c30:	6013      	str	r3, [r2, #0]
 8003c32:	4b7c      	ldr	r3, [pc, #496]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a7b      	ldr	r2, [pc, #492]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCC_OscConfig+0xb0>
 8003c40:	4b78      	ldr	r3, [pc, #480]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a77      	ldr	r2, [pc, #476]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	4b75      	ldr	r3, [pc, #468]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a74      	ldr	r2, [pc, #464]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d013      	beq.n	8003c88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fd fa68 	bl	8001134 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c68:	f7fd fa64 	bl	8001134 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	@ 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e29e      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0xc0>
 8003c86:	e014      	b.n	8003cb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fd fa54 	bl	8001134 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fd fa50 	bl	8001134 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	@ 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e28a      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ca2:	4b60      	ldr	r3, [pc, #384]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0xe8>
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d075      	beq.n	8003daa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cbe:	4b59      	ldr	r3, [pc, #356]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cc8:	4b56      	ldr	r3, [pc, #344]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d102      	bne.n	8003cde <HAL_RCC_OscConfig+0x136>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d002      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x13c>
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d11f      	bne.n	8003d24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_OscConfig+0x154>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e25d      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfc:	4b49      	ldr	r3, [pc, #292]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	4946      	ldr	r1, [pc, #280]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d10:	4b45      	ldr	r3, [pc, #276]	@ (8003e28 <HAL_RCC_OscConfig+0x280>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd f9c1 	bl	800109c <HAL_InitTick>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d043      	beq.n	8003da8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e249      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d023      	beq.n	8003d74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a3c      	ldr	r2, [pc, #240]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fd f9fc 	bl	8001134 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d40:	f7fd f9f8 	bl	8001134 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e232      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d52:	4b34      	ldr	r3, [pc, #208]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5e:	4b31      	ldr	r3, [pc, #196]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	061b      	lsls	r3, r3, #24
 8003d6c:	492d      	ldr	r1, [pc, #180]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	604b      	str	r3, [r1, #4]
 8003d72:	e01a      	b.n	8003daa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d74:	4b2b      	ldr	r3, [pc, #172]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a2a      	ldr	r2, [pc, #168]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fd f9d8 	bl	8001134 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d88:	f7fd f9d4 	bl	8001134 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e20e      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d9a:	4b22      	ldr	r3, [pc, #136]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1e0>
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d041      	beq.n	8003e3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01c      	beq.n	8003df8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbe:	4b19      	ldr	r3, [pc, #100]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc4:	4a17      	ldr	r2, [pc, #92]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	f043 0301 	orr.w	r3, r3, #1
 8003dca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fd f9b1 	bl	8001134 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd6:	f7fd f9ad 	bl	8001134 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e1e7      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de8:	4b0e      	ldr	r3, [pc, #56]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0ef      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x22e>
 8003df6:	e020      	b.n	8003e3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df8:	4b0a      	ldr	r3, [pc, #40]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dfe:	4a09      	ldr	r2, [pc, #36]	@ (8003e24 <HAL_RCC_OscConfig+0x27c>)
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e08:	f7fd f994 	bl	8001134 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e0e:	e00d      	b.n	8003e2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e10:	f7fd f990 	bl	8001134 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d906      	bls.n	8003e2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e1ca      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e2c:	4b8c      	ldr	r3, [pc, #560]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1ea      	bne.n	8003e10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 80a6 	beq.w	8003f94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e4c:	4b84      	ldr	r3, [pc, #528]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_OscConfig+0x2b4>
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e000      	b.n	8003e5e <HAL_RCC_OscConfig+0x2b6>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e62:	4b7f      	ldr	r3, [pc, #508]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e66:	4a7e      	ldr	r2, [pc, #504]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e6e:	4b7c      	ldr	r3, [pc, #496]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7e:	4b79      	ldr	r3, [pc, #484]	@ (8004064 <HAL_RCC_OscConfig+0x4bc>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d118      	bne.n	8003ebc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e8a:	4b76      	ldr	r3, [pc, #472]	@ (8004064 <HAL_RCC_OscConfig+0x4bc>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a75      	ldr	r2, [pc, #468]	@ (8004064 <HAL_RCC_OscConfig+0x4bc>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e96:	f7fd f94d 	bl	8001134 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9e:	f7fd f949 	bl	8001134 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e183      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb0:	4b6c      	ldr	r3, [pc, #432]	@ (8004064 <HAL_RCC_OscConfig+0x4bc>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0f0      	beq.n	8003e9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d108      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x32e>
 8003ec4:	4b66      	ldr	r3, [pc, #408]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	4a65      	ldr	r2, [pc, #404]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ed4:	e024      	b.n	8003f20 <HAL_RCC_OscConfig+0x378>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b05      	cmp	r3, #5
 8003edc:	d110      	bne.n	8003f00 <HAL_RCC_OscConfig+0x358>
 8003ede:	4b60      	ldr	r3, [pc, #384]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee4:	4a5e      	ldr	r2, [pc, #376]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003eee:	4b5c      	ldr	r3, [pc, #368]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef4:	4a5a      	ldr	r2, [pc, #360]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003efe:	e00f      	b.n	8003f20 <HAL_RCC_OscConfig+0x378>
 8003f00:	4b57      	ldr	r3, [pc, #348]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f06:	4a56      	ldr	r2, [pc, #344]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f10:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f16:	4a52      	ldr	r2, [pc, #328]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f18:	f023 0304 	bic.w	r3, r3, #4
 8003f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d016      	beq.n	8003f56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f28:	f7fd f904 	bl	8001134 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fd f900 	bl	8001134 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e138      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f46:	4b46      	ldr	r3, [pc, #280]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0ed      	beq.n	8003f30 <HAL_RCC_OscConfig+0x388>
 8003f54:	e015      	b.n	8003f82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fd f8ed 	bl	8001134 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fd f8e9 	bl	8001134 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e121      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f74:	4b3a      	ldr	r3, [pc, #232]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1ed      	bne.n	8003f5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f82:	7ffb      	ldrb	r3, [r7, #31]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d105      	bne.n	8003f94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f88:	4b35      	ldr	r3, [pc, #212]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8c:	4a34      	ldr	r2, [pc, #208]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f92:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d03c      	beq.n	800401a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01c      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fae:	4a2c      	ldr	r2, [pc, #176]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003fb0:	f043 0301 	orr.w	r3, r3, #1
 8003fb4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fd f8bc 	bl	8001134 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc0:	f7fd f8b8 	bl	8001134 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e0f2      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003fd2:	4b23      	ldr	r3, [pc, #140]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ef      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x418>
 8003fe0:	e01b      	b.n	800401a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff2:	f7fd f89f 	bl	8001134 <HAL_GetTick>
 8003ff6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ffa:	f7fd f89b 	bl	8001134 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e0d5      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800400c:	4b14      	ldr	r3, [pc, #80]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 800400e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ef      	bne.n	8003ffa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f000 80c9 	beq.w	80041b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004024:	4b0e      	ldr	r3, [pc, #56]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b0c      	cmp	r3, #12
 800402e:	f000 8083 	beq.w	8004138 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d15e      	bne.n	80040f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a08      	ldr	r2, [pc, #32]	@ (8004060 <HAL_RCC_OscConfig+0x4b8>)
 8004040:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004046:	f7fd f875 	bl	8001134 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	e00c      	b.n	8004068 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800404e:	f7fd f871 	bl	8001134 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d905      	bls.n	8004068 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0ab      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
 8004060:	40021000 	.word	0x40021000
 8004064:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004068:	4b55      	ldr	r3, [pc, #340]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1ec      	bne.n	800404e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004074:	4b52      	ldr	r3, [pc, #328]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	4b52      	ldr	r3, [pc, #328]	@ (80041c4 <HAL_RCC_OscConfig+0x61c>)
 800407a:	4013      	ands	r3, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6a11      	ldr	r1, [r2, #32]
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004084:	3a01      	subs	r2, #1
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	4311      	orrs	r1, r2
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800408e:	0212      	lsls	r2, r2, #8
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004096:	0852      	lsrs	r2, r2, #1
 8004098:	3a01      	subs	r2, #1
 800409a:	0552      	lsls	r2, r2, #21
 800409c:	4311      	orrs	r1, r2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040a2:	0852      	lsrs	r2, r2, #1
 80040a4:	3a01      	subs	r2, #1
 80040a6:	0652      	lsls	r2, r2, #25
 80040a8:	4311      	orrs	r1, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80040ae:	06d2      	lsls	r2, r2, #27
 80040b0:	430a      	orrs	r2, r1
 80040b2:	4943      	ldr	r1, [pc, #268]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b8:	4b41      	ldr	r3, [pc, #260]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a40      	ldr	r2, [pc, #256]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040c4:	4b3e      	ldr	r3, [pc, #248]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4a3d      	ldr	r2, [pc, #244]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd f830 	bl	8001134 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fd f82c 	bl	8001134 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e066      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ea:	4b35      	ldr	r3, [pc, #212]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x530>
 80040f6:	e05e      	b.n	80041b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f8:	4b31      	ldr	r3, [pc, #196]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a30      	ldr	r2, [pc, #192]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 80040fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd f816 	bl	8001134 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fd f812 	bl	8001134 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e04c      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411e:	4b28      	ldr	r3, [pc, #160]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800412a:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	4924      	ldr	r1, [pc, #144]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 8004130:	4b25      	ldr	r3, [pc, #148]	@ (80041c8 <HAL_RCC_OscConfig+0x620>)
 8004132:	4013      	ands	r3, r2
 8004134:	60cb      	str	r3, [r1, #12]
 8004136:	e03e      	b.n	80041b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e039      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004144:	4b1e      	ldr	r3, [pc, #120]	@ (80041c0 <HAL_RCC_OscConfig+0x618>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 0203 	and.w	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	429a      	cmp	r2, r3
 8004156:	d12c      	bne.n	80041b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	3b01      	subs	r3, #1
 8004164:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d123      	bne.n	80041b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004174:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d11b      	bne.n	80041b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d113      	bne.n	80041b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	3b01      	subs	r3, #1
 8004198:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d109      	bne.n	80041b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	3b01      	subs	r3, #1
 80041ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3720      	adds	r7, #32
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	019f800c 	.word	0x019f800c
 80041c8:	feeefffc 	.word	0xfeeefffc

080041cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80041d6:	2300      	movs	r3, #0
 80041d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e11e      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b91      	ldr	r3, [pc, #580]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d910      	bls.n	8004214 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b8e      	ldr	r3, [pc, #568]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 020f 	bic.w	r2, r3, #15
 80041fa:	498c      	ldr	r1, [pc, #560]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b8a      	ldr	r3, [pc, #552]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e106      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d073      	beq.n	8004308 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d129      	bne.n	800427c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004228:	4b81      	ldr	r3, [pc, #516]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e0f4      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004238:	f000 f99e 	bl	8004578 <RCC_GetSysClockFreqFromPLLSource>
 800423c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	4a7c      	ldr	r2, [pc, #496]	@ (8004434 <HAL_RCC_ClockConfig+0x268>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d93f      	bls.n	80042c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004246:	4b7a      	ldr	r3, [pc, #488]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800425a:	2b00      	cmp	r3, #0
 800425c:	d033      	beq.n	80042c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004262:	2b00      	cmp	r3, #0
 8004264:	d12f      	bne.n	80042c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004266:	4b72      	ldr	r3, [pc, #456]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800426e:	4a70      	ldr	r2, [pc, #448]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004274:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e024      	b.n	80042c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b02      	cmp	r3, #2
 8004282:	d107      	bne.n	8004294 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004284:	4b6a      	ldr	r3, [pc, #424]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0c6      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004294:	4b66      	ldr	r3, [pc, #408]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0be      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80042a4:	f000 f8ce 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	4a61      	ldr	r2, [pc, #388]	@ (8004434 <HAL_RCC_ClockConfig+0x268>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d909      	bls.n	80042c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042b2:	4b5f      	ldr	r3, [pc, #380]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80042bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80042c2:	2380      	movs	r3, #128	@ 0x80
 80042c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042c6:	4b5a      	ldr	r3, [pc, #360]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f023 0203 	bic.w	r2, r3, #3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	4957      	ldr	r1, [pc, #348]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042d8:	f7fc ff2c 	bl	8001134 <HAL_GetTick>
 80042dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042e0:	f7fc ff28 	bl	8001134 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e095      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 020c 	and.w	r2, r3, #12
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	429a      	cmp	r2, r3
 8004306:	d1eb      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d023      	beq.n	800435c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004320:	4b43      	ldr	r3, [pc, #268]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a42      	ldr	r2, [pc, #264]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004326:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800432a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b00      	cmp	r3, #0
 8004336:	d007      	beq.n	8004348 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004338:	4b3d      	ldr	r3, [pc, #244]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004340:	4a3b      	ldr	r2, [pc, #236]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004342:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004346:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b39      	ldr	r3, [pc, #228]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4936      	ldr	r1, [pc, #216]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
 800435a:	e008      	b.n	800436e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2b80      	cmp	r3, #128	@ 0x80
 8004360:	d105      	bne.n	800436e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004362:	4b33      	ldr	r3, [pc, #204]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	4a32      	ldr	r2, [pc, #200]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 8004368:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800436c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800436e:	4b2f      	ldr	r3, [pc, #188]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d21d      	bcs.n	80043b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437c:	4b2b      	ldr	r3, [pc, #172]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f023 020f 	bic.w	r2, r3, #15
 8004384:	4929      	ldr	r1, [pc, #164]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800438c:	f7fc fed2 	bl	8001134 <HAL_GetTick>
 8004390:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004392:	e00a      	b.n	80043aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004394:	f7fc fece 	bl	8001134 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e03b      	b.n	8004422 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043aa:	4b20      	ldr	r3, [pc, #128]	@ (800442c <HAL_RCC_ClockConfig+0x260>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d1ed      	bne.n	8004394 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4917      	ldr	r1, [pc, #92]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043e2:	4b13      	ldr	r3, [pc, #76]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	490f      	ldr	r1, [pc, #60]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043f6:	f000 f825 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 80043fa:	4602      	mov	r2, r0
 80043fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <HAL_RCC_ClockConfig+0x264>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	091b      	lsrs	r3, r3, #4
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	490c      	ldr	r1, [pc, #48]	@ (8004438 <HAL_RCC_ClockConfig+0x26c>)
 8004408:	5ccb      	ldrb	r3, [r1, r3]
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	fa22 f303 	lsr.w	r3, r2, r3
 8004412:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <HAL_RCC_ClockConfig+0x270>)
 8004414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004416:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <HAL_RCC_ClockConfig+0x274>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f7fc fe3e 	bl	800109c <HAL_InitTick>
 8004420:	4603      	mov	r3, r0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	40022000 	.word	0x40022000
 8004430:	40021000 	.word	0x40021000
 8004434:	04c4b400 	.word	0x04c4b400
 8004438:	08006504 	.word	0x08006504
 800443c:	20000000 	.word	0x20000000
 8004440:	20000004 	.word	0x20000004

08004444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800444a:	4b2c      	ldr	r3, [pc, #176]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d102      	bne.n	800445c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004456:	4b2a      	ldr	r3, [pc, #168]	@ (8004500 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004458:	613b      	str	r3, [r7, #16]
 800445a:	e047      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800445c:	4b27      	ldr	r3, [pc, #156]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 030c 	and.w	r3, r3, #12
 8004464:	2b08      	cmp	r3, #8
 8004466:	d102      	bne.n	800446e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004468:	4b26      	ldr	r3, [pc, #152]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800446a:	613b      	str	r3, [r7, #16]
 800446c:	e03e      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800446e:	4b23      	ldr	r3, [pc, #140]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d136      	bne.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800447a:	4b20      	ldr	r3, [pc, #128]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004484:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	3301      	adds	r3, #1
 8004490:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d10c      	bne.n	80044b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004498:	4a1a      	ldr	r2, [pc, #104]	@ (8004504 <HAL_RCC_GetSysClockFreq+0xc0>)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80044a2:	68d2      	ldr	r2, [r2, #12]
 80044a4:	0a12      	lsrs	r2, r2, #8
 80044a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	617b      	str	r3, [r7, #20]
      break;
 80044b0:	e00c      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044b2:	4a13      	ldr	r2, [pc, #76]	@ (8004500 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ba:	4a10      	ldr	r2, [pc, #64]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80044bc:	68d2      	ldr	r2, [r2, #12]
 80044be:	0a12      	lsrs	r2, r2, #8
 80044c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80044c4:	fb02 f303 	mul.w	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
      break;
 80044ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044cc:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	0e5b      	lsrs	r3, r3, #25
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	3301      	adds	r3, #1
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	e001      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80044ec:	693b      	ldr	r3, [r7, #16]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000
 8004500:	00f42400 	.word	0x00f42400
 8004504:	016e3600 	.word	0x016e3600

08004508 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800450c:	4b03      	ldr	r3, [pc, #12]	@ (800451c <HAL_RCC_GetHCLKFreq+0x14>)
 800450e:	681b      	ldr	r3, [r3, #0]
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000000 	.word	0x20000000

08004520 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004524:	f7ff fff0 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004528:	4602      	mov	r2, r0
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <HAL_RCC_GetPCLK1Freq+0x24>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	4904      	ldr	r1, [pc, #16]	@ (8004548 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004536:	5ccb      	ldrb	r3, [r1, r3]
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004540:	4618      	mov	r0, r3
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	08006514 	.word	0x08006514

0800454c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004550:	f7ff ffda 	bl	8004508 <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	0adb      	lsrs	r3, r3, #11
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4904      	ldr	r1, [pc, #16]	@ (8004574 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	08006514 	.word	0x08006514

08004578 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457e:	4b1e      	ldr	r3, [pc, #120]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004588:	4b1b      	ldr	r3, [pc, #108]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3301      	adds	r3, #1
 8004594:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d10c      	bne.n	80045b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800459c:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	4a14      	ldr	r2, [pc, #80]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045a6:	68d2      	ldr	r2, [r2, #12]
 80045a8:	0a12      	lsrs	r2, r2, #8
 80045aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	617b      	str	r3, [r7, #20]
    break;
 80045b4:	e00c      	b.n	80045d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b6:	4a12      	ldr	r2, [pc, #72]	@ (8004600 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	4a0e      	ldr	r2, [pc, #56]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045c0:	68d2      	ldr	r2, [r2, #12]
 80045c2:	0a12      	lsrs	r2, r2, #8
 80045c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80045c8:	fb02 f303 	mul.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
    break;
 80045ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d0:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	0e5b      	lsrs	r3, r3, #25
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	3301      	adds	r3, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045ea:	687b      	ldr	r3, [r7, #4]
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40021000 	.word	0x40021000
 80045fc:	016e3600 	.word	0x016e3600
 8004600:	00f42400 	.word	0x00f42400

08004604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800460c:	2300      	movs	r3, #0
 800460e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004610:	2300      	movs	r3, #0
 8004612:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8098 	beq.w	8004752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004626:	4b43      	ldr	r3, [pc, #268]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10d      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004632:	4b40      	ldr	r3, [pc, #256]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	4a3f      	ldr	r2, [pc, #252]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800463c:	6593      	str	r3, [r2, #88]	@ 0x58
 800463e:	4b3d      	ldr	r3, [pc, #244]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800464a:	2301      	movs	r3, #1
 800464c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800464e:	4b3a      	ldr	r3, [pc, #232]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a39      	ldr	r2, [pc, #228]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004658:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800465a:	f7fc fd6b 	bl	8001134 <HAL_GetTick>
 800465e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004660:	e009      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004662:	f7fc fd67 	bl	8001134 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d902      	bls.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	74fb      	strb	r3, [r7, #19]
        break;
 8004674:	e005      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004676:	4b30      	ldr	r3, [pc, #192]	@ (8004738 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0ef      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d159      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004688:	4b2a      	ldr	r3, [pc, #168]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004692:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d01e      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d019      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046a4:	4b23      	ldr	r3, [pc, #140]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b0:	4b20      	ldr	r3, [pc, #128]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d0:	4a18      	ldr	r2, [pc, #96]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e2:	f7fc fd27 	bl	8001134 <HAL_GetTick>
 80046e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e8:	e00b      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fc fd23 	bl	8001134 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d902      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	74fb      	strb	r3, [r7, #19]
            break;
 8004700:	e006      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004702:	4b0c      	ldr	r3, [pc, #48]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ec      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10b      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004716:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800471c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004724:	4903      	ldr	r1, [pc, #12]	@ (8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800472c:	e008      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	74bb      	strb	r3, [r7, #18]
 8004732:	e005      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004734:	40021000 	.word	0x40021000
 8004738:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004740:	7c7b      	ldrb	r3, [r7, #17]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d105      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004746:	4ba7      	ldr	r3, [pc, #668]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	4aa6      	ldr	r2, [pc, #664]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800474c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004750:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800475e:	4ba1      	ldr	r3, [pc, #644]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004764:	f023 0203 	bic.w	r2, r3, #3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	499d      	ldr	r1, [pc, #628]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004780:	4b98      	ldr	r3, [pc, #608]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004786:	f023 020c 	bic.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	4995      	ldr	r1, [pc, #596]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047a2:	4b90      	ldr	r3, [pc, #576]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	498c      	ldr	r1, [pc, #560]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047c4:	4b87      	ldr	r3, [pc, #540]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	4984      	ldr	r1, [pc, #528]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0310 	and.w	r3, r3, #16
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047e6:	4b7f      	ldr	r3, [pc, #508]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	497b      	ldr	r1, [pc, #492]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00a      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004808:	4b76      	ldr	r3, [pc, #472]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800480e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	4973      	ldr	r1, [pc, #460]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800482a:	4b6e      	ldr	r3, [pc, #440]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004830:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	496a      	ldr	r1, [pc, #424]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800483a:	4313      	orrs	r3, r2
 800483c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00a      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800484c:	4b65      	ldr	r3, [pc, #404]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004852:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	4962      	ldr	r1, [pc, #392]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800486e:	4b5d      	ldr	r3, [pc, #372]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004874:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	4959      	ldr	r1, [pc, #356]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800487e:	4313      	orrs	r3, r2
 8004880:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004890:	4b54      	ldr	r3, [pc, #336]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004892:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004896:	f023 0203 	bic.w	r2, r3, #3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800489e:	4951      	ldr	r1, [pc, #324]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048b2:	4b4c      	ldr	r3, [pc, #304]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	4948      	ldr	r1, [pc, #288]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d015      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048d4:	4b43      	ldr	r3, [pc, #268]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e2:	4940      	ldr	r1, [pc, #256]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048f2:	d105      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f4:	4b3b      	ldr	r3, [pc, #236]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4a3a      	ldr	r2, [pc, #232]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004908:	2b00      	cmp	r3, #0
 800490a:	d015      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800490c:	4b35      	ldr	r3, [pc, #212]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004912:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800491a:	4932      	ldr	r1, [pc, #200]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800492a:	d105      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800492c:	4b2d      	ldr	r3, [pc, #180]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a2c      	ldr	r2, [pc, #176]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004936:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d015      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004944:	4b27      	ldr	r3, [pc, #156]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	4924      	ldr	r1, [pc, #144]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004962:	d105      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004964:	4b1f      	ldr	r3, [pc, #124]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a1e      	ldr	r2, [pc, #120]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800496a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800496e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d015      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800497c:	4b19      	ldr	r3, [pc, #100]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004982:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498a:	4916      	ldr	r1, [pc, #88]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004996:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800499a:	d105      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800499c:	4b11      	ldr	r3, [pc, #68]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a10      	ldr	r2, [pc, #64]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d019      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049b4:	4b0b      	ldr	r3, [pc, #44]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	4908      	ldr	r1, [pc, #32]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049d2:	d109      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d4:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a02      	ldr	r2, [pc, #8]	@ (80049e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049de:	60d3      	str	r3, [r2, #12]
 80049e0:	e002      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80049e2:	bf00      	nop
 80049e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d015      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f4:	4b29      	ldr	r3, [pc, #164]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	4926      	ldr	r1, [pc, #152]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a12:	d105      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a14:	4b21      	ldr	r3, [pc, #132]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4a20      	ldr	r2, [pc, #128]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d015      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3a:	4918      	ldr	r1, [pc, #96]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a4a:	d105      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4a12      	ldr	r2, [pc, #72]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d015      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a64:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a72:	490a      	ldr	r1, [pc, #40]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004a82:	d105      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a84:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a04      	ldr	r2, [pc, #16]	@ (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a90:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3718      	adds	r7, #24
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000

08004aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e042      	b.n	8004b38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d106      	bne.n	8004aca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7fc f95b 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2224      	movs	r2, #36	@ 0x24
 8004ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f001 f848 	bl	8005b80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fd49 	bl	8005588 <UART_SetConfig>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e01b      	b.n	8004b38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f001 f8c7 	bl	8005cc4 <UART_CheckIdleState>
 8004b36:	4603      	mov	r3, r0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	@ 0x28
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d17b      	bne.n	8004c52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_UART_Transmit+0x26>
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e074      	b.n	8004c54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2221      	movs	r2, #33	@ 0x21
 8004b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b7a:	f7fc fadb 	bl	8001134 <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b98:	d108      	bne.n	8004bac <HAL_UART_Transmit+0x6c>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e003      	b.n	8004bb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bb4:	e030      	b.n	8004c18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2180      	movs	r1, #128	@ 0x80
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f001 f929 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e03d      	b.n	8004c54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10b      	bne.n	8004bf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	61bb      	str	r3, [r7, #24]
 8004bf4:	e007      	b.n	8004c06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	3301      	adds	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1c8      	bne.n	8004bb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	2140      	movs	r1, #64	@ 0x40
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f001 f8f2 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d005      	beq.n	8004c46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e006      	b.n	8004c54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	e000      	b.n	8004c54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004c52:	2302      	movs	r3, #2
  }
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3720      	adds	r7, #32
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	@ 0x28
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	603b      	str	r3, [r7, #0]
 8004c68:	4613      	mov	r3, r2
 8004c6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	f040 80b5 	bne.w	8004de2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d002      	beq.n	8004c84 <HAL_UART_Receive+0x28>
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0ad      	b.n	8004de4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2222      	movs	r2, #34	@ 0x22
 8004c94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9e:	f7fc fa49 	bl	8001134 <HAL_GetTick>
 8004ca2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	88fa      	ldrh	r2, [r7, #6]
 8004ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	88fa      	ldrh	r2, [r7, #6]
 8004cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cbc:	d10e      	bne.n	8004cdc <HAL_UART_Receive+0x80>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d105      	bne.n	8004cd2 <HAL_UART_Receive+0x76>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004ccc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cd0:	e02d      	b.n	8004d2e <HAL_UART_Receive+0xd2>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	22ff      	movs	r2, #255	@ 0xff
 8004cd6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cda:	e028      	b.n	8004d2e <HAL_UART_Receive+0xd2>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10d      	bne.n	8004d00 <HAL_UART_Receive+0xa4>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d104      	bne.n	8004cf6 <HAL_UART_Receive+0x9a>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	22ff      	movs	r2, #255	@ 0xff
 8004cf0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cf4:	e01b      	b.n	8004d2e <HAL_UART_Receive+0xd2>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	227f      	movs	r2, #127	@ 0x7f
 8004cfa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004cfe:	e016      	b.n	8004d2e <HAL_UART_Receive+0xd2>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d08:	d10d      	bne.n	8004d26 <HAL_UART_Receive+0xca>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d104      	bne.n	8004d1c <HAL_UART_Receive+0xc0>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	227f      	movs	r2, #127	@ 0x7f
 8004d16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d1a:	e008      	b.n	8004d2e <HAL_UART_Receive+0xd2>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	223f      	movs	r2, #63	@ 0x3f
 8004d20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004d24:	e003      	b.n	8004d2e <HAL_UART_Receive+0xd2>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004d34:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d3e:	d108      	bne.n	8004d52 <HAL_UART_Receive+0xf6>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d104      	bne.n	8004d52 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e003      	b.n	8004d5a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004d5a:	e036      	b.n	8004dca <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2200      	movs	r2, #0
 8004d64:	2120      	movs	r1, #32
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f001 f856 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e032      	b.n	8004de4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10c      	bne.n	8004d9e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	8a7b      	ldrh	r3, [r7, #18]
 8004d8e:	4013      	ands	r3, r2
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	3302      	adds	r3, #2
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e00c      	b.n	8004db8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	8a7b      	ldrh	r3, [r7, #18]
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	4013      	ands	r3, r2
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	3301      	adds	r3, #1
 8004db6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1c2      	bne.n	8004d5c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e000      	b.n	8004de4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004de2:	2302      	movs	r3, #2
  }
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3720      	adds	r7, #32
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	@ 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	4613      	mov	r3, r2
 8004df8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d167      	bne.n	8004ed4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_UART_Transmit_DMA+0x24>
 8004e0a:	88fb      	ldrh	r3, [r7, #6]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e060      	b.n	8004ed6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	88fa      	ldrh	r2, [r7, #6]
 8004e1e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	88fa      	ldrh	r2, [r7, #6]
 8004e26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2221      	movs	r2, #33	@ 0x21
 8004e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d028      	beq.n	8004e94 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e46:	4a26      	ldr	r2, [pc, #152]	@ (8004ee0 <HAL_UART_Transmit_DMA+0xf4>)
 8004e48:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e4e:	4a25      	ldr	r2, [pc, #148]	@ (8004ee4 <HAL_UART_Transmit_DMA+0xf8>)
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e56:	4a24      	ldr	r2, [pc, #144]	@ (8004ee8 <HAL_UART_Transmit_DMA+0xfc>)
 8004e58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e5e:	2200      	movs	r2, #0
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	3328      	adds	r3, #40	@ 0x28
 8004e72:	461a      	mov	r2, r3
 8004e74:	88fb      	ldrh	r3, [r7, #6]
 8004e76:	f7fc fb43 	bl	8001500 <HAL_DMA_Start_IT>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d009      	beq.n	8004e94 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2210      	movs	r2, #16
 8004e84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e020      	b.n	8004ed6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2240      	movs	r2, #64	@ 0x40
 8004e9a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ebc:	623a      	str	r2, [r7, #32]
 8004ebe:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	69f9      	ldr	r1, [r7, #28]
 8004ec2:	6a3a      	ldr	r2, [r7, #32]
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e5      	bne.n	8004e9c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e000      	b.n	8004ed6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
  }
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3728      	adds	r7, #40	@ 0x28
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	08006041 	.word	0x08006041
 8004ee4:	080060db 	.word	0x080060db
 8004ee8:	080060f7 	.word	0x080060f7

08004eec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b0ba      	sub	sp, #232	@ 0xe8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d11b      	bne.n	8004f60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2c:	f003 0320 	and.w	r3, r3, #32
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d015      	beq.n	8004f60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d009      	beq.n	8004f60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 82e3 	beq.w	800551c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
      }
      return;
 8004f5e:	e2dd      	b.n	800551c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8123 	beq.w	80051b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004f6e:	4b8d      	ldr	r3, [pc, #564]	@ (80051a4 <HAL_UART_IRQHandler+0x2b8>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004f7a:	4b8b      	ldr	r3, [pc, #556]	@ (80051a8 <HAL_UART_IRQHandler+0x2bc>)
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8116 	beq.w	80051b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d011      	beq.n	8004fb4 <HAL_UART_IRQHandler+0xc8>
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00b      	beq.n	8004fb4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004faa:	f043 0201 	orr.w	r2, r3, #1
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d011      	beq.n	8004fe4 <HAL_UART_IRQHandler+0xf8>
 8004fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00b      	beq.n	8004fe4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fda:	f043 0204 	orr.w	r2, r3, #4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d011      	beq.n	8005014 <HAL_UART_IRQHandler+0x128>
 8004ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2204      	movs	r2, #4
 8005002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500a:	f043 0202 	orr.w	r2, r3, #2
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d017      	beq.n	8005050 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d105      	bne.n	8005038 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800502c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005030:	4b5c      	ldr	r3, [pc, #368]	@ (80051a4 <HAL_UART_IRQHandler+0x2b8>)
 8005032:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00b      	beq.n	8005050 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2208      	movs	r2, #8
 800503e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005046:	f043 0208 	orr.w	r2, r3, #8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005054:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005058:	2b00      	cmp	r3, #0
 800505a:	d012      	beq.n	8005082 <HAL_UART_IRQHandler+0x196>
 800505c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005060:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00c      	beq.n	8005082 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005070:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005078:	f043 0220 	orr.w	r2, r3, #32
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8249 	beq.w	8005520 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800508e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d013      	beq.n	80050c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800509a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d105      	bne.n	80050b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d6:	2b40      	cmp	r3, #64	@ 0x40
 80050d8:	d005      	beq.n	80050e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80050de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d054      	beq.n	8005190 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 ff44 	bl	8005f74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f6:	2b40      	cmp	r3, #64	@ 0x40
 80050f8:	d146      	bne.n	8005188 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3308      	adds	r3, #8
 8005100:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005104:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005108:	e853 3f00 	ldrex	r3, [r3]
 800510c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005110:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005114:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005118:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3308      	adds	r3, #8
 8005122:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005126:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800512a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005132:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800513e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1d9      	bne.n	80050fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800514c:	2b00      	cmp	r3, #0
 800514e:	d017      	beq.n	8005180 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005156:	4a15      	ldr	r2, [pc, #84]	@ (80051ac <HAL_UART_IRQHandler+0x2c0>)
 8005158:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005160:	4618      	mov	r0, r3
 8005162:	f7fc faa1 	bl	80016a8 <HAL_DMA_Abort_IT>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d019      	beq.n	80051a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800517a:	4610      	mov	r0, r2
 800517c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517e:	e00f      	b.n	80051a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f9eb 	bl	800555c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005186:	e00b      	b.n	80051a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f9e7 	bl	800555c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800518e:	e007      	b.n	80051a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f9e3 	bl	800555c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800519e:	e1bf      	b.n	8005520 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051a0:	bf00      	nop
    return;
 80051a2:	e1bd      	b.n	8005520 <HAL_UART_IRQHandler+0x634>
 80051a4:	10000001 	.word	0x10000001
 80051a8:	04000120 	.word	0x04000120
 80051ac:	08006177 	.word	0x08006177

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	f040 8153 	bne.w	8005460 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 814c 	beq.w	8005460 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 8145 	beq.w	8005460 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2210      	movs	r2, #16
 80051dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051e8:	2b40      	cmp	r3, #64	@ 0x40
 80051ea:	f040 80bb 	bne.w	8005364 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80051fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 818f 	beq.w	8005524 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800520c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005210:	429a      	cmp	r2, r3
 8005212:	f080 8187 	bcs.w	8005524 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800521c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	f040 8087 	bne.w	8005342 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005248:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800524c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005250:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800525e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005262:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800526a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005276:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1da      	bne.n	8005234 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800528e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3308      	adds	r3, #8
 800529e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e1      	bne.n	800527e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3308      	adds	r3, #8
 80052c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80052ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3308      	adds	r3, #8
 80052da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80052de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80052e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80052e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80052ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e3      	bne.n	80052ba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800530e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005310:	f023 0310 	bic.w	r3, r3, #16
 8005314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005322:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005324:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005328:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e4      	bne.n	8005300 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800533c:	4618      	mov	r0, r3
 800533e:	f7fc f95a 	bl	80015f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005354:	b29b      	uxth	r3, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	b29b      	uxth	r3, r3
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f907 	bl	8005570 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005362:	e0df      	b.n	8005524 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005370:	b29b      	uxth	r3, r3
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80d1 	beq.w	8005528 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005386:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80cc 	beq.w	8005528 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800539e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80053b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e4      	bne.n	8005390 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3308      	adds	r3, #8
 80053cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	623b      	str	r3, [r7, #32]
   return(result);
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3308      	adds	r3, #8
 80053ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80053ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80053f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f6:	e841 2300 	strex	r3, r2, [r1]
 80053fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1e1      	bne.n	80053c6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	60fb      	str	r3, [r7, #12]
   return(result);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0310 	bic.w	r3, r3, #16
 800542a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005438:	61fb      	str	r3, [r7, #28]
 800543a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	69b9      	ldr	r1, [r7, #24]
 800543e:	69fa      	ldr	r2, [r7, #28]
 8005440:	e841 2300 	strex	r3, r2, [r1]
 8005444:	617b      	str	r3, [r7, #20]
   return(result);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e4      	bne.n	8005416 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005452:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005456:	4619      	mov	r1, r3
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f889 	bl	8005570 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800545e:	e063      	b.n	8005528 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005464:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00e      	beq.n	800548a <HAL_UART_IRQHandler+0x59e>
 800546c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005470:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005480:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 feb8 	bl	80061f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005488:	e051      	b.n	800552e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800548a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	d014      	beq.n	80054c0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800549a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d105      	bne.n	80054ae <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80054a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d008      	beq.n	80054c0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d03a      	beq.n	800552c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
    }
    return;
 80054be:	e035      	b.n	800552c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80054c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d009      	beq.n	80054e0 <HAL_UART_IRQHandler+0x5f4>
 80054cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fe62 	bl	80061a2 <UART_EndTransmit_IT>
    return;
 80054de:	e026      	b.n	800552e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80054e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d009      	beq.n	8005500 <HAL_UART_IRQHandler+0x614>
 80054ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fe91 	bl	8006220 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054fe:	e016      	b.n	800552e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005504:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d010      	beq.n	800552e <HAL_UART_IRQHandler+0x642>
 800550c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005510:	2b00      	cmp	r3, #0
 8005512:	da0c      	bge.n	800552e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fe79 	bl	800620c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800551a:	e008      	b.n	800552e <HAL_UART_IRQHandler+0x642>
      return;
 800551c:	bf00      	nop
 800551e:	e006      	b.n	800552e <HAL_UART_IRQHandler+0x642>
    return;
 8005520:	bf00      	nop
 8005522:	e004      	b.n	800552e <HAL_UART_IRQHandler+0x642>
      return;
 8005524:	bf00      	nop
 8005526:	e002      	b.n	800552e <HAL_UART_IRQHandler+0x642>
      return;
 8005528:	bf00      	nop
 800552a:	e000      	b.n	800552e <HAL_UART_IRQHandler+0x642>
    return;
 800552c:	bf00      	nop
  }
}
 800552e:	37e8      	adds	r7, #232	@ 0xe8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800558c:	b08c      	sub	sp, #48	@ 0x30
 800558e:	af00      	add	r7, sp, #0
 8005590:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	431a      	orrs	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	431a      	orrs	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4baa      	ldr	r3, [pc, #680]	@ (8005860 <UART_SetConfig+0x2d8>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055c0:	430b      	orrs	r3, r1
 80055c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a9f      	ldr	r2, [pc, #636]	@ (8005864 <UART_SetConfig+0x2dc>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d004      	beq.n	80055f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055f0:	4313      	orrs	r3, r2
 80055f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80055fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005602:	697a      	ldr	r2, [r7, #20]
 8005604:	6812      	ldr	r2, [r2, #0]
 8005606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005608:	430b      	orrs	r3, r1
 800560a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	f023 010f 	bic.w	r1, r3, #15
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a90      	ldr	r2, [pc, #576]	@ (8005868 <UART_SetConfig+0x2e0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d125      	bne.n	8005678 <UART_SetConfig+0xf0>
 800562c:	4b8f      	ldr	r3, [pc, #572]	@ (800586c <UART_SetConfig+0x2e4>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	2b03      	cmp	r3, #3
 8005638:	d81a      	bhi.n	8005670 <UART_SetConfig+0xe8>
 800563a:	a201      	add	r2, pc, #4	@ (adr r2, 8005640 <UART_SetConfig+0xb8>)
 800563c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005640:	08005651 	.word	0x08005651
 8005644:	08005661 	.word	0x08005661
 8005648:	08005659 	.word	0x08005659
 800564c:	08005669 	.word	0x08005669
 8005650:	2301      	movs	r3, #1
 8005652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005656:	e116      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005658:	2302      	movs	r3, #2
 800565a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800565e:	e112      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005660:	2304      	movs	r3, #4
 8005662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005666:	e10e      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005668:	2308      	movs	r3, #8
 800566a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800566e:	e10a      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005670:	2310      	movs	r3, #16
 8005672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005676:	e106      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a7c      	ldr	r2, [pc, #496]	@ (8005870 <UART_SetConfig+0x2e8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d138      	bne.n	80056f4 <UART_SetConfig+0x16c>
 8005682:	4b7a      	ldr	r3, [pc, #488]	@ (800586c <UART_SetConfig+0x2e4>)
 8005684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005688:	f003 030c 	and.w	r3, r3, #12
 800568c:	2b0c      	cmp	r3, #12
 800568e:	d82d      	bhi.n	80056ec <UART_SetConfig+0x164>
 8005690:	a201      	add	r2, pc, #4	@ (adr r2, 8005698 <UART_SetConfig+0x110>)
 8005692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005696:	bf00      	nop
 8005698:	080056cd 	.word	0x080056cd
 800569c:	080056ed 	.word	0x080056ed
 80056a0:	080056ed 	.word	0x080056ed
 80056a4:	080056ed 	.word	0x080056ed
 80056a8:	080056dd 	.word	0x080056dd
 80056ac:	080056ed 	.word	0x080056ed
 80056b0:	080056ed 	.word	0x080056ed
 80056b4:	080056ed 	.word	0x080056ed
 80056b8:	080056d5 	.word	0x080056d5
 80056bc:	080056ed 	.word	0x080056ed
 80056c0:	080056ed 	.word	0x080056ed
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	080056e5 	.word	0x080056e5
 80056cc:	2300      	movs	r3, #0
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056d2:	e0d8      	b.n	8005886 <UART_SetConfig+0x2fe>
 80056d4:	2302      	movs	r3, #2
 80056d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056da:	e0d4      	b.n	8005886 <UART_SetConfig+0x2fe>
 80056dc:	2304      	movs	r3, #4
 80056de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e2:	e0d0      	b.n	8005886 <UART_SetConfig+0x2fe>
 80056e4:	2308      	movs	r3, #8
 80056e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ea:	e0cc      	b.n	8005886 <UART_SetConfig+0x2fe>
 80056ec:	2310      	movs	r3, #16
 80056ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f2:	e0c8      	b.n	8005886 <UART_SetConfig+0x2fe>
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a5e      	ldr	r2, [pc, #376]	@ (8005874 <UART_SetConfig+0x2ec>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d125      	bne.n	800574a <UART_SetConfig+0x1c2>
 80056fe:	4b5b      	ldr	r3, [pc, #364]	@ (800586c <UART_SetConfig+0x2e4>)
 8005700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005704:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005708:	2b30      	cmp	r3, #48	@ 0x30
 800570a:	d016      	beq.n	800573a <UART_SetConfig+0x1b2>
 800570c:	2b30      	cmp	r3, #48	@ 0x30
 800570e:	d818      	bhi.n	8005742 <UART_SetConfig+0x1ba>
 8005710:	2b20      	cmp	r3, #32
 8005712:	d00a      	beq.n	800572a <UART_SetConfig+0x1a2>
 8005714:	2b20      	cmp	r3, #32
 8005716:	d814      	bhi.n	8005742 <UART_SetConfig+0x1ba>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <UART_SetConfig+0x19a>
 800571c:	2b10      	cmp	r3, #16
 800571e:	d008      	beq.n	8005732 <UART_SetConfig+0x1aa>
 8005720:	e00f      	b.n	8005742 <UART_SetConfig+0x1ba>
 8005722:	2300      	movs	r3, #0
 8005724:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005728:	e0ad      	b.n	8005886 <UART_SetConfig+0x2fe>
 800572a:	2302      	movs	r3, #2
 800572c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005730:	e0a9      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005732:	2304      	movs	r3, #4
 8005734:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005738:	e0a5      	b.n	8005886 <UART_SetConfig+0x2fe>
 800573a:	2308      	movs	r3, #8
 800573c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005740:	e0a1      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005742:	2310      	movs	r3, #16
 8005744:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005748:	e09d      	b.n	8005886 <UART_SetConfig+0x2fe>
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a4a      	ldr	r2, [pc, #296]	@ (8005878 <UART_SetConfig+0x2f0>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d125      	bne.n	80057a0 <UART_SetConfig+0x218>
 8005754:	4b45      	ldr	r3, [pc, #276]	@ (800586c <UART_SetConfig+0x2e4>)
 8005756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800575a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800575e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005760:	d016      	beq.n	8005790 <UART_SetConfig+0x208>
 8005762:	2bc0      	cmp	r3, #192	@ 0xc0
 8005764:	d818      	bhi.n	8005798 <UART_SetConfig+0x210>
 8005766:	2b80      	cmp	r3, #128	@ 0x80
 8005768:	d00a      	beq.n	8005780 <UART_SetConfig+0x1f8>
 800576a:	2b80      	cmp	r3, #128	@ 0x80
 800576c:	d814      	bhi.n	8005798 <UART_SetConfig+0x210>
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <UART_SetConfig+0x1f0>
 8005772:	2b40      	cmp	r3, #64	@ 0x40
 8005774:	d008      	beq.n	8005788 <UART_SetConfig+0x200>
 8005776:	e00f      	b.n	8005798 <UART_SetConfig+0x210>
 8005778:	2300      	movs	r3, #0
 800577a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800577e:	e082      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005780:	2302      	movs	r3, #2
 8005782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005786:	e07e      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005788:	2304      	movs	r3, #4
 800578a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800578e:	e07a      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005790:	2308      	movs	r3, #8
 8005792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005796:	e076      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005798:	2310      	movs	r3, #16
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800579e:	e072      	b.n	8005886 <UART_SetConfig+0x2fe>
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a35      	ldr	r2, [pc, #212]	@ (800587c <UART_SetConfig+0x2f4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d12a      	bne.n	8005800 <UART_SetConfig+0x278>
 80057aa:	4b30      	ldr	r3, [pc, #192]	@ (800586c <UART_SetConfig+0x2e4>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057b8:	d01a      	beq.n	80057f0 <UART_SetConfig+0x268>
 80057ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057be:	d81b      	bhi.n	80057f8 <UART_SetConfig+0x270>
 80057c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057c4:	d00c      	beq.n	80057e0 <UART_SetConfig+0x258>
 80057c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057ca:	d815      	bhi.n	80057f8 <UART_SetConfig+0x270>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <UART_SetConfig+0x250>
 80057d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d4:	d008      	beq.n	80057e8 <UART_SetConfig+0x260>
 80057d6:	e00f      	b.n	80057f8 <UART_SetConfig+0x270>
 80057d8:	2300      	movs	r3, #0
 80057da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057de:	e052      	b.n	8005886 <UART_SetConfig+0x2fe>
 80057e0:	2302      	movs	r3, #2
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057e6:	e04e      	b.n	8005886 <UART_SetConfig+0x2fe>
 80057e8:	2304      	movs	r3, #4
 80057ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ee:	e04a      	b.n	8005886 <UART_SetConfig+0x2fe>
 80057f0:	2308      	movs	r3, #8
 80057f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f6:	e046      	b.n	8005886 <UART_SetConfig+0x2fe>
 80057f8:	2310      	movs	r3, #16
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fe:	e042      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a17      	ldr	r2, [pc, #92]	@ (8005864 <UART_SetConfig+0x2dc>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d13a      	bne.n	8005880 <UART_SetConfig+0x2f8>
 800580a:	4b18      	ldr	r3, [pc, #96]	@ (800586c <UART_SetConfig+0x2e4>)
 800580c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005810:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005814:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005818:	d01a      	beq.n	8005850 <UART_SetConfig+0x2c8>
 800581a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800581e:	d81b      	bhi.n	8005858 <UART_SetConfig+0x2d0>
 8005820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005824:	d00c      	beq.n	8005840 <UART_SetConfig+0x2b8>
 8005826:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800582a:	d815      	bhi.n	8005858 <UART_SetConfig+0x2d0>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d003      	beq.n	8005838 <UART_SetConfig+0x2b0>
 8005830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005834:	d008      	beq.n	8005848 <UART_SetConfig+0x2c0>
 8005836:	e00f      	b.n	8005858 <UART_SetConfig+0x2d0>
 8005838:	2300      	movs	r3, #0
 800583a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800583e:	e022      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005840:	2302      	movs	r3, #2
 8005842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005846:	e01e      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005848:	2304      	movs	r3, #4
 800584a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584e:	e01a      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005856:	e016      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005858:	2310      	movs	r3, #16
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585e:	e012      	b.n	8005886 <UART_SetConfig+0x2fe>
 8005860:	cfff69f3 	.word	0xcfff69f3
 8005864:	40008000 	.word	0x40008000
 8005868:	40013800 	.word	0x40013800
 800586c:	40021000 	.word	0x40021000
 8005870:	40004400 	.word	0x40004400
 8005874:	40004800 	.word	0x40004800
 8005878:	40004c00 	.word	0x40004c00
 800587c:	40005000 	.word	0x40005000
 8005880:	2310      	movs	r3, #16
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4aae      	ldr	r2, [pc, #696]	@ (8005b44 <UART_SetConfig+0x5bc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	f040 8097 	bne.w	80059c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005892:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005896:	2b08      	cmp	r3, #8
 8005898:	d823      	bhi.n	80058e2 <UART_SetConfig+0x35a>
 800589a:	a201      	add	r2, pc, #4	@ (adr r2, 80058a0 <UART_SetConfig+0x318>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058c5 	.word	0x080058c5
 80058a4:	080058e3 	.word	0x080058e3
 80058a8:	080058cd 	.word	0x080058cd
 80058ac:	080058e3 	.word	0x080058e3
 80058b0:	080058d3 	.word	0x080058d3
 80058b4:	080058e3 	.word	0x080058e3
 80058b8:	080058e3 	.word	0x080058e3
 80058bc:	080058e3 	.word	0x080058e3
 80058c0:	080058db 	.word	0x080058db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058c4:	f7fe fe2c 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058ca:	e010      	b.n	80058ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058cc:	4b9e      	ldr	r3, [pc, #632]	@ (8005b48 <UART_SetConfig+0x5c0>)
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058d0:	e00d      	b.n	80058ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058d2:	f7fe fdb7 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 80058d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80058d8:	e009      	b.n	80058ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80058e0:	e005      	b.n	80058ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80058ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 8130 	beq.w	8005b56 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fa:	4a94      	ldr	r2, [pc, #592]	@ (8005b4c <UART_SetConfig+0x5c4>)
 80058fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005900:	461a      	mov	r2, r3
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005904:	fbb3 f3f2 	udiv	r3, r3, r2
 8005908:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	4413      	add	r3, r2
 8005914:	69ba      	ldr	r2, [r7, #24]
 8005916:	429a      	cmp	r2, r3
 8005918:	d305      	bcc.n	8005926 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	429a      	cmp	r2, r3
 8005924:	d903      	bls.n	800592e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800592c:	e113      	b.n	8005b56 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	2200      	movs	r2, #0
 8005932:	60bb      	str	r3, [r7, #8]
 8005934:	60fa      	str	r2, [r7, #12]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593a:	4a84      	ldr	r2, [pc, #528]	@ (8005b4c <UART_SetConfig+0x5c4>)
 800593c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005940:	b29b      	uxth	r3, r3
 8005942:	2200      	movs	r2, #0
 8005944:	603b      	str	r3, [r7, #0]
 8005946:	607a      	str	r2, [r7, #4]
 8005948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800594c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005950:	f7fa fc62 	bl	8000218 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4610      	mov	r0, r2
 800595a:	4619      	mov	r1, r3
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	020b      	lsls	r3, r1, #8
 8005966:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800596a:	0202      	lsls	r2, r0, #8
 800596c:	6979      	ldr	r1, [r7, #20]
 800596e:	6849      	ldr	r1, [r1, #4]
 8005970:	0849      	lsrs	r1, r1, #1
 8005972:	2000      	movs	r0, #0
 8005974:	460c      	mov	r4, r1
 8005976:	4605      	mov	r5, r0
 8005978:	eb12 0804 	adds.w	r8, r2, r4
 800597c:	eb43 0905 	adc.w	r9, r3, r5
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	469a      	mov	sl, r3
 8005988:	4693      	mov	fp, r2
 800598a:	4652      	mov	r2, sl
 800598c:	465b      	mov	r3, fp
 800598e:	4640      	mov	r0, r8
 8005990:	4649      	mov	r1, r9
 8005992:	f7fa fc41 	bl	8000218 <__aeabi_uldivmod>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4613      	mov	r3, r2
 800599c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059a4:	d308      	bcc.n	80059b8 <UART_SetConfig+0x430>
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ac:	d204      	bcs.n	80059b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	60da      	str	r2, [r3, #12]
 80059b6:	e0ce      	b.n	8005b56 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059be:	e0ca      	b.n	8005b56 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059c8:	d166      	bne.n	8005a98 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80059ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d827      	bhi.n	8005a22 <UART_SetConfig+0x49a>
 80059d2:	a201      	add	r2, pc, #4	@ (adr r2, 80059d8 <UART_SetConfig+0x450>)
 80059d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a0d 	.word	0x08005a0d
 80059e4:	08005a23 	.word	0x08005a23
 80059e8:	08005a13 	.word	0x08005a13
 80059ec:	08005a23 	.word	0x08005a23
 80059f0:	08005a23 	.word	0x08005a23
 80059f4:	08005a23 	.word	0x08005a23
 80059f8:	08005a1b 	.word	0x08005a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059fc:	f7fe fd90 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8005a00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a02:	e014      	b.n	8005a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a04:	f7fe fda2 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8005a08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a0a:	e010      	b.n	8005a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a0c:	4b4e      	ldr	r3, [pc, #312]	@ (8005b48 <UART_SetConfig+0x5c0>)
 8005a0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a10:	e00d      	b.n	8005a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a12:	f7fe fd17 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8005a16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a18:	e009      	b.n	8005a2e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a20:	e005      	b.n	8005a2e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005a2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8090 	beq.w	8005b56 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	4a44      	ldr	r2, [pc, #272]	@ (8005b4c <UART_SetConfig+0x5c4>)
 8005a3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a40:	461a      	mov	r2, r3
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a48:	005a      	lsls	r2, r3, #1
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	085b      	lsrs	r3, r3, #1
 8005a50:	441a      	add	r2, r3
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	2b0f      	cmp	r3, #15
 8005a60:	d916      	bls.n	8005a90 <UART_SetConfig+0x508>
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a68:	d212      	bcs.n	8005a90 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f023 030f 	bic.w	r3, r3, #15
 8005a72:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	f003 0307 	and.w	r3, r3, #7
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	8bfb      	ldrh	r3, [r7, #30]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	8bfa      	ldrh	r2, [r7, #30]
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	e062      	b.n	8005b56 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a96:	e05e      	b.n	8005b56 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a98:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d828      	bhi.n	8005af2 <UART_SetConfig+0x56a>
 8005aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa8 <UART_SetConfig+0x520>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005acd 	.word	0x08005acd
 8005aac:	08005ad5 	.word	0x08005ad5
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005af3 	.word	0x08005af3
 8005ab8:	08005ae3 	.word	0x08005ae3
 8005abc:	08005af3 	.word	0x08005af3
 8005ac0:	08005af3 	.word	0x08005af3
 8005ac4:	08005af3 	.word	0x08005af3
 8005ac8:	08005aeb 	.word	0x08005aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005acc:	f7fe fd28 	bl	8004520 <HAL_RCC_GetPCLK1Freq>
 8005ad0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ad2:	e014      	b.n	8005afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad4:	f7fe fd3a 	bl	800454c <HAL_RCC_GetPCLK2Freq>
 8005ad8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ada:	e010      	b.n	8005afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005adc:	4b1a      	ldr	r3, [pc, #104]	@ (8005b48 <UART_SetConfig+0x5c0>)
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005ae0:	e00d      	b.n	8005afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ae2:	f7fe fcaf 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8005ae6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ae8:	e009      	b.n	8005afe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005af0:	e005      	b.n	8005afe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005afc:	bf00      	nop
    }

    if (pclk != 0U)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d028      	beq.n	8005b56 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b08:	4a10      	ldr	r2, [pc, #64]	@ (8005b4c <UART_SetConfig+0x5c4>)
 8005b0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	441a      	add	r2, r3
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	2b0f      	cmp	r3, #15
 8005b2c:	d910      	bls.n	8005b50 <UART_SetConfig+0x5c8>
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b34:	d20c      	bcs.n	8005b50 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60da      	str	r2, [r3, #12]
 8005b40:	e009      	b.n	8005b56 <UART_SetConfig+0x5ce>
 8005b42:	bf00      	nop
 8005b44:	40008000 	.word	0x40008000
 8005b48:	00f42400 	.word	0x00f42400
 8005b4c:	0800651c 	.word	0x0800651c
      }
      else
      {
        ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005b72:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3730      	adds	r7, #48	@ 0x30
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005b80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	f003 0302 	and.w	r3, r3, #2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	430a      	orrs	r2, r1
 8005bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	f003 0304 	and.w	r3, r3, #4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00a      	beq.n	8005c32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c36:	f003 0320 	and.w	r3, r3, #32
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00a      	beq.n	8005c54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	430a      	orrs	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01a      	beq.n	8005c96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c7e:	d10a      	bne.n	8005c96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b098      	sub	sp, #96	@ 0x60
 8005cc8:	af02      	add	r7, sp, #8
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005cd4:	f7fb fa2e 	bl	8001134 <HAL_GetTick>
 8005cd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0308 	and.w	r3, r3, #8
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d12f      	bne.n	8005d48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ce8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f88e 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d022      	beq.n	8005d48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0a:	e853 3f00 	ldrex	r3, [r3]
 8005d0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d16:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d28:	e841 2300 	strex	r3, r2, [r1]
 8005d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d1e6      	bne.n	8005d02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e063      	b.n	8005e10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b04      	cmp	r3, #4
 8005d54:	d149      	bne.n	8005dea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f857 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d03c      	beq.n	8005dea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1e6      	bne.n	8005d70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	3308      	adds	r3, #8
 8005da8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	e853 3f00 	ldrex	r3, [r3]
 8005db0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f023 0301 	bic.w	r3, r3, #1
 8005db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dc2:	61fa      	str	r2, [r7, #28]
 8005dc4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	69b9      	ldr	r1, [r7, #24]
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e5      	bne.n	8005da2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e012      	b.n	8005e10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3758      	adds	r7, #88	@ 0x58
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e28:	e04f      	b.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d04b      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e32:	f7fb f97f 	bl	8001134 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d302      	bcc.n	8005e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e04e      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d037      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	2b80      	cmp	r3, #128	@ 0x80
 8005e5e:	d034      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2b40      	cmp	r3, #64	@ 0x40
 8005e64:	d031      	beq.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d110      	bne.n	8005e96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f879 	bl	8005f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2208      	movs	r2, #8
 8005e86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e029      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	69db      	ldr	r3, [r3, #28]
 8005e9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ea0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea4:	d111      	bne.n	8005eca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005eae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 f85f 	bl	8005f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e00f      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	bf0c      	ite	eq
 8005eda:	2301      	moveq	r3, #1
 8005edc:	2300      	movne	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	79fb      	ldrb	r3, [r7, #7]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d0a0      	beq.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b08f      	sub	sp, #60	@ 0x3c
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005f0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	461a      	mov	r2, r3
 8005f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f1a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f20:	e841 2300 	strex	r3, r2, [r1]
 8005f24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d1e6      	bne.n	8005efa <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3308      	adds	r3, #8
 8005f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005f42:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3308      	adds	r3, #8
 8005f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4c:	61ba      	str	r2, [r7, #24]
 8005f4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	6979      	ldr	r1, [r7, #20]
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	613b      	str	r3, [r7, #16]
   return(result);
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e5      	bne.n	8005f2c <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005f68:	bf00      	nop
 8005f6a:	373c      	adds	r7, #60	@ 0x3c
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b095      	sub	sp, #84	@ 0x54
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1e6      	bne.n	8005f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	e853 3f00 	ldrex	r3, [r3]
 8005fbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3308      	adds	r3, #8
 8005fd0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e3      	bne.n	8005fae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d118      	bne.n	8006020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f023 0310 	bic.w	r3, r3, #16
 8006002:	647b      	str	r3, [r7, #68]	@ 0x44
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	461a      	mov	r2, r3
 800600a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	6979      	ldr	r1, [r7, #20]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	613b      	str	r3, [r7, #16]
   return(result);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e6      	bne.n	8005fee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006034:	bf00      	nop
 8006036:	3754      	adds	r7, #84	@ 0x54
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b090      	sub	sp, #64	@ 0x40
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b00      	cmp	r3, #0
 800605a:	d137      	bne.n	80060cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800605c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605e:	2200      	movs	r2, #0
 8006060:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	e853 3f00 	ldrex	r3, [r3]
 8006072:	623b      	str	r3, [r7, #32]
   return(result);
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800607a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800607c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3308      	adds	r3, #8
 8006082:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006084:	633a      	str	r2, [r7, #48]	@ 0x30
 8006086:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800608a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e5      	bne.n	8006064 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80060ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ba:	69b9      	ldr	r1, [r7, #24]
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	e841 2300 	strex	r3, r2, [r1]
 80060c2:	617b      	str	r3, [r7, #20]
   return(result);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1e6      	bne.n	8006098 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80060ca:	e002      	b.n	80060d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80060cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80060ce:	f7ff fa31 	bl	8005534 <HAL_UART_TxCpltCallback>
}
 80060d2:	bf00      	nop
 80060d4:	3740      	adds	r7, #64	@ 0x40
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b084      	sub	sp, #16
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7ff fa2d 	bl	8005548 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006102:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006112:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800611e:	2b80      	cmp	r3, #128	@ 0x80
 8006120:	d109      	bne.n	8006136 <UART_DMAError+0x40>
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b21      	cmp	r3, #33	@ 0x21
 8006126:	d106      	bne.n	8006136 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2200      	movs	r2, #0
 800612c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006130:	6978      	ldr	r0, [r7, #20]
 8006132:	f7ff fede 	bl	8005ef2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006140:	2b40      	cmp	r3, #64	@ 0x40
 8006142:	d109      	bne.n	8006158 <UART_DMAError+0x62>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b22      	cmp	r3, #34	@ 0x22
 8006148:	d106      	bne.n	8006158 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2200      	movs	r2, #0
 800614e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006152:	6978      	ldr	r0, [r7, #20]
 8006154:	f7ff ff0e 	bl	8005f74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800615e:	f043 0210 	orr.w	r2, r3, #16
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006168:	6978      	ldr	r0, [r7, #20]
 800616a:	f7ff f9f7 	bl	800555c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800616e:	bf00      	nop
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006182:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f7ff f9e1 	bl	800555c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b088      	sub	sp, #32
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	e853 3f00 	ldrex	r3, [r3]
 80061b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	6979      	ldr	r1, [r7, #20]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	613b      	str	r3, [r7, #16]
   return(result);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e6      	bne.n	80061aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff f9a2 	bl	8005534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f0:	bf00      	nop
 80061f2:	3720      	adds	r7, #32
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_UARTEx_DisableFifoMode+0x16>
 8006246:	2302      	movs	r3, #2
 8006248:	e027      	b.n	800629a <HAL_UARTEx_DisableFifoMode+0x66>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2224      	movs	r2, #36	@ 0x24
 8006256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 0201 	bic.w	r2, r2, #1
 8006270:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006278:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e02d      	b.n	800631a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2224      	movs	r2, #36	@ 0x24
 80062ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0201 	bic.w	r2, r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f850 	bl	80063a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006336:	2302      	movs	r3, #2
 8006338:	e02d      	b.n	8006396 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2224      	movs	r2, #36	@ 0x24
 8006346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0201 	bic.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f812 	bl	80063a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d108      	bne.n	80063c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063c0:	e031      	b.n	8006426 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063c2:	2308      	movs	r3, #8
 80063c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80063c6:	2308      	movs	r3, #8
 80063c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	0e5b      	lsrs	r3, r3, #25
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	0f5b      	lsrs	r3, r3, #29
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	7b3a      	ldrb	r2, [r7, #12]
 80063ee:	4911      	ldr	r1, [pc, #68]	@ (8006434 <UARTEx_SetNbDataToProcess+0x94>)
 80063f0:	5c8a      	ldrb	r2, [r1, r2]
 80063f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063f6:	7b3a      	ldrb	r2, [r7, #12]
 80063f8:	490f      	ldr	r1, [pc, #60]	@ (8006438 <UARTEx_SetNbDataToProcess+0x98>)
 80063fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006400:	b29a      	uxth	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	7b7a      	ldrb	r2, [r7, #13]
 800640c:	4909      	ldr	r1, [pc, #36]	@ (8006434 <UARTEx_SetNbDataToProcess+0x94>)
 800640e:	5c8a      	ldrb	r2, [r1, r2]
 8006410:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006414:	7b7a      	ldrb	r2, [r7, #13]
 8006416:	4908      	ldr	r1, [pc, #32]	@ (8006438 <UARTEx_SetNbDataToProcess+0x98>)
 8006418:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800641a:	fb93 f3f2 	sdiv	r3, r3, r2
 800641e:	b29a      	uxth	r2, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	08006534 	.word	0x08006534
 8006438:	0800653c 	.word	0x0800653c

0800643c <memset>:
 800643c:	4402      	add	r2, r0
 800643e:	4603      	mov	r3, r0
 8006440:	4293      	cmp	r3, r2
 8006442:	d100      	bne.n	8006446 <memset+0xa>
 8006444:	4770      	bx	lr
 8006446:	f803 1b01 	strb.w	r1, [r3], #1
 800644a:	e7f9      	b.n	8006440 <memset+0x4>

0800644c <__libc_init_array>:
 800644c:	b570      	push	{r4, r5, r6, lr}
 800644e:	4d0d      	ldr	r5, [pc, #52]	@ (8006484 <__libc_init_array+0x38>)
 8006450:	4c0d      	ldr	r4, [pc, #52]	@ (8006488 <__libc_init_array+0x3c>)
 8006452:	1b64      	subs	r4, r4, r5
 8006454:	10a4      	asrs	r4, r4, #2
 8006456:	2600      	movs	r6, #0
 8006458:	42a6      	cmp	r6, r4
 800645a:	d109      	bne.n	8006470 <__libc_init_array+0x24>
 800645c:	4d0b      	ldr	r5, [pc, #44]	@ (800648c <__libc_init_array+0x40>)
 800645e:	4c0c      	ldr	r4, [pc, #48]	@ (8006490 <__libc_init_array+0x44>)
 8006460:	f000 f818 	bl	8006494 <_init>
 8006464:	1b64      	subs	r4, r4, r5
 8006466:	10a4      	asrs	r4, r4, #2
 8006468:	2600      	movs	r6, #0
 800646a:	42a6      	cmp	r6, r4
 800646c:	d105      	bne.n	800647a <__libc_init_array+0x2e>
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	f855 3b04 	ldr.w	r3, [r5], #4
 8006474:	4798      	blx	r3
 8006476:	3601      	adds	r6, #1
 8006478:	e7ee      	b.n	8006458 <__libc_init_array+0xc>
 800647a:	f855 3b04 	ldr.w	r3, [r5], #4
 800647e:	4798      	blx	r3
 8006480:	3601      	adds	r6, #1
 8006482:	e7f2      	b.n	800646a <__libc_init_array+0x1e>
 8006484:	0800654c 	.word	0x0800654c
 8006488:	0800654c 	.word	0x0800654c
 800648c:	0800654c 	.word	0x0800654c
 8006490:	08006550 	.word	0x08006550

08006494 <_init>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	bf00      	nop
 8006498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649a:	bc08      	pop	{r3}
 800649c:	469e      	mov	lr, r3
 800649e:	4770      	bx	lr

080064a0 <_fini>:
 80064a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a2:	bf00      	nop
 80064a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a6:	bc08      	pop	{r3}
 80064a8:	469e      	mov	lr, r3
 80064aa:	4770      	bx	lr
